{
  "https://www.python.org": {
    "url": "https://www.python.org",
    "content": "Welcome to Python.org Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event >_ Launch Interactive Shell # Python 3: Fibonacci series up to n >>> def fib(n):\r\n>>>     a, b = 0, 1\r\n>>>     while a < n:\r\n>>>         print(a, end=' ')\r\n>>>         a, b = b, a+b\r\n>>>     print()\r\n>>> fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 Functions Defined The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. More about defining functions in Python\u00a03 # Python 3: List comprehensions >>> fruits = ['Banana', 'Apple', 'Lime']\r\n>>> loud_fruits = [fruit.upper() for fruit in fruits]\r\n>>> print(loud_fruits) ['BANANA', 'APPLE', 'LIME'] # List and the enumerate function >>> list(enumerate(fruits)) [(0, 'Banana'), (1, 'Apple'), (2, 'Lime')] Compound Data Types Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. More about lists in Python\u00a03 # Python 3: Simple arithmetic >>> 1 / 2 0.5 >>> 2 ** 3 8 >>> 17 / 3 # classic division returns a float 5.666666666666667 >>> 17 // 3 # floor division 5 Intuitive Interpretation Calculations are simple with Python, and expression syntax is straightforward: the operators + , - , * and / work as expected; parentheses () can be used for grouping. More about simple math functions in Python\u00a03 . # For loop on a list >>> numbers = [2, 4, 6, 8]\r\n>>> product = 1\r\n>>> for number in numbers:\r\n...    product = product * number\r\n... \r\n>>> print('The product is:', product) The product is: 384 All the Flow You\u2019d Expect Python knows the usual control flow statements that other languages speak \u2014 if , for , while and range \u2014 with some of its own twists, of course. More control flow tools in Python\u00a03 # Simple output (with Unicode) >>> print(\"Hello, I'm Python!\") Hello, I'm Python! # Input, assignment >>> name = input('What is your name?\\n') What is your name?\r\nPython >>> print(f'Hi, {name}.') Hi, Python. Quick & Easy to Learn Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. Whet your appetite with our Python\u00a03 overview. Python is a programming language that lets you work quickly and integrate systems more effectively. Learn More Join us in Pittsburgh, PA starting May 14, 2025. Grab your ticket today before we sell out! REGISTER FOR PYCON US! Get Started Whether you're new to programming or an experienced developer, it's easy to learn and use Python. Start with our Beginner\u2019s Guide Download Python source code and installers are available for download for all versions! Latest: Python 3.13.2 Docs Documentation for Python's standard library, along with tutorials and guides, are available online. docs.python.org Jobs Looking for work or have a Python related position that you're trying to hire for? Our relaunched community-run job board is the place to go. jobs.python.org Latest News More 2025- 03-14 Python 3.14.0 alpha 6 is out 2025- 03-12 PSF Distinguished Service Award Granted to Thomas Wouters 2025- 03-11 PSF Distinguished Service Award Granted to Van Lindberg 2025- 03-06 PSF Distinguished Service Award Granted to Ewa Jodlowska 2025- 03-04 Announcing Python Software Foundation Fellow Members for Q4 2024! \ud83c\udf89 Upcoming Events More 2025- 04-05 Python Communities - Yaounde 2025- 04-06 Python Conference Austria 2025 2025- 04-09 Python Meeting D\u00fcsseldorf 2025- 04-11 PyTexas 2025 2025- 04-15 Workshop: Creating Python Communities Success Stories More Python's convenience has made it the most popular language for machine learning and artificial intelligence. Python's flexibility has allowed Anyscale to make ML/AI scalable from laptops to clusters. Python provides convenience and flexibility for scalable ML/AI by Dean Wampler Use Python for\u2026 More Web Development : Django , Pyramid , Bottle , Tornado , Flask , web2py GUI Development : tkInter , PyGObject , PyQt , PySide , Kivy , wxPython , DearPyGui Scientific and Numeric : SciPy , Pandas , IPython Software Development : Buildbot , Trac , Roundup System Administration : Ansible , Salt , OpenStack , xonsh >>> Python Software Foundation The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Learn more Become a Member Donate to the PSF \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice"
  },
  "https://www.djangoproject.com": {
    "url": "https://www.djangoproject.com",
    "content": "The web framework for perfectionists with deadlines | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Django makes it easier to build better web apps more quickly and with less code. Get started with Django Meet Django Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source. Ridiculously fast. Django was designed to help developers take applications from concept to completion as quickly as possible. Reassuringly secure. Django takes security seriously and helps developers avoid many common security mistakes. Exceedingly scalable. Some of the busiest sites on the web leverage Django\u2019s ability to quickly and flexibly scale. Learn more about Django Join the Community Forum - Post a question Discord - Chat with us Back to Top Additional Information Additional Information Download latest release: 5.1.7 Django documentation Support Django! Chartwell Resource Group Ltd donated to the Django Software Foundation to support Django development. Donate today! Latest news Django 5.2 release candidate 1 released Today Django 5.2 release candidate 1, a preview/testing package for the upcoming Django 5.2 release, is available. Posted by Sarah Boyce on March 19, 2025 DSF member of the month - Cory Zue Cory Zue is the DSF member of the month for March 2025. Find out more about one of Django's long-standing Django developer. Posted by Sarah Abderemane on March 14, 2025 More news New to Django? Installation guide Write your first Django app Getting started with Django The power of Django Object-relational mapper Automatic admin interface Robust template system Quick internationalization Explore more features Get involved Ticket system Report bugs and make feature requests Development dashboard see what's currently being worked on Inside the Django community Get Help Django Discord Server Join the Django Discord Community Official Django Forum Join the community on the Django Forum. The Django Software Foundation About the Foundation Our non-profit supports the project Support Django Your contribution makes Django stronger Contact the Django Software Foundation More about the DSF Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://flask.palletsprojects.com": {
    "url": "https://flask.palletsprojects.com",
    "content": "Welcome to Flask \u2014 Flask Documentation (3.1.x) Navigation index modules | next | Flask Documentation (3.1.x) \u00bb Welcome to Flask Welcome to Flask \u00b6 Welcome to Flask\u2019s documentation. Flask is a lightweight WSGI web application framework.\nIt is designed to make getting started quick and easy, with the ability to scale up to\ncomplex applications. Get started with Installation and then get an overview with the Quickstart . There is also a\nmore detailed Tutorial that shows how to create a small but\ncomplete application with Flask. Common patterns are described in the Patterns for Flask section. The rest of the docs describe each\ncomponent of Flask in detail, with a full reference in the API section. Flask depends on the Werkzeug WSGI toolkit, the Jinja template engine, and the Click CLI toolkit. Be sure to check their documentation as well as Flask\u2019s when\nlooking for information. User\u2019s Guide \u00b6 Flask provides configuration and conventions, with sensible defaults, to get started.\nThis section of the documentation explains the different parts of the Flask framework\nand how they can be used, customized, and extended. Beyond Flask itself, look for\ncommunity-maintained extensions to add even more functionality. Installation Python Version Dependencies Virtual environments Install Flask Quickstart A Minimal Application Debug Mode HTML Escaping Routing Static Files Rendering Templates Accessing Request Data Redirects and Errors About Responses Sessions Message Flashing Logging Hooking in WSGI Middleware Using Flask Extensions Deploying to a Web Server Tutorial Project Layout Application Setup Define and Access the Database Blueprints and Views Templates Static Files Blog Blueprint Make the Project Installable Test Coverage Deploy to Production Keep Developing! Templates Jinja Setup Standard Context Controlling Autoescaping Registering Filters Context Processors Streaming Testing Flask Applications Identifying Tests Fixtures Sending Requests with the Test Client Following Redirects Accessing and Modifying the Session Running Commands with the CLI Runner Tests that depend on an Active Context Handling Application Errors Error Logging Tools Error Handlers Custom Error Pages Blueprint Error Handlers Returning API Errors as JSON Logging Debugging Debugging Application Errors In Production The Built-In Debugger External Debuggers Logging Basic Configuration Email Errors to Admins Injecting Request Information Other Libraries Configuration Handling Configuration Basics Debug Mode Builtin Configuration Values Configuring from Python Files Configuring from Data Files Configuring from Environment Variables Configuration Best Practices Development / Production Instance Folders Signals Core Signals Subscribing to Signals Creating Signals Sending Signals Signals and Flask\u2019s Request Context Decorator Based Signal Subscriptions Class-based Views Basic Reusable View URL Variables View Lifetime and self View Decorators Method Hints Method Dispatching and APIs Application Structure and Lifecycle Application Setup Serving the Application How a Request is Handled The Application Context Purpose of the Context Lifetime of the Context Manually Push a Context Storing Data Events and Signals The Request Context Purpose of the Context Lifetime of the Context Manually Push a Context How the Context Works Callbacks and Errors Notes On Proxies Modular Applications with Blueprints Why Blueprints? The Concept of Blueprints My First Blueprint Registering Blueprints Nesting Blueprints Blueprint Resources Building URLs Blueprint Error Handlers Extensions Finding Extensions Using Extensions Building Extensions Command Line Interface Application Discovery Run the Development Server Open a Shell Environment Variables From dotenv Environment Variables From virtualenv Custom Commands Plugins Custom Scripts PyCharm Integration Development Server Command Line In Code Working with the Shell Command Line Interface Creating a Request Context Firing Before/After Request Further Improving the Shell Experience Patterns for Flask Large Applications as Packages Application Factories Application Dispatching Using URL Processors Using SQLite 3 with Flask SQLAlchemy in Flask Uploading Files Caching View Decorators Form Validation with WTForms Template Inheritance Message Flashing JavaScript, fetch , and JSON Lazily Loading Views MongoDB with MongoEngine Adding a favicon Streaming Contents Deferred Request Callbacks Adding HTTP Method Overrides Request Content Checksums Background Tasks with Celery Subclassing Flask Single-Page Applications Security Considerations Resource Use Cross-Site Scripting (XSS) Cross-Site Request Forgery (CSRF) JSON Security Security Headers Copy/Paste to Terminal Deploying to Production Self-Hosted Options Hosting Platforms Using async and await Performance Background tasks When to use Quart instead Extensions Other event loops API Reference \u00b6 If you are looking for information on a specific function, class or\nmethod, this part of the documentation is for you. API Application Object Blueprint Objects Incoming Request Data Response Objects Sessions Session Interface Test Client Test CLI Runner Application Globals Useful Functions and Classes Message Flashing JSON Support Template Rendering Configuration Stream Helpers Useful Internals Signals Class-Based Views URL Route Registrations View Function Options Command Line Interface Additional Notes \u00b6 Design Decisions in Flask The Explicit Application Object The Routing System One Template Engine What does \u201cmicro\u201d mean? Thread Locals Async/await and ASGI support What Flask is, What Flask is Not Flask Extension Development Naming The Extension Class and Initialization Adding Behavior Configuration Techniques Data During a Request Views and Models Recommended Extension Guidelines Contributing BSD-3-Clause License Changes Version 3.1.1 Version 3.1.0 Version 3.0.3 Version 3.0.2 Version 3.0.1 Version 3.0.0 Version 2.3.3 Version 2.3.2 Version 2.3.1 Version 2.3.0 Version 2.2.5 Version 2.2.4 Version 2.2.3 Version 2.2.2 Version 2.2.1 Version 2.2.0 Version 2.1.3 Version 2.1.2 Version 2.1.1 Version 2.1.0 Version 2.0.3 Version 2.0.2 Version 2.0.1 Version 2.0.0 Version 1.1.4 Version 1.1.3 Version 1.1.2 Version 1.1.1 Version 1.1.0 Version 1.0.4 Version 1.0.3 Version 1.0.2 Version 1.0.1 Version 1.0 Version 0.12.5 Version 0.12.4 Version 0.12.3 Version 0.12.2 Version 0.12.1 Version 0.12 Version 0.11.1 Version 0.11 Version 0.10.1 Version 0.10 Version 0.9 Version 0.8.1 Version 0.8 Version 0.7.2 Version 0.7.1 Version 0.7 Version 0.6.1 Version 0.6 Version 0.5.2 Version 0.5.1 Version 0.5 Version 0.4 Version 0.3.1 Version 0.3 Version 0.2 Version 0.1 Project Links Donate PyPI Releases Source Code Issue Tracker Chat Contents Welcome to Flask User\u2019s Guide API Reference Additional Notes Quick search \u00a9 Copyright 2010 Pallets.\n      Created using Sphinx 8.2.3."
  },
  "https://docs.python.org/faq/": {
    "url": "https://docs.python.org/faq/",
    "content": "Python Frequently Asked Questions \u2014 Python 3.13.2 documentation Theme Auto Light Dark Previous topic C API Extension Support for Free Threading Next topic General Python FAQ This Page Report a Bug Show Source Navigation index modules | next | previous | Python \u00bb 3.13.2 Documentation \u00bb Python Frequently Asked Questions | Theme Auto Light Dark | Python Frequently Asked Questions \u00c2\u00b6 General Python FAQ Programming FAQ Design and History FAQ Library and Extension FAQ Extending/Embedding FAQ Python on Windows FAQ Graphic User Interface FAQ \u00e2\u0080\u009cWhy is Python Installed on my Computer?\u00e2\u0080\u009d FAQ Previous topic C API Extension Support for Free Threading Next topic General Python FAQ This Page Report a Bug Show Source \u00c2\u00ab Navigation index modules | next | previous | Python \u00bb 3.13.2 Documentation \u00bb Python Frequently Asked Questions | Theme Auto Light Dark | \u00a9 Copyright 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See History and License for more information. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Apr 01, 2025 (14:46 UTC). Found a bug ? Created using Sphinx 8.2.3."
  },
  "https://peps.python.org": {
    "url": "https://peps.python.org",
    "content": "PEP 0 \u2013 Index of Python Enhancement Proposals (PEPs) | peps.python.org Following system colour scheme Selected dark colour scheme Selected light colour scheme Python Enhancement Proposals Python \u00bb PEP Index \u00bb PEP 0 Toggle light / dark / auto colour theme PEP 0 \u2013 Index of Python Enhancement Proposals (PEPs) Author : The PEP Editors Status : Active Type : Informational Created : 13-Jul-2000 Table of Contents Introduction Topics API Numerical Index Index by Category Process and Meta-PEPs Other Informational PEPs Provisional PEPs (provisionally accepted; interface may still change) Accepted PEPs (accepted; may not be implemented yet) Open PEPs (under consideration) Finished PEPs (done, with a stable interface) Historical Meta-PEPs and Informational PEPs Deferred PEPs (postponed pending further research or updates) Rejected, Superseded, and Withdrawn PEPs Reserved PEP Numbers PEP Types Key PEP Status Key Authors/Owners Introduction This PEP contains the index of all Python Enhancement Proposals,\nknown as PEPs.  PEP numbers are assigned by the PEP editors, and once assigned are never changed.  The version control history of\nthe PEP texts represent their historical record. Topics PEPs for specialist subjects are indexed by topic . Governance PEPs Packaging PEPs Release PEPs Typing PEPs API The PEPS API is a JSON file of metadata about all the published PEPs. Read more here . Numerical Index The numerical index contains a table of all PEPs, ordered by number. Index by Category Process and Meta-PEPs PEP Title Authors PA 1 PEP Purpose and Guidelines Barry Warsaw, Jeremy Hylton, David Goodger, Alyssa Coghlan PA 2 Procedure for Adding New Modules Brett Cannon, Martijn Faassen PA 4 Deprecation of Standard Modules Brett Cannon, Martin von L\u00f6wis PA 7 Style Guide for C Code Guido van Rossum, Barry Warsaw PA 8 Style Guide for Python Code Guido van Rossum, Barry Warsaw, Alyssa Coghlan PA 10 Voting Guidelines Barry Warsaw PA 11 CPython platform support Martin von L\u00f6wis, Brett Cannon PA 12 Sample reStructuredText PEP Template David Goodger, Barry Warsaw, Brett Cannon PA 13 Python Language Governance The Python core team and community PA 387 Backwards Compatibility Policy Benjamin Peterson PA 545 Python Documentation Translations Julien Palard, Inada Naoki, Victor Stinner PA 602 Annual Release Cycle for Python \u0141ukasz Langa 3.9 PA 609 Python Packaging Authority (PyPA) Governance Dustin Ingram, Pradyun Gedam, Sumana Harihareswara PA 676 PEP Infrastructure Process Adam Turner PA 729 Typing governance process Jelle Zijlstra, Shantanu Jain PA 731 C API Working Group Charter Guido van Rossum, Petr Viktorin, Victor Stinner, Steve Dower, Irit Katriel PA 732 The Python Documentation Editorial Board Joanna Jablonski PA 761 Deprecating PGP signatures for CPython artifacts Seth Michael Larson 3.14 Other Informational PEPs PEP Title Authors IA 20 The Zen of Python Tim Peters IA 101 Doing Python Releases 101 Barry Warsaw, Guido van Rossum IF 247 API for Cryptographic Hash Functions A.M. Kuchling IF 248 Python Database API Specification v1.0 Greg Stein, Marc-Andr\u00e9 Lemburg IF 249 Python Database API Specification v2.0 Marc-Andr\u00e9 Lemburg IA 257 Docstring Conventions David Goodger, Guido van Rossum IF 272 API for Block Encryption Algorithms v1.0 A.M. Kuchling IA 287 reStructuredText Docstring Format David Goodger IA 290 Code Migration and Modernization Raymond Hettinger IF 333 Python Web Server Gateway Interface v1.0 Phillip J. Eby IA 394 The \u201cpython\u201d Command on Unix-Like Systems Kerrick Staley, Alyssa Coghlan, Barry Warsaw, Petr Viktorin, Miro Hron\u010dok, Carol Willing IF 399 Pure Python/C Accelerator Module Compatibility Requirements Brett Cannon 3.3 IF 430 Migrating to Python 3 as the default online documentation Alyssa Coghlan IA 434 IDLE Enhancement Exception for All Branches Todd Rovito, Terry Reedy IF 452 API for Cryptographic Hash Functions v2.0 A.M. Kuchling, Christian Heimes IF 457 Notation For Positional-Only Parameters Larry Hastings IF 482 Literature Overview for Type Hints \u0141ukasz Langa IF 483 The Theory of Type Hints Guido van Rossum, Ivan Levkivskyi IA 514 Python registration in the Windows registry Steve Dower IF 579 Refactoring C functions and methods Jeroen Demeyer IF 588 GitHub Issues Migration Plan Mariatta IA 596 Python 3.9 Release Schedule \u0141ukasz Langa 3.9 IF 607 Reducing CPython\u2019s Feature Delivery Latency \u0141ukasz Langa, Steve Dower, Alyssa Coghlan 3.9 IA 619 Python 3.10 Release Schedule Pablo Galindo Salgado 3.10 IF 630 Isolating Extension Modules Petr Viktorin IF 635 Structural Pattern Matching: Motivation and Rationale Tobias Kohn, Guido van Rossum 3.10 IF 636 Structural Pattern Matching: Tutorial Daniel F Moisset 3.10 IF 659 Specializing Adaptive Interpreter Mark Shannon IA 664 Python 3.11 Release Schedule Pablo Galindo Salgado 3.11 IA 672 Unicode-related Security Considerations for Python Petr Viktorin IA 693 Python 3.12 Release Schedule Thomas Wouters 3.12 IA 719 Python 3.13 Release Schedule Thomas Wouters 3.13 IF 733 An Evaluation of Python\u2019s Public C API Erlend Egeberg Aasland, Domenico Andreoli, Stefan Behnel, Carl Friedrich Bolz-Tereick, Simon Cross, Steve Dower, Tim Felgentreff, David Hewitt, Shantanu Jain, Wenzel Jakob, Irit Katriel, Marc-Andre Lemburg, Donghee Na, Karl Nelson, Ronald Oussoren, Antoine Pitrou, Neil Schemenauer, Mark Shannon, Stepan Sindelar, Gregory P. Smith, Eric Snow, Victor Stinner, Guido van Rossum, Petr Viktorin, Carol Willing, William Woodruff, David Woods, Jelle Zijlstra IA 745 Python 3.14 Release Schedule Hugo van Kemenade 3.14 IF 762 REPL-acing the default REPL Pablo Galindo Salgado, \u0141ukasz Langa, Lysandros Nikolaou, Emily Morehouse-Valcarcel 3.13 IA 801 Reserved Barry Warsaw IF 3333 Python Web Server Gateway Interface v1.0.1 Phillip J. Eby IF 8000 Python Language Governance Proposal Overview Barry Warsaw IF 8002 Open Source Governance Survey Barry Warsaw, \u0141ukasz Langa, Antoine Pitrou, Doug Hellmann, Carol Willing IA 8016 The Steering Council Model Nathaniel J. Smith, Donald Stufft IF 8100 January 2019 Steering Council election Nathaniel J. Smith, Ee Durbin IF 8101 2020 Term Steering Council election Ewa Jodlowska, Ee Durbin IF 8102 2021 Term Steering Council election Ewa Jodlowska, Ee Durbin, Joe Carey IF 8103 2022 Term Steering Council election Ewa Jodlowska, Ee Durbin, Joe Carey IF 8104 2023 Term Steering Council election Ee Durbin IF 8105 2024 Term Steering Council election Ee Durbin IF 8106 2025 Term Steering Council election Ee Durbin Provisional PEPs (provisionally accepted; interface may still change) PEP Title Authors SP 708 Extending the Repository API to Mitigate Dependency Confusion Attacks Donald Stufft Accepted PEPs (accepted; may not be implemented yet) PEP Title Authors SA 458 Secure PyPI downloads with signed repository metadata Trishank Karthik Kuppusamy, Vladimir Diaz, Marina Moore, Lukas Puehringer, Joshua Lock, Lois Anne DeLong, Justin Cappos SA 563 Postponed Evaluation of Annotations \u0141ukasz Langa 3.7 SA 590 Vectorcall: a fast calling protocol for CPython Mark Shannon, Jeroen Demeyer 3.8 SA 625 Filename of a Source Distribution Tzu-ping Chung, Paul Moore SA 649 Deferred Evaluation Of Annotations Using Descriptors Larry Hastings 3.14 SA 658 Serve Distribution Metadata in the Simple Repository API Tzu-ping Chung SA 668 Marking Python base environments as \u201cexternally managed\u201d Geoffrey Thomas, Matthias Klose, Filipe La\u00edns, Donald Stufft, Tzu-ping Chung, Stefano Rivera, Elana Hashman, Pradyun Gedam SA 685 Comparison of extra names for optional distribution dependencies Brett Cannon SA 686 Make UTF-8 mode default Inada Naoki 3.15 SA 687 Isolating modules in the standard library Erlend Egeberg Aasland, Petr Viktorin 3.12 SA 691 JSON-based Simple API for Python Package Indexes Donald Stufft, Pradyun Gedam, Cooper Lees, Dustin Ingram SA 699 Remove private dict version field added in PEP 509 Ken Jin 3.12 SA 701 Syntactic formalization of f-strings Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Marta G\u00f3mez Mac\u00edas 3.12 SA 703 Making the Global Interpreter Lock Optional in CPython Sam Gross 3.13 SA 714 Rename dist-info-metadata in the Simple API Donald Stufft SA 739 build-details.json 1.0 \u2014 a static description file for Python build details Filipe La\u00edns 3.14 SA 751 A file format to record Python dependencies for installation reproducibility Brett Cannon SA 753 Uniform project URLs in core metadata William Woodruff, Facundo Tuesca SA 758 Allow except and except* expressions without parentheses Pablo Galindo, Brett Cannon 3.14 SA 768 Safe external debugger interface for CPython Pablo Galindo Salgado, Matt Wozniski, Ivona Stojanovic 3.14 Open PEPs (under consideration) PEP Title Authors S 467 Minor API improvements for binary sequences Alyssa Coghlan, Ethan Furman 3.13 S 480 Surviving a Compromise of PyPI: End-to-end signing of packages Trishank Karthik Kuppusamy, Vladimir Diaz, Justin Cappos, Marina Moore S 603 Adding a frozenmap type to collections Yury Selivanov S 638 Syntactic Macros Mark Shannon S 653 Precise Semantics for Pattern Matching Mark Shannon S 661 Sentinel Values Tal Einat S 671 Syntax for late-bound function argument defaults Chris Angelico 3.12 S 679 Allow parentheses in assert statements Pablo Galindo Salgado 3.12 S 694 Upload 2.0 API for Python Package Indexes Barry Warsaw, Donald Stufft S 710 Recording the provenance of installed packages Fridol\u00edn Pokorn\u00fd S 711 PyBI: a standard format for distributing Python Binaries Nathaniel J. Smith S 718 Subscriptable functions James Hilton-Balfe 3.13 I 720 Cross-compiling Python packages Filipe La\u00edns 3.12 S 725 Specifying external dependencies in pyproject.toml Pradyun Gedam, Ralf Gommers S 727 Documentation in Annotated Metadata Sebasti\u00e1n Ram\u00edrez 3.13 S 728 TypedDict with Typed Extra Items Zixuan James Li 3.14 S 736 Shorthand syntax for keyword arguments at invocation Joshua Bambrick, Chris Angelico 3.14 S 743 Add Py_COMPAT_API_VERSION to the Python C API Victor Stinner, Petr Viktorin 3.14 I 744 JIT Compilation Brandt Bucher, Savannah Ostrowski 3.13 S 746 Type checking Annotated metadata Adrian Garcia Badaracco 3.14 S 747 Annotating Type Forms David Foster, Eric Traut 3.14 S 748 A Unified TLS API for Python Joop van de Pol, William Woodruff 3.14 S 749 Implementing PEP 649 Jelle Zijlstra 3.14 S 750 Template Strings Jim Baker, Guido van Rossum, Paul Everitt, Koudai Aono, Lysandros Nikolaou, Dave Peck 3.14 S 752 Implicit namespaces for package repositories Ofek Lev, Jarek Potiuk P 755 Implicit namespace policy for PyPI Ofek Lev S 763 Limiting deletions on PyPI William Woodruff, Alexis Challande S 764 Inlined typed dictionaries Victorien Plot 3.14 I 766 Explicit Priority Choices Among Multiple Indexes Michael Sarahan S 767 Annotating Read-Only Attributes Eneg 3.14 S 769 Add a \u2018default\u2019 keyword argument to \u2018attrgetter\u2019, \u2018itemgetter\u2019 and \u2018getitem\u2019 Facundo Batista 3.14 S 770 Improving measurability of Python packages with Software Bill-of-Materials Seth Larson S 771 Default Extras for Python Software Packages Thomas Robitaille, Jonathan Dekhtiar P 772 Packaging governance process Barry Warsaw, Deb Nicholson, Pradyun Gedam S 773 A Python Installation Manager for Windows Steve Dower S 774 Removing the LLVM requirement for JIT builds Savannah Ostrowski 3.14 S 775 Make zlib required to build CPython Gregory P. Smith, Stan Ulbrych, Petr Viktorin 3.14 I 776 Emscripten Support Hood Chatham 3.14 S 777 How to Re-invent the Wheel Emma Harper Smith S 779 Criteria for supported status for free-threaded Python Thomas Wouters, Matt Page, Sam Gross 3.14 S 780 ABI features as environment markers Klaus Zimmermann, Ralf Gommers 3.14 S 781 Make TYPE_CHECKING a built-in constant Inada Naoki 3.14 S 782 Add PyBytesWriter C API Victor Stinner 3.14 S 789 Preventing task-cancellation bugs by limiting yield in async generators Zac Hatfield-Dodds, Nathaniel J. Smith 3.14 Finished PEPs (done, with a stable interface) PEP Title Authors SF 100 Python Unicode Integration Marc-Andr\u00e9 Lemburg 2.0 SF 201 Lockstep Iteration Barry Warsaw 2.0 SF 202 List Comprehensions Barry Warsaw 2.0 SF 203 Augmented Assignments Thomas Wouters 2.0 SF 205 Weak References Fred L. Drake, Jr. 2.1 SF 207 Rich Comparisons Guido van Rossum, David Ascher 2.1 SF 208 Reworking the Coercion Model Neil Schemenauer, Marc-Andr\u00e9 Lemburg 2.1 SF 214 Extended Print Statement Barry Warsaw 2.0 SF 217 Display Hook for Interactive Use Moshe Zadka 2.1 SF 218 Adding a Built-In Set Object Type Greg Wilson, Raymond Hettinger 2.2 SF 221 Import As Thomas Wouters 2.0 SF 223 Change the Meaning of x Escapes Tim Peters 2.0 SF 227 Statically Nested Scopes Jeremy Hylton 2.1 SF 229 Using Distutils to Build Python A.M. Kuchling 2.1 SF 230 Warning Framework Guido van Rossum 2.1 SF 232 Function Attributes Barry Warsaw 2.1 SF 234 Iterators Ka-Ping Yee, Guido van Rossum 2.1 SF 235 Import on Case-Insensitive Platforms Tim Peters 2.1 SF 236 Back to the __future__ Tim Peters 2.1 SF 237 Unifying Long Integers and Integers Moshe Zadka, Guido van Rossum 2.2 SF 238 Changing the Division Operator Moshe Zadka, Guido van Rossum 2.2 SF 250 Using site-packages on Windows Paul Moore 2.2 SF 252 Making Types Look More Like Classes Guido van Rossum 2.2 SF 253 Subtyping Built-in Types Guido van Rossum 2.2 SF 255 Simple Generators Neil Schemenauer, Tim Peters, Magnus Lie Hetland 2.2 SF 260 Simplify xrange() Guido van Rossum 2.2 SF 261 Support for \u201cwide\u201d Unicode characters Paul Prescod 2.2 SF 263 Defining Python Source Code Encodings Marc-Andr\u00e9 Lemburg, Martin von L\u00f6wis 2.3 SF 264 Future statements in simulated shells Michael Hudson 2.2 SF 273 Import Modules from Zip Archives James C. Ahlstrom 2.3 SF 274 Dict Comprehensions Barry Warsaw 2.7, 3.0 SF 277 Unicode file name support for Windows NT Neil Hodgson 2.3 SF 278 Universal Newline Support Jack Jansen 2.3 SF 279 The enumerate() built-in function Raymond Hettinger 2.3 SF 282 A Logging System Vinay Sajip, Trent Mick 2.3 SF 285 Adding a bool type Guido van Rossum 2.3 SF 289 Generator Expressions Raymond Hettinger 2.4 SF 292 Simpler String Substitutions Barry Warsaw 2.4 SF 293 Codec Error Handling Callbacks Walter D\u00f6rwald 2.3 SF 301 Package Index and Metadata for Distutils Richard Jones 2.3 SF 302 New Import Hooks Just van Rossum, Paul Moore 2.3 SF 305 CSV File API Kevin Altis, Dave Cole, Andrew McNamara, Skip Montanaro, Cliff Wells 2.3 SF 307 Extensions to the pickle protocol Guido van Rossum, Tim Peters 2.3 SF 308 Conditional Expressions Guido van Rossum, Raymond Hettinger 2.5 SF 309 Partial Function Application Peter Harris 2.5 SF 311 Simplified Global Interpreter Lock Acquisition for Extensions Mark Hammond 2.3 SF 318 Decorators for Functions and Methods Kevin D. Smith, Jim J. Jewett, Skip Montanaro, Anthony Baxter 2.4 SF 322 Reverse Iteration Raymond Hettinger 2.4 SF 324 subprocess - New process module Peter Astrand 2.4 SF 327 Decimal Data Type Facundo Batista 2.4 SF 328 Imports: Multi-Line and Absolute/Relative Aahz 2.4, 2.5, 2.6 SF 331 Locale-Independent Float/String Conversions Christian R. Reis 2.4 SF 338 Executing modules as scripts Alyssa Coghlan 2.5 SF 341 Unifying try-except and try-finally Georg Brandl 2.5 SF 342 Coroutines via Enhanced Generators Guido van Rossum, Phillip J. Eby 2.5 SF 343 The \u201cwith\u201d Statement Guido van Rossum, Alyssa Coghlan 2.5 SF 352 Required Superclass for Exceptions Brett Cannon, Guido van Rossum 2.5 SF 353 Using ssize_t as the index type Martin von L\u00f6wis 2.5 SF 357 Allowing Any Object to be Used for Slicing Travis Oliphant 2.5 SF 358 The \u201cbytes\u201d Object Neil Schemenauer, Guido van Rossum 2.6, 3.0 SF 362 Function Signature Object Brett Cannon, Jiwon Seo, Yury Selivanov, Larry Hastings 3.3 SF 366 Main module explicit relative imports Alyssa Coghlan 2.6, 3.0 SF 370 Per user site-packages directory Christian Heimes 2.6, 3.0 SF 371 Addition of the multiprocessing package to the standard library Jesse Noller, Richard Oudkerk 2.6, 3.0 SF 372 Adding an ordered dictionary to collections Armin Ronacher, Raymond Hettinger 2.7, 3.1 SF 376 Database of Installed Python Distributions Tarek Ziad\u00e9 2.7, 3.2 SF 378 Format Specifier for Thousands Separator Raymond Hettinger 2.7, 3.1 SF 380 Syntax for Delegating to a Subgenerator Gregory Ewing 3.3 SF 383 Non-decodable Bytes in System Character Interfaces Martin von L\u00f6wis 3.1 SF 384 Defining a Stable ABI Martin von L\u00f6wis 3.2 SF 389 argparse - New Command Line Parsing Module Steven Bethard 2.7, 3.2 SF 391 Dictionary-Based Configuration For Logging Vinay Sajip 2.7, 3.2 SF 393 Flexible String Representation Martin von L\u00f6wis 3.3 SF 397 Python launcher for Windows Mark Hammond, Martin von L\u00f6wis 3.3 SF 405 Python Virtual Environments Carl Meyer 3.3 SF 409 Suppressing exception context Ethan Furman 3.3 SF 412 Key-Sharing Dictionary Mark Shannon 3.3 SF 414 Explicit Unicode Literal for Python 3.3 Armin Ronacher, Alyssa Coghlan 3.3 SF 415 Implement context suppression with exception attributes Benjamin Peterson 3.3 SF 417 Including mock in the Standard Library Michael Foord 3.3 SF 418 Add monotonic time, performance counter, and process time functions Cameron Simpson, Jim J. Jewett, Stephen J. Turnbull, Victor Stinner 3.3 SF 420 Implicit Namespace Packages Eric V. Smith 3.3 SF 421 Adding sys.implementation Eric Snow 3.3 SF 424 A method for exposing a length hint Alex Gaynor 3.4 SF 425 Compatibility Tags for Built Distributions Daniel Holth 3.4 SF 427 The Wheel Binary Package Format 1.0 Daniel Holth SF 428 The pathlib module \u2013 object-oriented filesystem paths Antoine Pitrou 3.4 SF 435 Adding an Enum type to the Python standard library Barry Warsaw, Eli Bendersky, Ethan Furman 3.4 SF 436 The Argument Clinic DSL Larry Hastings 3.4 SF 440 Version Identification and Dependency Specification Alyssa Coghlan, Donald Stufft SF 441 Improving Python ZIP Application Support Daniel Holth, Paul Moore 3.5 SF 442 Safe object finalization Antoine Pitrou 3.4 SF 443 Single-dispatch generic functions \u0141ukasz Langa 3.4 SF 445 Add new APIs to customize Python memory allocators Victor Stinner 3.4 SF 446 Make newly created file descriptors non-inheritable Victor Stinner 3.4 SF 448 Additional Unpacking Generalizations Joshua Landau 3.5 SF 450 Adding A Statistics Module To The Standard Library Steven D\u2019Aprano 3.4 SF 451 A ModuleSpec Type for the Import System Eric Snow 3.4 SF 453 Explicit bootstrapping of pip in Python installations Donald Stufft, Alyssa Coghlan SF 454 Add a new tracemalloc module to trace Python memory allocations Victor Stinner 3.4 SF 456 Secure and interchangeable hash algorithm Christian Heimes 3.4 SF 461 Adding % formatting to bytes and bytearray Ethan Furman 3.5 SF 465 A dedicated infix operator for matrix multiplication Nathaniel J. Smith 3.5 SF 466 Network Security Enhancements for Python 2.7.x Alyssa Coghlan 2.7.9 SF 468 Preserving the order of **kwargs in a function. Eric Snow 3.6 SF 471 os.scandir() function \u2013 a better and faster directory iterator Ben Hoyt 3.5 SF 475 Retry system calls failing with EINTR Charles-Fran\u00e7ois Natali, Victor Stinner 3.5 SF 476 Enabling certificate verification by default for stdlib http clients Alex Gaynor 2.7.9, 3.4.3, 3.5 SF 477 Backport ensurepip (PEP 453) to Python 2.7 Donald Stufft, Alyssa Coghlan SF 479 Change StopIteration handling inside generators Chris Angelico, Guido van Rossum 3.5 SF 484 Type Hints Guido van Rossum, Jukka Lehtosalo, \u0141ukasz Langa 3.5 SF 485 A Function for testing approximate equality Christopher Barker 3.5 SF 486 Make the Python Launcher aware of virtual environments Paul Moore 3.5 SF 487 Simpler customisation of class creation Martin Teichmann 3.6 SF 488 Elimination of PYO files Brett Cannon 3.5 SF 489 Multi-phase extension module initialization Petr Viktorin, Stefan Behnel, Alyssa Coghlan 3.5 SF 492 Coroutines with async and await syntax Yury Selivanov 3.5 SF 493 HTTPS verification migration tools for Python 2.7 Alyssa Coghlan, Robert Kuska, Marc-Andr\u00e9 Lemburg 2.7.12 SF 495 Local Time Disambiguation Alexander Belopolsky, Tim Peters 3.6 SF 498 Literal String Interpolation Eric V. Smith 3.6 SF 503 Simple Repository API Donald Stufft SF 506 Adding A Secrets Module To The Standard Library Steven D\u2019Aprano 3.6 SF 508 Dependency specification for Python Software Packages Robert Collins SF 515 Underscores in Numeric Literals Georg Brandl, Serhiy Storchaka 3.6 SF 517 A build-system independent format for source trees Nathaniel J. Smith, Thomas Kluyver SF 518 Specifying Minimum Build System Requirements for Python Projects Brett Cannon, Nathaniel J. Smith, Donald Stufft SF 519 Adding a file system path protocol Brett Cannon, Koos Zevenhoven 3.6 SF 520 Preserving Class Attribute Definition Order Eric Snow 3.6 SF 523 Adding a frame evaluation API to CPython Brett Cannon, Dino Viehland 3.6 SF 524 Make os.urandom() blocking on Linux Victor Stinner 3.6 SF 525 Asynchronous Generators Yury Selivanov 3.6 SF 526 Syntax for Variable Annotations Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach, Guido van Rossum 3.6 SF 527 Removing Un(der)used file types/extensions on PyPI Donald Stufft SF 528 Change Windows console encoding to UTF-8 Steve Dower 3.6 SF 529 Change Windows filesystem encoding to UTF-8 Steve Dower 3.6 SF 530 Asynchronous Comprehensions Yury Selivanov 3.6 SF 538 Coercing the legacy C locale to a UTF-8 based locale Alyssa Coghlan 3.7 SF 539 A New C-API for Thread-Local Storage in CPython Erik M. Bray, Masayuki Yamamoto 3.7 SF 540 Add a new UTF-8 Mode Victor Stinner 3.7 SF 544 Protocols: Structural subtyping (static duck typing) Ivan Levkivskyi, Jukka Lehtosalo, \u0141ukasz Langa 3.8 SF 552 Deterministic pycs Benjamin Peterson 3.7 SF 553 Built-in breakpoint() Barry Warsaw 3.7 SF 557 Data Classes Eric V. Smith 3.7 SF 560 Core support for typing module and generic types Ivan Levkivskyi 3.7 SF 561 Distributing and Packaging Type Information Emma Harper Smith 3.7 SF 562 Module __getattr__ and __dir__ Ivan Levkivskyi 3.7 SF 564 Add new time functions with nanosecond resolution Victor Stinner 3.7 SF 565 Show DeprecationWarning in __main__ Alyssa Coghlan 3.7 SF 566 Metadata for Python Software Packages 2.1 Dustin Ingram 3.x SF 567 Context Variables Yury Selivanov 3.7 SF 570 Python Positional-Only Parameters Larry Hastings, Pablo Galindo, Mario Corchero, Eric N. Vander Weele 3.8 SF 572 Assignment Expressions Chris Angelico, Tim Peters, Guido van Rossum 3.8 SF 573 Module State Access from C Extension Methods Petr Viktorin, Alyssa Coghlan, Eric Snow, Marcel Plch 3.9 SF 574 Pickle protocol 5 with out-of-band data Antoine Pitrou 3.8 SF 578 Python Runtime Audit Hooks Steve Dower 3.8 SF 584 Add Union Operators To dict Steven D\u2019Aprano, Brandt Bucher 3.9 SF 585 Type Hinting Generics In Standard Collections \u0141ukasz Langa 3.9 SF 586 Literal Types Michael Lee, Ivan Levkivskyi, Jukka Lehtosalo 3.8 SF 587 Python Initialization Configuration Victor Stinner, Alyssa Coghlan 3.8 SF 589 TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys Jukka Lehtosalo 3.8 SF 591 Adding a final qualifier to typing Michael J. Sullivan, Ivan Levkivskyi 3.8 SF 592 Adding \u201cYank\u201d Support to the Simple API Donald Stufft SF 593 Flexible function and variable annotations Till Varoquaux, Konstantin Kashin 3.9 SF 594 Removing dead batteries from the standard library Christian Heimes, Brett Cannon 3.11 SF 597 Add optional EncodingWarning Inada Naoki 3.10 SF 600 Future \u2018manylinux\u2019 Platform Tags for Portable Linux Built Distributions Nathaniel J. Smith, Thomas Kluyver SF 604 Allow writing union types as X | Y Philippe PRADOS, Maggie Moss 3.10 SF 610 Recording the Direct URL Origin of installed distributions St\u00e9phane Bidoul, Chris Jerdonek SF 612 Parameter Specification Variables Mark Mendoza 3.10 SF 613 Explicit Type Aliases Shannon Zhu 3.10 SF 614 Relaxing Grammar Restrictions On Decorators Brandt Bucher 3.9 SF 615 Support for the IANA Time Zone Database in the Standard Library Paul Ganssle 3.9 SF 616 String methods to remove prefixes and suffixes Dennis Sweeney 3.9 SF 617 New PEG parser for CPython Guido van Rossum, Pablo Galindo, Lysandros Nikolaou 3.9 SF 618 Add Optional Length-Checking To zip Brandt Bucher 3.10 SF 621 Storing project metadata in pyproject.toml Brett Cannon, Dustin Ingram, Paul Ganssle, Pradyun Gedam, S\u00e9bastien Eustace, Thomas Kluyver, Tzu-ping Chung SF 623 Remove wstr from Unicode Inada Naoki 3.10 SF 624 Remove Py_UNICODE encoder APIs Inada Naoki 3.11 SF 626 Precise line numbers for debugging and other tools. Mark Shannon 3.10 SF 627 Recording installed projects Petr Viktorin SF 628 Add math.tau Alyssa Coghlan 3.6 SF 629 Versioning PyPI\u2019s Simple API Donald Stufft SF 632 Deprecate distutils module Steve Dower 3.10 SF 634 Structural Pattern Matching: Specification Brandt Bucher, Guido van Rossum 3.10 SF 639 Improving License Clarity with Better Package Metadata Philippe Ombredanne, C.A.M. Gerlach, Karolina Surma SF 643 Metadata for Package Source Distributions Paul Moore SF 644 Require OpenSSL 1.1.1 or newer Christian Heimes 3.10 SF 646 Variadic Generics Mark Mendoza, Matthew Rahtz, Pradeep Kumar Srinivasan, Vincent Siles 3.11 SF 647 User-Defined Type Guards Eric Traut 3.10 SF 652 Maintaining the Stable ABI Petr Viktorin 3.10 SF 654 Exception Groups and except* Irit Katriel, Yury Selivanov, Guido van Rossum 3.11 SF 655 Marking individual TypedDict items as required or potentially-missing David Foster 3.11 SF 656 Platform Tag for Linux Distributions Using Musl Tzu-ping Chung SF 657 Include Fine Grained Error Locations in Tracebacks Pablo Galindo, Batuhan Taskaya, Ammar Askar 3.11 SF 660 Editable installs for pyproject.toml based builds (wheel based) Daniel Holth, St\u00e9phane Bidoul SF 667 Consistent views of namespaces Mark Shannon, Tian Gao 3.13 SF 669 Low Impact Monitoring for CPython Mark Shannon 3.12 SF 670 Convert macros to functions in the Python C API Erlend Egeberg Aasland, Victor Stinner 3.11 SF 673 Self Type Pradeep Kumar Srinivasan, James Hilton-Balfe 3.11 SF 675 Arbitrary Literal String Type Pradeep Kumar Srinivasan, Graham Bleaney 3.11 SF 678 Enriching Exceptions with Notes Zac Hatfield-Dodds 3.11 SF 680 tomllib: Support for Parsing TOML in the Standard Library Taneli Hukkinen, Shantanu Jain 3.11 SF 681 Data Class Transforms Erik De Bonte, Eric Traut 3.11 SF 682 Format Specifier for Signed Zero John Belmonte 3.11 SF 683 Immortal Objects, Using a Fixed Refcount Eric Snow, Eddie Elizondo 3.12 SF 684 A Per-Interpreter GIL Eric Snow 3.12 SF 688 Making the buffer protocol accessible in Python Jelle Zijlstra 3.12 SF 689 Unstable C API tier Petr Viktorin 3.12 SF 692 Using TypedDict for more precise **kwargs typing Franek Magiera 3.12 SF 695 Type Parameter Syntax Eric Traut 3.12 SF 696 Type Defaults for Type Parameters James Hilton-Balfe 3.13 SF 697 Limited C API for Extending Opaque Types Petr Viktorin 3.12 SF 698 Override Decorator for Static Typing Steven Troxler, Joshua Xu, Shannon Zhu 3.12 SF 700 Additional Fields for the Simple API for Package Indexes Paul Moore SF 702 Marking deprecations using the type system Jelle Zijlstra 3.13 SF 705 TypedDict: Read-only items Alice Purcell 3.13 SF 706 Filter for tarfile.extractall Petr Viktorin 3.12 SF 709 Inlined comprehensions Carl Meyer 3.12 SF 715 Disabling bdist_egg distribution uploads on PyPI William Woodruff SF 721 Using tarfile.data_filter for source distribution extraction Petr Viktorin 3.12 SF 723 Inline script metadata Ofek Lev SF 730 Adding iOS as a supported platform Russell Keith-Magee 3.13 SF 735 Dependency Groups in pyproject.toml Stephen Rosen SF 737 C API to format a type fully qualified name Victor Stinner 3.13 SF 738 Adding Android as a supported platform Malcolm Smith 3.13 SF 740 Index support for digital attestations William Woodruff, Facundo Tuesca, Dustin Ingram SF 741 Python Configuration C API Victor Stinner 3.14 SF 742 Narrowing types with TypeIs Jelle Zijlstra 3.13 SF 757 C API to import-export Python integers Sergey B Kirpichev, Victor Stinner 3.14 SF 765 Disallow return/break/continue that exit a finally block Irit Katriel, Alyssa Coghlan 3.14 SF 3101 Advanced String Formatting Talin 3.0 SF 3102 Keyword-Only Arguments Talin 3.0 SF 3104 Access to Names in Outer Scopes Ka-Ping Yee 3.0 SF 3105 Make print a function Georg Brandl 3.0 SF 3106 Revamping dict.keys(), .values() and .items() Guido van Rossum 3.0 SF 3107 Function Annotations Collin Winter, Tony Lownds 3.0 SF 3108 Standard Library Reorganization Brett Cannon 3.0 SF 3109 Raising Exceptions in Python 3000 Collin Winter 3.0 SF 3110 Catching Exceptions in Python 3000 Collin Winter 3.0 SF 3111 Simple input built-in in Python 3000 Andre Roberge 3.0 SF 3112 Bytes literals in Python 3000 Jason Orendorff 3.0 SF 3113 Removal of Tuple Parameter Unpacking Brett Cannon 3.0 SF 3114 Renaming iterator.next() to iterator.__next__() Ka-Ping Yee 3.0 SF 3115 Metaclasses in Python 3000 Talin 3.0 SF 3116 New I/O Daniel Stutzbach, Guido van Rossum, Mike Verdone 3.0 SF 3118 Revising the buffer protocol Travis Oliphant, Carl Banks 3.0 SF 3119 Introducing Abstract Base Classes Guido van Rossum, Talin 3.0 SF 3120 Using UTF-8 as the default source encoding Martin von L\u00f6wis 3.0 SF 3121 Extension Module Initialization and Finalization Martin von L\u00f6wis 3.0 SF 3123 Making PyObject_HEAD conform to standard C Martin von L\u00f6wis 3.0 SF 3127 Integer Literal Support and Syntax Patrick Maupin 3.0 SF 3129 Class Decorators Collin Winter 3.0 SF 3131 Supporting Non-ASCII Identifiers Martin von L\u00f6wis 3.0 SF 3132 Extended Iterable Unpacking Georg Brandl 3.0 SF 3134 Exception Chaining and Embedded Tracebacks Ka-Ping Yee 3.0 SF 3135 New Super Calvin Spealman, Tim Delaney, Lie Ryan 3.0 SF 3137 Immutable Bytes and Mutable Buffer Guido van Rossum 3.0 SF 3138 String representation in Python 3000 Atsuo Ishimoto 3.0 SF 3141 A Type Hierarchy for Numbers Jeffrey Yasskin 3.0 SF 3144 IP Address Manipulation Library for the Python Standard Library Peter Moody 3.3 SF 3147 PYC Repository Directories Barry Warsaw 3.2 SF 3148 futures - execute computations asynchronously Brian Quinlan 3.2 SF 3149 ABI version tagged .so files Barry Warsaw 3.2 SF 3151 Reworking the OS and IO exception hierarchy Antoine Pitrou 3.3 SF 3154 Pickle protocol version 4 Antoine Pitrou 3.4 SF 3155 Qualified name for classes and functions Antoine Pitrou 3.3 SF 3156 Asynchronous IO Support Rebooted: the \u201casyncio\u201d Module Guido van Rossum 3.3 Historical Meta-PEPs and Informational PEPs PEP Title Authors PS 5 Guidelines for Language Evolution Paul Prescod PS 6 Bug Fix Releases Aahz, Anthony Baxter IF 160 Python 1.6 Release Schedule Fred L. Drake, Jr. 1.6 IF 200 Python 2.0 Release Schedule Jeremy Hylton 2.0 IF 226 Python 2.1 Release Schedule Jeremy Hylton 2.1 IF 251 Python 2.2 Release Schedule Barry Warsaw, Guido van Rossum 2.2 IF 283 Python 2.3 Release Schedule Guido van Rossum 2.3 IF 320 Python 2.4 Release Schedule Barry Warsaw, Raymond Hettinger, Anthony Baxter 2.4 PF 347 Migrating the Python CVS to Subversion Martin von L\u00f6wis IF 356 Python 2.5 Release Schedule Neal Norwitz, Guido van Rossum, Anthony Baxter 2.5 PF 360 Externally Maintained Packages Brett Cannon IF 361 Python 2.6 and 3.0 Release Schedule Neal Norwitz, Barry Warsaw 2.6, 3.0 IF 373 Python 2.7 Release Schedule Benjamin Peterson 2.7 PF 374 Choosing a distributed VCS for the Python project Brett Cannon, Stephen J. Turnbull, Alexandre Vassalotti, Barry Warsaw, Dirkjan Ochtman IF 375 Python 3.1 Release Schedule Benjamin Peterson 3.1 PF 385 Migrating from Subversion to Mercurial Dirkjan Ochtman, Antoine Pitrou, Georg Brandl IF 392 Python 3.2 Release Schedule Georg Brandl 3.2 IF 398 Python 3.3 Release Schedule Georg Brandl 3.3 IF 404 Python 2.8 Un-release Schedule Barry Warsaw 2.8 IF 429 Python 3.4 Release Schedule Larry Hastings 3.4 PS 438 Transitioning to release-file hosting on PyPI Holger Krekel, Carl Meyer PF 449 Removal of the PyPI Mirror Auto Discovery and Naming Scheme Donald Stufft PF 464 Removal of the PyPI Mirror Authenticity API Donald Stufft PF 470 Removing External Hosting Support on PyPI Donald Stufft IF 478 Python 3.5 Release Schedule Larry Hastings 3.5 IF 494 Python 3.6 Release Schedule Ned Deily 3.6 PF 512 Migrating from hg.python.org to GitHub Brett Cannon IF 537 Python 3.7 Release Schedule Ned Deily 3.7 PF 541 Package Index Name Retention \u0141ukasz Langa IF 569 Python 3.8 Release Schedule \u0141ukasz Langa 3.8 PF 581 Using GitHub Issues for CPython Mariatta PF 3000 Python 3000 Guido van Rossum PF 3002 Procedure for Backwards-Incompatible Changes Steven Bethard PF 3003 Python Language Moratorium Brett Cannon, Jesse Noller, Guido van Rossum PF 3099 Things that will Not Change in Python 3000 Georg Brandl PF 3100 Miscellaneous Python 3.0 Plans Brett Cannon PF 8001 Python Governance Voting Process Brett Cannon, Christian Heimes, Donald Stufft, Eric Snow, Gregory P. Smith, \u0141ukasz Langa, Mariatta, Nathaniel J. Smith, Pablo Galindo Salgado, Raymond Hettinger, Tal Einat, Tim Peters, Zachary Ware Deferred PEPs (postponed pending further research or updates) PEP Title Authors SD 213 Attribute Access Handlers Paul Prescod 2.1 SD 219 Stackless Python Gordon McMillan 2.1 SD 222 Web Library Enhancements A.M. Kuchling 2.1 SD 233 Python Online Help Paul Prescod 2.1 SD 267 Optimized Access to Module Namespaces Jeremy Hylton 2.2 SD 269 Pgen Module for Python Jonathan Riehl 2.2 SD 280 Optimizing access to globals Guido van Rossum 2.3 SD 286 Enhanced Argument Tuples Martin von L\u00f6wis 2.3 SD 312 Simple Implicit Lambda Roman Suzi, Alex Martelli 2.4 SD 316 Programming by Contract for Python Terence Way SD 323 Copyable Iterators Alex Martelli 2.5 SD 337 Logging Usage in the Standard Library Michael P. Dubner 2.5 SD 368 Standard image protocol and class Lino Mastrodomenico 2.6, 3.0 SD 400 Deprecate codecs.StreamReader and codecs.StreamWriter Victor Stinner 3.3 SD 403 General purpose decorator clause (aka \u201c@in\u201d clause) Alyssa Coghlan 3.4 PD 407 New release cycle and introducing long-term support versions Antoine Pitrou, Georg Brandl, Barry Warsaw SD 419 Protecting cleanup statements from interruptions Paul Colomiets 3.3 ID 423 Naming conventions and recipes related to packaging Benoit Bryon ID 444 Python Web3 Interface Chris McDonough, Armin Ronacher SD 447 Add __getdescriptor__ method to metaclass Ronald Oussoren SD 491 The Wheel Binary Package Format 1.9 Daniel Holth SD 499 python -m foo should also bind \u2018foo\u2019 in sys.modules Cameron Simpson, Chris Angelico, Joseph Jevnik 3.10 SD 505 None-aware operators Mark E. Haase, Steve Dower 3.8 SD 532 A circuit breaking protocol and binary operators Alyssa Coghlan, Mark E. Haase 3.8 SD 533 Deterministic cleanup for iterators Nathaniel J. Smith SD 534 Improved Errors for Missing Standard Library Modules Tom\u00e1\u0161 Orsava, Petr Viktorin, Alyssa Coghlan SD 535 Rich comparison chaining Alyssa Coghlan 3.8 SD 547 Running extension modules using the -m option Marcel Plch, Petr Viktorin 3.7 SD 556 Threaded garbage collection Antoine Pitrou 3.7 SD 568 Generator-sensitivity for Context Variables Nathaniel J. Smith 3.8 SD 674 Disallow using macros as l-values Victor Stinner 3.12 SD 734 Multiple Interpreters in the Stdlib Eric Snow 3.13 SD 3124 Overloading, Generic Functions, Interfaces, and Adaptation Phillip J. Eby SD 3143 Standard daemon process library Ben Finney 3.x SD 3150 Statement local namespaces (aka \u201cgiven\u201d clause) Alyssa Coghlan 3.4 Rejected, Superseded, and Withdrawn PEPs PEP Title Authors PW 3 Guidelines for Handling Bug Reports Jeremy Hylton PW 9 Sample Plaintext PEP Template Barry Warsaw PW 42 Feature Requests Jeremy Hylton IS 102 Doing Python Micro Releases Anthony Baxter, Barry Warsaw, Guido van Rossum IW 103 Collecting information about git Oleg Broytman SR 204 Range Literals Thomas Wouters 2.0 IW 206 Python Advanced Library A.M. Kuchling SW 209 Multi-dimensional Arrays Paul Barrett, Travis Oliphant 2.2 SR 210 Decoupling the Interpreter Loop David Ascher 2.1 SR 211 Adding A New Outer Product Operator Greg Wilson 2.1 SR 212 Loop Counter Iteration Peter Schneider-Kamp 2.1 SS 215 String Interpolation Ka-Ping Yee 2.1 IW 216 Docstring Format Moshe Zadka IR 220 Coroutines, Generators, Continuations Gordon McMillan SR 224 Attribute Docstrings Marc-Andr\u00e9 Lemburg 2.1 SR 225 Elementwise/Objectwise Operators Huaiyu Zhu, Gregory Lielens 2.1 SW 228 Reworking Python\u2019s Numeric Model Moshe Zadka, Guido van Rossum SR 231 __findattr__() Barry Warsaw 2.1 SR 239 Adding a Rational Type to Python Christopher A. Craig, Moshe Zadka 2.2 SR 240 Adding a Rational Literal to Python Christopher A. Craig, Moshe Zadka 2.2 SS 241 Metadata for Python Software Packages A.M. Kuchling SW 242 Numeric Kinds Paul F. Dubois 2.2 SW 243 Module Repository Upload Mechanism Sean Reifschneider 2.1 SR 244 The directive statement Martin von L\u00f6wis 2.1 SR 245 Python Interface Syntax Michel Pelletier 2.2 SR 246 Object Adaptation Alex Martelli, Clark C. Evans 2.5 SR 254 Making Classes Look More Like Types Guido van Rossum 2.2 SR 256 Docstring Processing System Framework David Goodger SR 258 Docutils Design Specification David Goodger SR 259 Omit printing newline after newline Guido van Rossum 2.2 SR 262 A Database of Installed Python Packages A.M. Kuchling SR 265 Sorting Dictionaries by Value Grant Griffin 2.2 SW 266 Optimizing Global Variable/Attribute Access Skip Montanaro 2.3 SR 268 Extended HTTP functionality and WebDAV Greg Stein 2.x SR 270 uniq method for list objects Jason Petrone 2.2 SR 271 Prefixing sys.path by command line option Fr\u00e9d\u00e9ric B. Giacometti 2.2 SR 275 Switching on Multiple Values Marc-Andr\u00e9 Lemburg 2.6 SR 276 Simple Iterator for ints Jim Althoff 2.3 SR 281 Loop Counter Iteration with range and xrange Magnus Lie Hetland 2.3 SR 284 Integer for-loops David Eppstein, Gregory Ewing 2.3 SW 288 Generators Attributes and Exceptions Raymond Hettinger 2.5 IS 291 Backward Compatibility for the Python 2 Standard Library Neal Norwitz 2.3 SR 294 Type Names in the types Module Oren Tirosh 2.5 SR 295 Interpretation of multiline string constants Stepan Koltsov 3.0 SW 296 Adding a bytes Object Type Scott Gilbert 2.3 SR 297 Support for System Upgrades Marc-Andr\u00e9 Lemburg 2.6 SW 298 The Locked Buffer Interface Thomas Heller 2.3 SR 299 Special __main__() function in modules Jeff Epler 2.3 SR 303 Extend divmod() for Multiple Divisors Thomas Bellman 2.3 SW 304 Controlling Generation of Bytecode Files Skip Montanaro IW 306 How to Change Python\u2019s Grammar Michael Hudson, Jack Diederich, Alyssa Coghlan, Benjamin Peterson SR 310 Reliable Acquisition/Release Pairs Michael Hudson, Paul Moore 2.4 SR 313 Adding Roman Numeral Literals to Python Mike Meyer 2.4 SS 314 Metadata for Python Software Packages 1.1 A.M. Kuchling, Richard Jones 2.5 SR 315 Enhanced While Loop Raymond Hettinger, W Isaac Carroll 2.5 SR 317 Eliminate Implicit Exception Instantiation Steven Taschuk 2.4 SR 319 Python Synchronize/Asynchronize Block Michel Pelletier 2.4 SW 321 Date/Time Parsing and Formatting A.M. Kuchling 2.4 SR 325 Resource-Release Support for Generators Samuele Pedroni 2.4 SR 326 A Case for Top and Bottom Values Josiah Carlson, Terry Reedy 2.4 SR 329 Treating Builtins as Constants in the Standard Library Raymond Hettinger 2.4 SR 330 Python Bytecode Verification Michel Pelletier 2.6 SR 332 Byte vectors and String/Unicode Unification Skip Montanaro 2.5 SW 334 Simple Coroutines via SuspendIteration Clark C. Evans 3.0 SR 335 Overloadable Boolean Operators Gregory Ewing 3.3 SR 336 Make None Callable Andrew McClelland IW 339 Design of the CPython Compiler Brett Cannon SR 340 Anonymous Block Statements Guido van Rossum SS 344 Exception Chaining and Embedded Tracebacks Ka-Ping Yee 2.5 SS 345 Metadata for Python Software Packages 1.2 Richard Jones 2.7 SW 346 User Defined (\u201cwith\u201d) Statements Alyssa Coghlan 2.5 SR 348 Exception Reorganization for Python 3.0 Brett Cannon SR 349 Allow str() to return unicode strings Neil Schemenauer 2.5 IR 350 Codetags Micah Elliott SR 351 The freeze protocol Barry Warsaw 2.5 SS 354 Enumerations in Python Ben Finney 2.6 SR 355 Path - Object oriented filesystem paths Bj\u00f6rn Lindqvist 2.5 SW 359 The \u201cmake\u201d Statement Steven Bethard 2.6 SR 363 Syntax For Dynamic Attribute Access Ben North SW 364 Transitioning to the Py3K Standard Library Barry Warsaw 2.6 SR 365 Adding the pkg_resources module Phillip J. Eby SS 367 New Super Calvin Spealman, Tim Delaney 2.6 SW 369 Post import hooks Christian Heimes 2.6, 3.0 SR 377 Allow __enter__() methods to skip the statement body Alyssa Coghlan 2.7, 3.1 SW 379 Adding an Assignment Expression Jervis Whitley 2.7, 3.2 SW 381 Mirroring infrastructure for PyPI Tarek Ziad\u00e9, Martin von L\u00f6wis SR 382 Namespace Packages Martin von L\u00f6wis 3.2 SS 386 Changing the version comparison module in Distutils Tarek Ziad\u00e9 SR 390 Static metadata for Distutils Tarek Ziad\u00e9 2.7, 3.2 SW 395 Qualified Names for Modules Alyssa Coghlan 3.4 IW 396 Module Version Numbers Barry Warsaw PR 401 BDFL Retirement Barry Warsaw, Brett Cannon SR 402 Simplified Package Layout and Partitioning Phillip J. Eby 3.3 SW 406 Improved Encapsulation of Import State Alyssa Coghlan, Greg Slodkowicz 3.4 SR 408 Standard library __preview__ package Alyssa Coghlan, Eli Bendersky 3.3 SR 410 Use decimal.Decimal type for timestamps Victor Stinner 3.3 IS 411 Provisional packages in the Python standard library Alyssa Coghlan, Eli Bendersky 3.3 PW 413 Faster evolution of the Python Standard Library Alyssa Coghlan SR 416 Add a frozendict builtin type Victor Stinner 3.3 SW 422 Simpler customisation of class creation Alyssa Coghlan, Daniel Urban 3.5 IW 426 Metadata for Python Software Packages 2.0 Alyssa Coghlan, Daniel Holth, Donald Stufft SS 431 Time zone support improvements Lennart Regebro SW 432 Restructuring the CPython startup sequence Alyssa Coghlan, Victor Stinner, Eric Snow SS 433 Easier suppression of file descriptor inheritance Victor Stinner 3.4 SR 437 A DSL for specifying signatures, annotations and argument converters Stefan Krah 3.4 SR 439 Inclusion of implicit pip bootstrap in Python installation Richard Jones 3.4 SR 455 Adding a key-transforming dictionary to collections Antoine Pitrou 3.5 SW 459 Standard Metadata Extensions for Python Software Packages Alyssa Coghlan SW 460 Add binary interpolation and formatting Antoine Pitrou 3.5 PW 462 Core development workflow automation for CPython Alyssa Coghlan SR 463 Exception-catching expressions Chris Angelico 3.5 SW 469 Migration of dict iteration code to Python 3 Alyssa Coghlan 3.5 SR 472 Support for indexing with keyword arguments Stefano Borini, Joseph Martinot-Lagarde 3.6 SR 473 Adding structured data to built-in exceptions Sebastian Kreft PW 474 Creating forge.python.org Alyssa Coghlan PW 481 Migrate CPython to Git, Github, and Phabricator Donald Stufft SR 490 Chain exceptions at C level Victor Stinner 3.6 IR 496 Environment Markers James Polley PR 497 A standard mechanism for backward compatibility Ed Schofield SR 500 A protocol for delegating datetime methods to their tzinfo implementations Alexander Belopolsky, Tim Peters SW 501 General purpose template literal strings Alyssa Coghlan, Nick Humrich 3.12 IR 502 String Interpolation - Extended Discussion Mike G. Miller 3.6 SW 504 Using the System RNG by default Alyssa Coghlan 3.6 PR 507 Migrate CPython to Git and GitLab Barry Warsaw SS 509 Add a private version to dict Victor Stinner 3.6 SR 510 Specialize functions with guards Victor Stinner 3.6 SR 511 API for code transformers Victor Stinner 3.6 IS 513 A Platform Tag for Portable Linux Built Distributions Robert T. McGibbon, Nathaniel J. Smith SR 516 Build system abstraction for pip/conda etc Robert Collins, Nathaniel J. Smith SW 521 Managing global context via \u2018with\u2019 blocks in generators and coroutines Nathaniel J. Smith 3.6 SR 522 Allow BlockingIOError in security sensitive APIs Alyssa Coghlan, Nathaniel J. Smith 3.6 SW 531 Existence checking operators Alyssa Coghlan 3.7 SW 536 Final Grammar for Literal String Interpolation Philipp Angerer 3.7 SR 542 Dot Notation Assignment In Function Header Markus Meskanen SW 543 A Unified TLS API for Python Cory Benfield, Christian Heimes 3.7 SR 546 Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7 Victor Stinner, Cory Benfield 2.7 SR 548 More Flexible Loop Control R David Murray 3.7 SR 549 Instance Descriptors Larry Hastings 3.7 SW 550 Execution Context Yury Selivanov, Elvis Pranskevichus 3.7 IW 551 Security transparency in the Python runtime Steve Dower 3.7 SS 554 Multiple Interpreters in the Stdlib Eric Snow 3.13 SW 555 Context-local variables (contextvars) Koos Zevenhoven 3.7 SW 558 Defined semantics for locals() Alyssa Coghlan 3.13 SR 559 Built-in noop() Barry Warsaw 3.7 IS 571 The manylinux2010 Platform Tag Mark  Williams, Geoffrey Thomas, Thomas Kluyver SW 575 Unifying function/method classes Jeroen Demeyer 3.8 SW 576 Rationalize Built-in function classes Mark Shannon 3.8 SW 577 Augmented Assignment Expressions Alyssa Coghlan 3.8 SR 580 The C call protocol Jeroen Demeyer 3.8 SR 582 Python local packages directory Kushal Das, Steve Dower, Donald Stufft, Alyssa Coghlan 3.12 IW 583 A Concurrency Memory Model for Python Jeffrey Yasskin IW 595 Improving bugs.python.org Ezio Melotti, Berker Peksag IW 598 Introducing incremental feature releases Alyssa Coghlan 3.9 IS 599 The manylinux2014 Platform Tag Dustin Ingram SR 601 Forbid return/break/continue breaking out of finally Damien George, Batuhan Taskaya 3.8 IR 605 A rolling feature release stream for CPython Steve Dower, Alyssa Coghlan 3.9 SR 606 Python Compatibility Version Victor Stinner 3.9 SR 608 Coordinated Python release Miro Hron\u010dok, Victor Stinner 3.9 SW 611 The one million limit Mark Shannon SW 620 Hide implementation details from the C API Victor Stinner 3.12 SS 622 Structural Pattern Matching Brandt Bucher, Daniel F Moisset, Tobias Kohn, Ivan Levkivskyi, Guido van Rossum, Talin 3.10 SS 631 Dependency specification in pyproject.toml based on PEP 508 Ofek Lev SR 633 Dependency specification in pyproject.toml using an exploded TOML table Laurie Opperman, Arun Babu Neelicattu SR 637 Support for indexing with keyword arguments Stefano Borini 3.10 SR 640 Unused variable syntax Thomas Wouters 3.10 SR 641 Using an underscore in the version portion of Python 3.10 compatibility tags Brett Cannon, Steve Dower, Barry Warsaw 3.10 SR 642 Explicit Pattern Syntax for Structural Pattern Matching Alyssa Coghlan 3.10 SW 645 Allow writing optional types as x? Maggie Moss SR 648 Extensible customizations of the interpreter at startup Mario Corchero 3.11 SW 650 Specifying Installer Requirements for Python Projects Vikram Jayanthi, Dustin Ingram, Brett Cannon SR 651 Robust Stack Overflow Handling Mark Shannon SR 662 Editable installs via virtual wheels Bern\u00e1t G\u00e1bor IR 663 Standardizing Enum str(), repr(), and format() behaviors Ethan Furman 3.11 SR 665 A file format to list Python dependencies for reproducibility of an application Brett Cannon, Pradyun Gedam, Tzu-ping Chung SR 666 Reject Foolish Indentation Laura Creighton 2.2 SR 677 Callable Type Syntax Steven Troxler, Pradeep Kumar Srinivasan 3.11 SR 690 Lazy Imports Germ\u00e1n M\u00e9ndez Bravo, Carl Meyer 3.12 SW 704 Require virtual environments by default for package installers Pradyun Gedam SR 707 A simplified signature for __exit__ and __aexit__ Irit Katriel 3.12 SR 712 Adding a \u201cconverter\u201d parameter to dataclasses.field Joshua Cannon 3.13 SR 713 Callable Modules Amethyst Reese 3.12 SR 722 Dependency specification for single-file scripts Paul Moore SW 724 Stricter Type Guards Rich Chiodo, Eric Traut, Erik De Bonte 3.13 SR 726 Module __setattr__ and __delattr__ Sergey B Kirpichev 3.13 SR 754 IEEE 754 Floating Point Special Values Gregory R. Warnes 2.3 SW 756 Add PyUnicode_Export() and PyUnicode_Import() C functions Victor Stinner 3.14 SW 759 External Wheel Hosting Barry Warsaw, Emma Harper Smith SW 760 No More Bare Excepts Pablo Galindo, Brett Cannon 3.14 PR 2026 Calendar versioning for Python Hugo van Kemenade 3.26 PW 3001 Procedure for reviewing and improving standard library modules Georg Brandl SR 3103 A Switch/Case Statement Guido van Rossum 3.0 SR 3117 Postfix type declarations Georg Brandl 3.0 SR 3122 Delineation of the main module Brett Cannon SR 3125 Remove Backslash Continuation Jim J. Jewett SR 3126 Remove Implicit String Concatenation Jim J. Jewett, Raymond Hettinger SR 3128 BList: A Faster List-like Type Daniel Stutzbach 2.6, 3.0 SR 3130 Access to Current Module/Class/Function Jim J. Jewett 3.0 SR 3133 Introducing Roles Collin Winter 3.0 SR 3136 Labeled break and continue Matt Chisholm 3.1 SR 3139 Cleaning out sys and the \u201cinterpreter\u201d module Benjamin Peterson 3.0 SR 3140 str(container) should call str(item), not repr(item) Oleg Broytman, Jim J. Jewett SR 3142 Add a \u201cwhile\u201d clause to generator expressions Gerald Britton 3.0 SW 3145 Asynchronous I/O For subprocess.Popen Eric Pruitt, Charles R. McCreary, Josiah Carlson 3.2 SW 3146 Merging Unladen Swallow into CPython Collin Winter, Jeffrey Yasskin, Reid Kleckner 3.3 SR 3152 Cofunctions Gregory Ewing 3.3 SS 3153 Asynchronous IO support Laurens Van Houtven IR 8010 The Technical Leader Governance Model Barry Warsaw IR 8011 Python Governance Model Lead by Trio of Pythonistas Mariatta, Barry Warsaw IR 8012 The Community Governance Model \u0141ukasz Langa IR 8013 The External Council Governance Model Steve Dower IR 8014 The Commons Governance Model Jack Jansen IR 8015 Organization of the Python community Victor Stinner Reserved PEP Numbers PEP Title Authors 801 RESERVED Warsaw PEP Types Key I \u2014 Informational : Non-normative PEP containing background, guidelines or other information relevant to the Python ecosystem P \u2014 Process : Normative PEP describing or proposing a change to a Python community process, workflow or governance S \u2014 Standards Track : Normative PEP with a new feature for Python, implementation change for CPython or interoperability standard for the ecosystem More info in PEP 1 . PEP Status Key A \u2014 Accepted : Normative proposal accepted for implementation A \u2014 Active : Currently valid informational guidance, or an in-use process D \u2014 Deferred : Inactive draft that may be taken up again at a later time <No letter> \u2014 Draft : Proposal under active discussion and revision F \u2014 Final : Accepted and implementation complete, or no longer active P \u2014 Provisional : Provisionally accepted but additional feedback needed R \u2014 Rejected : Formally declined and will not be accepted S \u2014 Superseded : Replaced by another succeeding PEP W \u2014 Withdrawn : Removed from consideration by sponsor or authors More info in PEP 1 . Authors/Owners Name Email Address A.M. Kuchling amk at amk.ca Aahz aahz at pythoncraft.com Adam Turner python at quite.org.uk Adrian Garcia Badaracco adrian at adriangb.com Alex Gaynor alex.gaynor at gmail.com Alex Martelli aleaxit at gmail.com Alexander Belopolsky alexander.belopolsky at gmail.com Alexandre Vassalotti alexandre at peadrop.com Alexis Challande alexis.challande at trailofbits.com Alice Purcell alicederyn at gmail.com Alyssa Coghlan ncoghlan at gmail.com Amethyst Reese amethyst at n7.gg Ammar Askar ammar at ammaraskar.com Andre Roberge andre.roberge at gmail.com Andrew McClelland eternalsquire at comcast.net Andrew McNamara andrewm at object-craft.com.au Anthony Baxter anthony at interlink.com.au Antoine Pitrou solipsis at pitrou.net Armin Ronacher armin.ronacher at active-4.com Arun Babu Neelicattu arun.neelicattu at gmail.com Atsuo Ishimoto ishimoto at gembook.org Barry Warsaw barry at python.org Batuhan Taskaya batuhan at python.org Ben Finney ben+python at benfinney.id.au Ben Hoyt benhoyt at gmail.com Ben North ben at redfrontdoor.org Benjamin Peterson benjamin at python.org Benoit Bryon benoit at marmelune.net Berker Peksag berker.peksag at gmail.com Bern\u00e1t G\u00e1bor gaborjbernat at gmail.com Bj\u00f6rn Lindqvist bjourne at gmail.com Brandt Bucher brandt at python.org Brett Cannon brett at python.org Brian Quinlan brian at sweetapp.com C.A.M. Gerlach cam.gerlach at gerlach.cam Calvin Spealman ironfroggy at gmail.com Cameron Simpson cs at cskk.id.au Carl Banks pythondev at aerojockey.com Carl Friedrich Bolz-Tereick cfbolz at gmx.de Carl Meyer carl at oddbird.net Carol Willing willingc at gmail.com Charles R. McCreary Charles-Fran\u00e7ois Natali cf.natali at gmail.com Chris Angelico rosuav at gmail.com Chris Jerdonek chris.jerdonek at gmail.com Chris McDonough chrism at plope.com Christian Heimes christian at python.org Christian R. Reis kiko at async.com.br Christopher A. Craig python-pep at ccraig.org Christopher Barker pythonchb at gmail.com Clark C. Evans cce at clarkevans.com Cliff Wells logiplexsoftware at earthlink.net Collin Winter collinwinter at google.com Cooper Lees me at cooperlees.com Cory Benfield cory at lukasa.co.uk Damien George Daniel F Moisset dfmoisset at gmail.com Daniel Holth dholth at gmail.com Daniel Stutzbach daniel at stutzbachenterprises.com Daniel Urban urban.dani+py at gmail.com Dave Cole djc at object-craft.com.au Dave Peck davepeck at davepeck.org David Ascher davida at activestate.com David Eppstein eppstein at ics.uci.edu David Foster david at dafoster.net David Goodger goodger at python.org David Hewitt 1939362+davidhewitt at users.noreply.github.com David Woods dw-git at d-woods.co.uk Deb Nicholson deb at python.org Dennis Sweeney sweeney.dennis650 at gmail.com Dino Viehland dinov at microsoft.com Dirkjan Ochtman dirkjan at ochtman.nl Domenico Andreoli domenico.andreoli at linux.com Donald Stufft donald at stufft.io Donghee Na donghee.na at python.org Doug Hellmann doug at doughellmann.com Dustin Ingram di at python.org Ed Schofield ed at pythoncharmers.com Eddie Elizondo eduardo.elizondorueda at gmail.com Ee Durbin ee at python.org Elana Hashman ehashman at debian.org Eli Bendersky eliben at gmail.com Elvis Pranskevichus elvis at edgedb.com Emily Morehouse-Valcarcel emily at python.org Emma Harper Smith emma at python.org Eneg eneg at discuss.python.org Eric N. Vander Weele ericvw at gmail.com Eric Pruitt Eric Snow ericsnowcurrently at gmail.com Eric Traut erictr at microsoft.com Eric V. Smith eric at trueblade.com Erik De Bonte erikd at microsoft.com Erik M. Bray Erlend Egeberg Aasland erlend at python.org Ethan Furman ethan at stoneleaf.us Ewa Jodlowska ewa at python.org Ezio Melotti ezio.melotti at gmail.com Facundo Batista facundo at taniquetil.com.ar Facundo Tuesca facundo.tuesca at trailofbits.com Filipe La\u00edns lains at python.org Franek Magiera framagie at gmail.com Fred L. Drake, Jr. fred at fdrake.net Fr\u00e9d\u00e9ric B. Giacometti fred at arakne.com Fridol\u00edn Pokorn\u00fd fridolin.pokorny at gmail.com Geoffrey Thomas geofft at ldpreload.com Georg Brandl georg at python.org Gerald Britton gerald.britton at gmail.com Germ\u00e1n M\u00e9ndez Bravo german.mb at gmail.com Gordon McMillan gmcm at hypernet.com Graham Bleaney gbleaney at gmail.com Grant Griffin g2 at iowegian.com Greg Slodkowicz jergosh at gmail.com Greg Stein gstein at lyra.org Greg Wilson gvwilson at ddj.com Gregory Ewing greg.ewing at canterbury.ac.nz Gregory Lielens gregory.lielens at fft.be Gregory P. Smith greg at krypto.org Gregory R. Warnes gregory_r_warnes at groton.pfizer.com Guido van Rossum guido at python.org Holger Krekel holger at merlinux.eu Hood Chatham roberthoodchatham at gmail.com Huaiyu Zhu hzhu at users.sourceforge.net Hugo van Kemenade Inada Naoki songofacandy at gmail.com Irit Katriel irit at python.org Ivan Levkivskyi levkivskyi at gmail.com Ivona Stojanovic stojanovic.i at hotmail.com Jack Diederich jackdied at gmail.com Jack Jansen jack at cwi.nl James C. Ahlstrom jim at interet.com James Hilton-Balfe gobot1234yt at gmail.com James Polley jp at jamezpolley.com Jarek Potiuk potiuk at apache.org Jason Orendorff jason.orendorff at gmail.com Jason Petrone jp at demonseed.net Jeff Epler jepler at unpythonic.net Jeffrey Yasskin jyasskin at google.com Jelle Zijlstra jelle.zijlstra at gmail.com Jeremy Hylton jeremy at alum.mit.edu Jeroen Demeyer j.demeyer at ugent.be Jervis Whitley jervisau at gmail.com Jesse Noller jnoller at gmail.com Jim Althoff james_althoff at i2.com Jim Baker jim.baker at python.org Jim J. Jewett jimjjewett at gmail.com Jiwon Seo seojiwon at gmail.com Joanna Jablonski Joe Carey joe at python.org John Belmonte john at neggie.net Jonathan Dekhtiar jonathan at dekhtiar.com Jonathan Riehl jriehl at spaceship.com Joop van de Pol joop.vandepol at trailofbits.com Joseph Jevnik joejev at gmail.com Joseph Martinot-Lagarde Joshua Bambrick jbambrick at google.com Joshua Cannon joshdcannon at gmail.com Joshua Landau joshua at landau.ws Joshua Lock jlock at vmware.com Joshua Xu jxu425 at fb.com Josiah Carlson jcarlson at uci.edu Jukka Lehtosalo jukka.lehtosalo at iki.fi Julien Palard julien at palard.fr Just van Rossum just at letterror.com Justin Cappos jcappos at nyu.edu Ka-Ping Yee ping at zesty.ca Karl Nelson nelson85 at llnl.gov Karolina Surma karolina.surma at gazeta.pl Ken Jin kenjin at python.org Kerrick Staley mail at kerrickstaley.com Kevin Altis altis at semi-retired.com Kevin D. Smith kevin.smith at themorgue.org Klaus Zimmermann klaus_zimmermann at gmx.de Konstantin Kashin kkashin at fb.com Koos Zevenhoven k7hoven at gmail.com Koudai Aono koxudaxi at gmail.com Kushal Das mail at kushaldas.in Larry Hastings larry at hastings.org Laura Creighton lac at strakt.com Laurens Van Houtven _ at lvh.cc Laurie Opperman laurie_opperman at hotmail.com Lennart Regebro regebro at gmail.com Lie Ryan lie.1296 at gmail.com Lino Mastrodomenico l.mastrodomenico at gmail.com Lisa Roach lisaroach14 at gmail.com Lois Anne DeLong lad278 at nyu.edu Lukas Puehringer lukas.puehringer at nyu.edu Lysandros Nikolaou lisandrosnik at gmail.com Maggie Moss maggiebmoss at gmail.com Magnus Lie Hetland magnus at hetland.org Malcolm Smith smith at chaquo.com Marc-Andre Lemburg mal at lemburg.com Marc-Andr\u00e9 Lemburg mal at lemburg.com Marcel Plch gmarcel.plch at gmail.com Mariatta mariatta at python.org Marina Moore mm9693 at nyu.edu Mario Corchero mariocj89 at gmail.com Mark E. Haase mehaase at gmail.com Mark Hammond mhammond at skippinet.com.au Mark Mendoza mendoza.mark.a at gmail.com Mark Shannon mark at hotpy.org Mark  Williams mrw at enotuniq.org Markus Meskanen markusmeskanen at gmail.com Marta G\u00f3mez Mac\u00edas cyberwitch at google.com Martijn Faassen faassen at infrae.com Martin Teichmann lkb.teichmann at gmail.com Martin von L\u00f6wis martin at v.loewis.de Masayuki Yamamoto Matt Chisholm matt-python at theory.org Matt Page mpage at python.org Matt Wozniski godlygeek at gmail.com Matthew Rahtz mrahtz at google.com Matthias Klose doko at ubuntu.com Micah Elliott mde at tracos.org Michael Foord michael at python.org Michael Hudson mwh at python.net Michael J. Sullivan sully at msully.net Michael Lee michael.lee.0x2a at gmail.com Michael P. Dubner dubnerm at mindless.com Michael Sarahan msarahan at gmail.com Michel Pelletier michel at users.sourceforge.net Mike G. Miller Mike Meyer mwm at mired.org Mike Verdone mike.verdone at gmail.com Miro Hron\u010dok miro at hroncok.cz Moshe Zadka moshez at zadka.site.co.il Nathaniel J. Smith njs at pobox.com Neal Norwitz nnorwitz at gmail.com Ned Deily nad at python.org Neil Hodgson neilh at scintilla.org Neil Schemenauer nas at arctrix.com Nick Humrich nick at humrich.us Ofek Lev ofekmeister at gmail.com Oleg Broytman phd at phdru.name Oren Tirosh oren at hishome.net Pablo Galindo pablogsal at python.org Pablo Galindo Salgado pablogsal at python.org Patrick Maupin pmaupin at gmail.com Paul Barrett barrett at stsci.edu Paul Colomiets paul at colomiets.name Paul Everitt pauleveritt at me.com Paul F. Dubois paul at pfdubois.com Paul Ganssle paul at ganssle.io Paul Moore p.f.moore at gmail.com Paul Prescod paul at prescod.net Peter Astrand astrand at lysator.liu.se Peter Harris scav at blueyonder.co.uk Peter Moody pmoody at google.com Peter Schneider-Kamp nowonder at nowonder.de Petr Viktorin encukou at gmail.com Philip House phouse512 at gmail.com Philipp Angerer phil.angerer at gmail.com Philippe Ombredanne pombredanne at nexb.com Philippe PRADOS python at prados.fr Phillip J. Eby pje at telecommunity.com Pradeep Kumar Srinivasan gohanpra at gmail.com Pradyun Gedam pradyunsg at gmail.com R David Murray Ralf Gommers ralf.gommers at gmail.com Raymond Hettinger python at rcn.com Reid Kleckner rnk at mit.edu Rich Chiodo rchiodo at microsoft.com Richard Jones richard at python.org Richard Oudkerk r.m.oudkerk at googlemail.com Robert Collins rbtcollins at hp.com Robert Kuska rkuska at redhat.com Robert T. McGibbon rmcgibbo at gmail.com Roman Suzi rnd at onego.ru Ronald Oussoren ronaldoussoren at mac.com Russell Keith-Magee russell at keith-magee.com Ryan Gonzalez rymg19 at gmail.com Sam Gross colesbury at gmail.com Samuele Pedroni pedronis at python.org Savannah Ostrowski savannah at python.org Scott Gilbert xscottg at yahoo.com Sean Reifschneider jafo-pep at tummy.com Sebastian Kreft skreft at deezer.com Sebasti\u00e1n Ram\u00edrez tiangolo at gmail.com Sergey B Kirpichev skirpichev at gmail.com Serhiy Storchaka Seth Larson seth at python.org Seth Michael Larson seth at python.org S\u00e9bastien Eustace sebastien at eustace.io Shannon Zhu szhu at fb.com Shantanu Jain hauntsaninja at gmail.com Simon Cross hodgestar at gmail.com Skip Montanaro skip at pobox.com Stan Ulbrych stanulbrych at gmail.com Stefan Behnel stefan_ml at behnel.de Stefan Krah skrah at bytereef.org Stefano Borini Stefano Rivera stefanor at debian.org Stepan Koltsov yozh at mx1.ru Stepan Sindelar stepan.sindelar at oracle.com Stephen J. Turnbull stephen at xemacs.org Stephen Rosen sirosen0 at gmail.com Steve Dower steve.dower at python.org Steven Bethard steven.bethard at gmail.com Steven D\u2019Aprano steve at pearwood.info Steven Taschuk staschuk at telusplanet.net Steven Troxler steven.troxler at gmail.com St\u00e9phane Bidoul stephane.bidoul at gmail.com Sumana Harihareswara sh at changeset.nyc Tal Einat tal at python.org Talin viridia at gmail.com Taneli Hukkinen Tarek Ziad\u00e9 tarek at ziade.org Terence Way terry at wayforward.net Terry Reedy tjreedy at udel.edu The Python core team and community Thomas Bellman bellman+pep-divmod at lysator.liu.se Thomas Heller theller at python.net Thomas Kluyver thomas at kluyver.me.uk Thomas Robitaille thomas.robitaille at gmail.com Thomas Wouters thomas at python.org Tian Gao gaogaotiantian at hotmail.com Till Varoquaux till at fb.com Tim Delaney timothy.c.delaney at gmail.com Tim Felgentreff tim.felgentreff at oracle.com Tim Peters tim.peters at gmail.com Tobias Kohn kohnt at tobiaskohn.ch Todd Rovito rovitotv at gmail.com Tom\u00e1\u0161 Orsava tomas.n at orsava.cz Tony Lownds tony at lownds.com Travis Oliphant oliphant at ee.byu.edu Trent Mick trentm at activestate.com Trishank Karthik Kuppusamy karthik at trishank.com Tzu-ping Chung uranusjr at gmail.com Victor Stinner vstinner at python.org Victorien Plot contact at vctrn.dev Vikram Jayanthi vikramjayanthi at google.com Vinay Sajip vinay_sajip at red-dove.com Vincent Siles vsiles at fb.com Vladimir Diaz vladimir.diaz at nyu.edu W Isaac Carroll icarroll at pobox.com Walter D\u00f6rwald walter at livinglogic.de Wenzel Jakob wenzel.jakob at epfl.ch William Woodruff william at yossarian.net Yury Selivanov yury at edgedb.com Zac Hatfield-Dodds zac at zhd.dev Zachary Ware zach at python.org Zixuan James Li p359101898 at gmail.com \u0141ukasz Langa lukasz at python.org Contents Introduction Topics API Numerical Index Index by Category Process and Meta-PEPs Other Informational PEPs Provisional PEPs (provisionally accepted; interface may still change) Accepted PEPs (accepted; may not be implemented yet) Open PEPs (under consideration) Finished PEPs (done, with a stable interface) Historical Meta-PEPs and Informational PEPs Deferred PEPs (postponed pending further research or updates) Rejected, Superseded, and Withdrawn PEPs Reserved PEP Numbers PEP Types Key PEP Status Key Authors/Owners"
  },
  "https://pyfound.blogspot.com/2025/03/dsa-thomas-wouters.html": {
    "url": "https://pyfound.blogspot.com/2025/03/dsa-thomas-wouters.html",
    "content": "Python Software Foundation News: PSF Distinguished Service Award Granted to Thomas Wouters News from the Python Software Foundation Wednesday, March 12, 2025 PSF Distinguished Service Award Granted to Thomas Wouters Thomas Wouters, a longtime member of the PSF Board, has been recognized with the PSF\u2019s Distinguished Service Award. Over the last 25 years, Thomas has been a steady, welcoming presence in the Python community, serving in countless critical roles\u2014often behind the scenes. Thomas has served three separate terms on the PSF Board (2001\u20132004, 2017\u20132019, and 2020\u20132023), including his final year as Board Chair. He even stepped in as General Manager for six months, leading our staff during the search for a new Executive Director. On top of that, he served five years on the Steering Council, helping guide key technical decisions for Python itself, and is the Release Manager for both Python 3.12 and 3.13. The PSF\u2019s Distinguished Service Award ( DSA ) is granted to individuals who make sustained exemplary contributions to the Python community. Each award is voted on by the PSF Board and they are looking for people whose impact has positively and significantly shaped the Python world. Thomas\u2019 work with the Python community very much exemplifies the ethos of \u201cbuild the community you want to see.\u201d After receiving the award Thomas shared, \"I'm incredibly proud of what we, as a community, have created and continue to create in the PSF: a caring, diverse, inclusive and considerate environment, and a stable foundation for everyone everywhere in the Python community to thrive and prosper.\" Whether it was keeping meetings running smoothly, handling critical admin tasks, stepping up wherever needed, or acting as a historian of the PSF and Python\u2019s evolution, Thomas has done it all\u2014and with unmatched dedication. Curious about previous recipients of the DSA or wondering how to nominate someone? Check out the PSF\u2019s Distinguished Service Awards page . The PSF also bestows Community Service Awards to recognize outstanding community members\u2013 if you\u2019d like to learn more about CSAs and how they differ from DSAs, check out our Service Awards given by the PSF: what are they and how they differ blog post . Posted by Marie Nordin at 3/12/2025 11:32:00 AM Older Post Home Mission The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Python Software Foundation Grants Program Membership Awards Meeting Minutes PSF Sponsors A big thank you to the above PSF sponsors for supporting our mission! Blog Archive \u25bc 2025 (6) \u25bc March (4) PSF Distinguished Service Award Granted to Thomas ... PSF Distinguished Service Award Granted to Van Lin... PSF Distinguished Service Award Granted to Ewa Jod... Announcing Python Software Foundation Fellow Membe... \u25ba February (1) \u25ba January (1) \u25ba 2024 (58) \u25ba December (6) \u25ba November (5) \u25ba October (3) \u25ba September (2) \u25ba August (4) \u25ba July (7) \u25ba June (16) \u25ba May (4) \u25ba April (2) \u25ba March (2) \u25ba February (3) \u25ba January (4) \u25ba 2023 (37) \u25ba December (1) \u25ba November (3) \u25ba October (3) \u25ba September (2) \u25ba August (3) \u25ba June (5) \u25ba May (12) \u25ba April (2) \u25ba March (1) \u25ba February (3) \u25ba January (2) \u25ba 2022 (35) \u25ba December (2) \u25ba November (3) \u25ba October (2) \u25ba July (3) \u25ba June (6) \u25ba May (12) \u25ba April (2) \u25ba March (3) \u25ba February (1) \u25ba January (1) \u25ba 2021 (42) \u25ba December (3) \u25ba November (4) \u25ba October (3) \u25ba September (2) \u25ba August (1) \u25ba July (2) \u25ba June (4) \u25ba May (12) \u25ba April (5) \u25ba March (1) \u25ba February (4) \u25ba January (1) \u25ba 2020 (51) \u25ba December (8) \u25ba November (3) \u25ba October (3) \u25ba September (4) \u25ba July (4) \u25ba June (2) \u25ba May (10) \u25ba April (11) \u25ba March (4) \u25ba January (2) \u25ba 2019 (45) \u25ba December (3) \u25ba November (3) \u25ba October (3) \u25ba September (4) \u25ba August (3) \u25ba July (3) \u25ba June (5) \u25ba May (11) \u25ba April (1) \u25ba March (2) \u25ba February (5) \u25ba January (2) \u25ba 2018 (31) \u25ba December (5) \u25ba November (1) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (3) \u25ba June (3) \u25ba May (5) \u25ba April (2) \u25ba March (2) \u25ba February (1) \u25ba January (2) \u25ba 2017 (32) \u25ba December (3) \u25ba November (2) \u25ba October (4) \u25ba September (6) \u25ba August (2) \u25ba July (2) \u25ba May (2) \u25ba April (3) \u25ba March (2) \u25ba February (2) \u25ba January (4) \u25ba 2016 (27) \u25ba December (2) \u25ba October (2) \u25ba August (4) \u25ba July (1) \u25ba June (3) \u25ba May (6) \u25ba April (4) \u25ba March (2) \u25ba January (3) \u25ba 2015 (67) \u25ba December (2) \u25ba November (4) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (4) \u25ba June (6) \u25ba May (4) \u25ba April (13) \u25ba March (14) \u25ba February (9) \u25ba January (4) \u25ba 2014 (14) \u25ba October (1) \u25ba September (1) \u25ba August (2) \u25ba July (1) \u25ba May (1) \u25ba April (1) \u25ba March (2) \u25ba February (3) \u25ba January (2) \u25ba 2013 (18) \u25ba November (1) \u25ba September (2) \u25ba August (1) \u25ba July (1) \u25ba June (1) \u25ba April (1) \u25ba March (5) \u25ba February (3) \u25ba January (3) \u25ba 2012 (21) \u25ba December (3) \u25ba November (2) \u25ba October (2) \u25ba September (1) \u25ba August (1) \u25ba July (1) \u25ba June (2) \u25ba May (4) \u25ba April (1) \u25ba March (1) \u25ba January (3) \u25ba 2011 (55) \u25ba December (2) \u25ba November (1) \u25ba October (7) \u25ba September (5) \u25ba August (2) \u25ba July (1) \u25ba June (3) \u25ba May (8) \u25ba April (8) \u25ba March (13) \u25ba February (2) \u25ba January (3) \u25ba 2010 (35) \u25ba December (4) \u25ba November (1) \u25ba October (3) \u25ba September (2) \u25ba August (1) \u25ba July (8) \u25ba June (6) \u25ba May (2) \u25ba April (4) \u25ba March (2) \u25ba January (2) \u25ba 2009 (21) \u25ba December (1) \u25ba October (1) \u25ba September (6) \u25ba August (4) \u25ba July (4) \u25ba June (1) \u25ba May (2) \u25ba April (1) \u25ba February (1) \u25ba 2008 (23) \u25ba December (1) \u25ba November (1) \u25ba October (1) \u25ba August (3) \u25ba July (1) \u25ba May (3) \u25ba April (1) \u25ba March (5) \u25ba February (4) \u25ba January (3) \u25ba 2007 (26) \u25ba December (3) \u25ba November (2) \u25ba October (6) \u25ba September (1) \u25ba August (1) \u25ba July (1) \u25ba June (2) \u25ba May (1) \u25ba April (1) \u25ba March (2) \u25ba February (3) \u25ba January (3) \u25ba 2006 (39) \u25ba December (3) \u25ba November (4) \u25ba October (5) \u25ba September (4) \u25ba August (4) \u25ba July (3) \u25ba May (7) \u25ba April (6) \u25ba March (3) Powered by Blogger ."
  },
  "https://saltproject.io": {
    "url": "https://saltproject.io",
    "content": "Saltproject.io Media Blog Security Announcements Salt Air Subscribe for updates Documentation Overview Salt Install Guide Salt User Guide All Salt Modules Participate Working Groups Event Calendar Other Projects Code of Conduct Calendar GitHub Get Started Media Blog Salt Air Documentation Overview Salt Install Guide Salt User Guide All Salt Modules Participate Working Groups Other Projects Calendar Calendar GitHub Download Welcome to Salt Project Salty Content Scroll through Salt videos to learn more and expand your knowledge of the platform. What is Salt? It's automation, infrastructure management. It's data-driven\norchestration and remote execution. It's configuration management.\nIt's so much more. Understand Salt in 10 minutes. Get Started Learn Salt Get hands on with Salt with nothing to install and step-by-step instructions using the Salt User Guide. Dive into the details with Salt Documentation or Salt Project YouTube Channel. Learn to automate and secure IT with Salt. Salt Workshop Discord Server GitHub Channel Mailing List Security Updates Recent Blogs Open Hour and Q&A 2025-MAR-20 Mar 26, 2025 Open hour notes for March 20th, 2025. In this month's open hour, we talked about the completion of Salt Project CI work, the release of Salt v3006.10 LTS, and more. Read More Salt 3006.10 LTS is available Mar 19, 2025 The Salt Project has just released the 3006.10 LTS bugfix of Salt 3006. Read More POP and Idem Projects Will Soon be Archived Jan 24, 2025 POP and Idem projects have been in maintenance mode since the acquisition of VMware by Broadcom. Now the projects are considered unmaintained, and are lined up to be archived. All projects will remain public, read-only OSS repositories available under the Apache v2 licenses for anyone who would like to maintain their own forks. Read More View All Posts ` Looking for Enterprise-ready Salt? Good news! Salt is now fully integrated into Tanzu Salt. Learn more about how Salt powers VMware\u2019s leading automation platform and how you can harness the power of Salt across the enterprise. Learn More Home Blog Code of Conduct Legal Privacy Policy Your California Privacy Policy \u00a9 2023 VMware, Inc"
  },
  "http://roundup.sourceforge.net/": {
    "url": "http://roundup.sourceforge.net/",
    "content": "Roundup Issue Tracker - Roundup 2.4.0 documentation Skip to main content Roundup Roundup jump to Roundup Issue Tracker Home Release Highlights Roundup Use Cases Try It Out Origin Story Download Docs Issues Contact Wiki Code Prev Next Index Roundup Issue Tracker Download: Build Status: Roundup is an issue-tracking system that boasts a user-friendly\ninterface and easy installation process. It offers a range of\ninterfaces, including command-line, web, REST, XML-RPC, and e-mail,\nmaking it a versatile solution for issue tracking. The system is based\non the award-winning design by Ka-Ping Yee, which emerged victorious\nin the Software Carpentry \u00e2\u0080\u009cTrack\u00e2\u0080\u009d design competition. Roundup is highly customizable, allowing users to tailor the system to\ntheir specific needs and preferences. The latest stable version of Roundup is 2.4.0, which includes bug\nfixes and additional features compared to the previous 2.3.0 release. Roundup is compatible with Python 2.7.12+ or 3.6+. Python 2 Support Python 2 support ends with release 2.4.0 (July 2024).\nSeveral Continuous Integration (CI) services are\ndiscontinuing their resources for testing with Python 2.\nUse Python 3 for the deployment of new trackers.\nExisting trackers should be upgraded to use Python 3. Release Highlights Some improvements from the 2.3.0 release are: three CVE\u00e2\u0080\u0099s have been fixed. One requires changes to your\ntracker\u00e2\u0080\u0099s home directory. The other two are fixed by\ninstalling 2.4.0.  See https://www.roundup-tracker.org/docs/security.html for\ndetails and instructions on how to fix these in 2.4.0 and\nearlier releases. new classhelper component thanks to a team of students\nfrom CS682 at U-Mass Boston. This fixes many issues with\nthe old classhelper. It is implemented as a web-component\nand needs REST interface access. It will fall back to the\nclassic classhelper if REST is not available or if the\nbrowser does not support web-components. fix Windows Python installation using pip. It used to go\ninto an infinite loop during install or download. Also fix\ninstallation of shared files (templates) so roundup-admin\ncan find them. using @current_user as a value in a search URL for a\nuser property will use the current logged in user. Now you\ncan share searches like: \u00e2\u0080\u009cMy issues\u00e2\u0080\u009d as \u00e2\u0080\u009cmy\u00e2\u0080\u009d will become\nthe current logged in user. login failures to the REST/XML-RPC interfaces are now rate\nlimited to limit password guessing attacks. utf8mb4 is the default charset for MySQL. This requires\nmigrating your database using the mysql client. You can\nchoose to keep the older character set in config.ini. PostgreSQL services defined in pg_service.conf can be\nused.  PostgreSQL schemas are supported to eliminate the\nneed for the roundup user to have database\ncreation/deletion privileges. fix out of memory issue when importing larger trackers\ninto PostgreSQL. multiple roundup-admin improvements: display protected\nproperties (like creation date), better formatting of\noutput, command history. Also on windows, pyreadline3 is\nsupported to provide an editable interactive command line. an experimental wsgi performance improvement in 2.3.0 is\nnow now the default and is opt-out. new template functions: utils.readfile and\nutils.expandfile. Javascript that is included in the\nPython core will be moved to external files and be able to\nhave values from Roundup substituted in the Javascript. allow content-type of a template to be set from inside the\ntemplate.  This allows returning json or xml from a\ntemplate without a .json or .xml extention. fix import/export on windows to use Unix style line\nendings fixing export/import on Windows and making exports\nportable across platforms. More info on the 79 changes can be found in the change notes . Roundup Use Cases For more information on Roundup see the features list , design overview , and all the\nother documentation . Roundup has been deployed for: bug tracking and TODO list management (the classic\ninstallation) customer help desk support (with a wizard for the phone\nanswerers, linking to networking, system and development\nissue trackers) issue management for IETF working groups sales lead tracking conference paper submission and double-blind referee\nmanagement weblogging (well, almost :) thing management using the GTD methodology . \u00e2\u0080\u00a6and so on. It\u00e2\u0080\u0099s been designed with flexibility in mind - it\u00e2\u0080\u0099s not merely another bug\ntracker. Try It Out Roundup ships with a demo tracker to play with - you don\u00e2\u0080\u0099t need to\ninstall Roundup. After you\u00e2\u0080\u0099ve unpacked the source, just run \u00e2\u0080\u009c python demo.py \u00e2\u0080\u009d and load up the URL it prints out! Follow the source gratification mode with these steps (change the -2.4.0 version identifier to match your downloaded file). python3 -m pip download roundup tar -xzvf roundup-2.4.0.tar.gz if you don\u00e2\u0080\u0099t have a tar command (e.g windows), use: python - c \"import tarfile, sys; tarfile.open(sys.argv[1]).extractall();\" roundup - 2.4.0 . tar . gz cd roundup-2.4.0 python3 demo.py (The source download can also be used to create a custom Docker\nimage .) Alternatively, you can install using a virtual environment with pip\nby: create a virtual environment with: python3 - m venv roundup activate the environment with (assuming your shell is\nsh/bash/zsh/ksh like): . roundup / bin / activate install the latest release of Roundup with: python3 - m pip install roundup create a demo tracker with: roundup - demo using ./demo as the directory and the classic tracker. load the URL printed by the demo tracker when you are done, use deactivate to return your shell to using\nthe system python. Both of these methods produce the same result. Origin Story Roundup was originally released as version 0.1.1 in late August, 2001.\nThe first change note written said: Needed a bug tracking system. Looked around. Tried to install many Perl-based systems, to no avail.\nGot tired of waiting for Roundup to be released. Had just finished major product project, so needed\nsomething different for a while. Roundup here I come\u00e2\u0080\u00a6 [ page source ] \u00a9 Copyright 2009-2024, Richard Jones, Roundup-Team. Last updated on Jul 13, 2024. Hosted by"
  },
  "https://policies.python.org/python.org/Privacy-Notice/": {
    "url": "https://policies.python.org/python.org/Privacy-Notice/",
    "content": "Privacy Notice - Python Software Foundation Policies Skip to content Python Software Foundation Policies Privacy Notice GitHub Python Software Foundation Policies GitHub PSF Privacy Notice pypi.org pypi.org Terms of Service Acceptable Use Policy Privacy Notice Code of Conduct Superseded Superseded Terms of Use python.org python.org CVE Numbering Authority Contributing Copyright Policy Legal Statements Privacy Notice Privacy Notice Table of contents 1. INFORMATION WE COLLECT 2. USE OF THIRD PARTY SERVICES 3. HOW DO WE USE THE PERSONAL INFORMATION WE COLLECT Code of Conduct Code of Conduct Python Software Foundation Code of Conduct Best practices guide for a Code of Conduct for events Python Software Foundation Code of Conduct Working Group Enforcement Procedures Python Software Foundation Community Member Procedure For Reporting Code of Conduct Incidents Releasing a Good Conference Transparency Report us.pycon.org us.pycon.org Privacy Notice Code of Conduct Code of Conduct PyCon US Code of Conduct PyCon US Code of Conduct Enforcement Procedures PyCon US Procedures for Reporting Code of Conduct Incidents Reference Reference SSDF Request Response Table of contents 1. INFORMATION WE COLLECT 2. USE OF THIRD PARTY SERVICES 3. HOW DO WE USE THE PERSONAL INFORMATION WE COLLECT Python.org Privacy Notice Last updated October 4, 2024 This privacy notice describes what personal information the Python Software Foundation (\u201cPSF\u201d)\ncollects from users,\nwhen and how we share that information,\nand why.\nThis notice is an addendum to the PSF Privacy Notice ,\nwhich also applies to users. 1. INFORMATION WE COLLECT PSF may collect the following information from users: Full name Email addresses Company, firm, organization, agency, or other entity information Biography Any other information relating to you (or other individuals) which you may provide to us 2. USE OF THIRD PARTY SERVICES The PSF uses some third party services to assist with operating online services supporting . Specifically, we use: Amazon Web Services (AWS) to host the PyCon US website. We store your registration information on AWS servers. Their use of this information is subject to the Data Processing Addendum between AWS and PSF and the AWS Privacy Notice (https://aws.amazon.com/privacy/).] Fastly to host the website and services. Your information transits their servers. Their use of this information is subject to the Data Processing Terms between Fastly and PSF and the Fastly Privacy Policy . Sentry to aggregate error information from the website and services. Some personal information may be stored on their servers. Their use of this information is subject to the Data Processing Addendum between Sentry and PSF and the Sentry Privacy Policy . Google Analytics to aggregate traffic analytics. Some personal information may be transited to their servers. Their use of this information is subject to the Google Ads Data Processing Terms between Google and PSF and the Google Privacy Policy . Plausible to aggregate traffic analytics. Some personal information may be stored on ther servers. Their use of this information is subject to the Plausible Analytics Data Processing Agreement between Plausible and PSF asnd the Plausible Privacy Policy . 3. HOW DO WE USE THE PERSONAL INFORMATION WE COLLECT We use the information you provide in the following ways, in addition to the uses described in the PSF Privacy Notice: To provide the website to you To enroll you for Python Software Foundation related mailings (opt-in only) To provide you with information about Python, the Python Software Foundation, and events related to the Python Software Foundation To communicate with you and to respond to your questions, inquiries, or concerns To administer and improve the PSF and , including the websites and other services To prevent and detect fraud To protect and enforce our legal rights October 4, 2024 Made with Material for MkDocs"
  },
  "https://pypi.org/": {
    "url": "https://pypi.org/",
    "content": "PyPI \u00b7 The Python Package Index Skip to main content Switch to mobile version Warning Some features may not work without JavaScript. Please try enabling it if you encounter problems. Help Sponsors Log in Register Menu Help Sponsors Log in Register Find, install and publish Python packages with the Python Package Index Search PyPI Search Or browse projects 621,740 projects 6,770,918 releases 13,808,707 files 920,111 users The Python Package Index (PyPI) is a repository of software for the Python programming language. PyPI helps you find and install software developed and shared by the Python community. Learn about installing packages . Package authors use PyPI to distribute their software. Learn how to package your Python code for PyPI . Help Installing packages Uploading packages User guide Project name retention FAQs About PyPI PyPI Blog Infrastructure dashboard Statistics Logos & trademarks Our sponsors Contributing to PyPI Bugs and feedback Contribute on GitHub Translate PyPI Sponsor PyPI Development credits Using PyPI Terms of Service Report security issue Code of conduct Privacy Notice Acceptable Use Policy Status: all systems operational Developed and maintained by the Python community, for the Python community. Donate today! \"PyPI\", \"Python Package Index\", and the blocks logos are registered trademarks of the Python Software Foundation . \u00a9 2025 Python Software Foundation Site map Switch to desktop version English espa\u00f1ol fran\u00e7ais \u65e5\u672c\u8a9e portugu\u00eas (Brasil) \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Deutsch \u4e2d\u6587 (\u7b80\u4f53) \u4e2d\u6587 (\u7e41\u9ad4) \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u05e2\u05d1\u05e8\u05d9\u05ea Esperanto \ud55c\uad6d\uc5b4 Supported by AWS Cloud computing and Security Sponsor Datadog Monitoring Fastly CDN Google Download Analytics Pingdom Monitoring Sentry Error logging StatusPage Status page"
  },
  "https://wiki.python.org/moin/PythonBooks": {
    "url": "https://wiki.python.org/moin/PythonBooks",
    "content": "PythonBooks - Python Wiki Search: PythonBooks PythonBooks FrontPage RecentChanges FindPage HelpContents PythonBooks Page Immutable Page Comments Info Attachments More Actions: Raw Text Print View Delete Cache ------------------------ Check Spelling Like Pages Local Site Map ------------------------ Rename Page Delete Page ------------------------ ------------------------ Remove Spam Revert to this revision ------------------------ SlideShow User Login There are a variety of books about Python.  Here's a guide to them: IntroductoryBooks (gentle overviews of the language) AdvancedBooks (for when you don't want gentle) ReferenceBooks (much information in a small space) Specific applications: GameProgrammingBooks NetworkProgrammingBooks GuiBooks JythonBooks ScientificProgrammingBooks SystemAdministrationBooks WebProgrammingBooks WindowsBooks XmlBooks ZopeBooks Books in languages other than English: UkrainianPythonBooks DutchPythonBooks FrenchPythonBooks GermanPythonBooks GreekPythonBooks HungarianPythonBooks JapanesePythonBooks KoreanPythonBooks RussianPythonBooks PersianPythonBooks PolishPythonBooks PortuguesePythonBooks ArabicPythonBooks SpanishPythonBooks When you see a book you like, don't hesitate to add your recommendation! There's also a Courses page, filled with links to video courses. External sources of information about (Python) books: PythonBooks.org - A collection of Python books featuring popularity based ranking. Computer-Books.china - A collection of Python books 101+ Free Python Books - You don't have to pay money to read great Python books. Many are free! Python Kindle & Paperback Collection - A good collection of Kindle and Paperback books on Python 3, Django, Flask, FastAPI, and Scientific Computing ( NumPy , SciPy , and Pandas) There is also a list of OutOfPrintBooks . PythonBooks  (last edited 2025-02-05 16:49:41 by TamalChowdhury ) MoinMoin Powered Python Powered GPL licensed Valid HTML 4.01 Unable to edit the page? See the FrontPage for instructions."
  },
  "http://planetpython.org/": {
    "url": "http://planetpython.org/",
    "content": "Planet Python Planet Python Last update: April 01, 2025 07:43 PM UTC April 01, 2025 PyCoder\u00e2\u0080\u0099s Weekly Issue #675: Optimization, DuckDB, Outliers, and More (April 1, 2025) #675 \u00e2\u0080\u0093 APRIL 1, 2025 View in Browser \u00c2\u00bb An April Fool\u2019s free issue. All content was curated before April 1st and is guranteed to be April Fool\u2019s free. Optimizing With Generators, Expressions, & Efficiency Python generators provide an elegant mechanism for handling iteration, particularly for large datasets where traditional approaches may be memory-intensive. Unlike standard functions that compute and return all values at once, generators produce values on demand through the yield statement, enabling efficient memory usage and creating new possibilities for data processing workflows. PYBITES \u00e2\u0080\u00a2 Shared by Bob Belderbos Introducing DuckDB In this showcase tutorial, you\u2019ll be introduced to a library that allows you to use a database in your code. DuckDB provides an efficient relational database that supports many features you may already be familiar with from more traditional relational database systems. REAL PYTHON Quiz: Introducing DuckDB REAL PYTHON Learn AI In 5 Minutes A Day Everyone talks about AI, but no one has the time to learn it. So, we found the simplest way to learn AI as quickly as possible: The Rundown AI. It\u2019s the most trusted AI newsletter, with 1M+ readers and exclusives with AI leaders like Mark Zuckerberg, Demis Hassibis, Mustafa Suleyman, and more \u00e2\u0086\u0092 THE RUNDOWN AI sponsor Outlier Detection With Python Have you ever wondered why certain data points stand out so dramatically? They might hold the key to everything from fraud detection to groundbreaking discoveries. This week Talk Python to Me interviews Brett Kennedy on outlier detection. TALK PYTHON podcast PEP 768: Safe External Debugger Interface for CPython (Accepted) PYTHON.ORG PyCon US 2025 Conference Schedule PYCON.ORG EuroPython July 14th-20th Prague, Tickets Available EUROPYTHON.EU Articles & Tutorials What Can You Do With Python? In this video course, you\u2019ll find a set of guidelines that will help you start applying your Python skills to solve real-world problems. By the end, you\u2019ll be able to answer the question, \u201cWhat can you do with Python?\u201d REAL PYTHON course Python Code Quality: Best Practices and Tools In this tutorial, you\u2019ll learn about code quality and the key factors that make Python code high-quality. You\u2019ll explore effective strategies, powerful tools, and best practices to elevate your code to the next level. REAL PYTHON Optimizing Django by Not Being Silly Although the post is nominally about a tool being used with Django, the root problem being debugged is about handling substrings. Doing it badly can be a real performance bottleneck, learn how to avoid the problem. MAX BERNSTEIN Share Python Scripts Like a Pro Sharing single-file Python scripts with external dependencies is now easy thanks to uv and PEP 723, which enable embedding dependency metadata directly within script files. DAVE JOHNSON \u00e2\u0080\u00a2 Shared by Dave Johnson PEP 781: Make TYPE_CHECKING a Built-in Constant This PEP proposes adding a new built-in variable, TYPE_CHECKING, which is True when the code is being analyzed by a static type checker, and False during normal runtime. PYTHON.ORG Checking User Permissions in Django Templates Not all actions in your web project are for all users. This post shows you how to check what a user\u2019s permissions are from within the HTML template being rendered. TIM KAMANIN Checking Whether Iterables Are Equal in Python \u201cYou can check whether iterables contain the same elements in Python with equality checks, type conversions, sets, Counter, or looping helpers.\u201d TREY HUNNER Understanding Numpy\u2019s einsum Einstein notation lets you evaluate operations on multi-dimensional arrays. NumPy has this built-in. This post shows you how to use it. ELI BENDERSKY Building a Real-Time Dashboard With FastAPI and Svelte Learn how to build a real-time analytics dashboard using FastAPI and Svelte with server-sent events. AMIR TADRISI \u00e2\u0080\u00a2 Shared by Michael Herman Building Accessible Web Forms in Django A step by step reference to building accessible web forms in Django. VALENTINO GAGLIARDI Quiz: Python Code Quality: Best Practices and Tools REAL PYTHON Projects & Code python-docx: Create and Modify Word Documents GITHUB.COM/PYTHON-OPENXML Cirron: Trace System Calls That Python Executes GITHUB.COM/S7NFO pythonx: Python Interpreter Embedded in Elixir GITHUB.COM/LIVEBOOK-DEV docs: Collaborative Note Taking, Wiki and Docs Platform GITHUB.COM/SUITENUMERIQUE py-bugger: Practice Debugging, Intentionally Introduce Bugs GITHUB.COM/EHMATTHES Events Weekly Real Python Office Hours Q&A (Virtual) April 2, 2025 REALPYTHON.COM Canberra Python Meetup April 3, 2025 MEETUP.COM Sydney Python User Group (SyPy) April 3, 2025 SYPY.ORG Python Communities April 5 to April 6, 2025 NOKIDBEHIND.ORG PyDelhi User Group Meetup April 5, 2025 MEETUP.COM Python Conference Austria 2025 April 6 to April 8, 2025 PYCON.ORG Happy Pythoning! This was PyCoder\u2019s Weekly Issue #675. View in Browser \u00c2\u00bb [ Subscribe to \u00f0\u009f\u0090\u008d PyCoder\u2019s Weekly \u00f0\u009f\u0092\u008c \u00e2\u0080\u0093 Get the best Python news, articles, and tutorials delivered to your inbox once a week >> Click here to learn more ] April 01, 2025 07:30 PM UTC Real Python Building a Code Image Generator With Python If you\u2019re active on social media, then you know that images and videos are popular forms of content. As a programmer, you mainly work with text, so sharing the content that you create on a daily basis may not seem intuitive. That\u2019s where a code image generator comes in handy! A code image generator allows you to turn your code snippets into visually appealing images, so you can share your work without worrying about formatting issues, syntax highlighting inconsistencies, or character count limits. In this step-by-step video course, you\u2019ll learn how to: Set up and run a Flask project Connect and style Jinja templates Use Playwright to create images Beautify code with Pygments Leverage sessions to save browser states Enhance the user experience with JavaScript [ Improve Your Python With \u00f0\u009f\u0090\u008d Python Tricks \u00f0\u009f\u0092\u008c \u00e2\u0080\u0093 Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] April 01, 2025 02:00 PM UTC Mike Driscoll Textual \u00e2\u0080\u0093 How to Add Widgets to a Container Textual is an excellent Python package for creating beautiful user interfaces in your terminal. By default, Textual will arrange your widgets starting at the top of the screen and appending them in a vertically oriented stack. Each GUI or TUI toolkit provides a way to lay out your widgets. Textual is no different in this respect. They use an object called a\u00c2 container . You can use containers to create the following types of layouts: Vertical layout Horizontal layout Grid layout and more! You will be learning how to use all three of these types of layouts. You will also learn how to add more widgets at runtime. Let\u2019s get started! Creating a Vertical Layout The default orientation in Textual is to arrange widgets vertically. You don\u2019t even need to use a CSS file to apply this orientation. But what does a vertical layout mean anyway? A vertical layout is when you add widgets to your application vertically, from top to bottom. Here is an illustration of what that might look like: Adding widgets to a Textual application will lay out the widgets similarly to the image above. If you want to see that for yourself, then open up your Python editor and create a new file named `vertical.py`. Then enter the following code into your new script: # vertical.py\n\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Button\n\n\nclass VerticalApp(App):\n\n    def compose(self) -> ComposeResult:\n        yield Button(\"OK\")\n        yield Button(\"Cancel\")\n        yield Button(\"Go!\")\n\n\nif __name__ == \"__main__\":\n    app = VerticalApp()\n    app.run() Now open up a terminal and run your code. When you do so, you will see three buttons onscreen, with the topmost being your \u201cOK\u201d button and the bottom being the \u201cGo!\u201d button. Here is a screenshot of the application to give you an idea of what it looks like: You can change the widget size, color, and more using each widget\u2019s\u00c2 styles \u00c2\u00a0attribute, but using CSS is simpler. Let\u2019s update the code above to use a\u00c2 vertical.tcss \u00c2\u00a0file: # verical_css.py\n\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Button\n\n\nclass VerticalApp(App):\n    CSS_PATH = \"vertical.tcss\"\n\n    def compose(self) -> ComposeResult:\n        yield Button(\"OK\")\n        yield Button(\"Cancel\")\n        yield Button(\"Go!\")\n\n\nif __name__ == \"__main__\":\n    app = VerticalApp()\n    app.run() Now that you are referring to a CSS file, you should go ahead and write one. If you don\u2019t, you will get an error when you attempt to run the code that says the CSS file could not be found. Go ahead and open your favorite text editor or use your Python editor to create a file named `vertical.tcss`. Then enter the following code: Screen {\n    layout: vertical;\n}\n\nButton {\n    width: 100%;\n    color: yellow;\n    background: red;\n} You do not need the\u00c2 Screen \u00c2\u00a0portion of the CSS since that is technically taken care of automatically by Textual. Remember,\u00c2 Screen \u00c2\u00a0is the default widget when you launch an application. However, it is always good to be explicit so you understand what is happening. If you want the output to look exactly like the previous example, you can delete this CSS\u2019s\u00c2 Button \u00c2\u00a0portion and try running the code that way. If you decide to include the\u00c2 Button \u00c2\u00a0portion of the CSS, you will make all of the\u00c2 Button \u00c2\u00a0widgets 100% wide, which means they will all stretch across the entire width of the screen. The CSS also defines the button text to be yellow and the buttons themselves to have a read background color. When you run this code, you will see something like the following: That\u2019s a fun way to change your vertically oriented widget layout. But what happens if you set the height of the\u00c2 Button \u00c2\u00a0widgets to 50%? Well, you have three widgets. Three times 50 will be 150%, which is greater than what can be shown all at once. Textual will add a scrollbar if you add widgets that go off-screen. Try adding that setting to your CSS and re-run the code. You should see something like the following: You should spend a few moments trying out various width and height sizes. Remember, you don\u2019t have to use percentages. You can also use Textual\u2019s other unit types. Note : All style attributes can be adjusted at runtime, which means you can modify the layout at runtime, too. Use this wisely so as not to confuse the user! When you finish experimenting, you will be ready to learn how horizontal layouts work! Horizontal Layout Laying widgets out horizontally, left-to-right, requires a little more work than laying them out vertically. But the change is still pretty minor, and in many ways, it affects only one line in the CSS file. But before you change the CSS, you will want to update your Python code to point to the new CSS file. Open your Python editor and copy the previous example to a new file. Save it with the same\u00c2 horizontal.py \u00c2\u00a0and update the\u00c2 CSS_PATH \u00c2\u00a0to point to a new CSS file named\u00c2 horizontal.tcss : # horizontal.py\n\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Button\n\n\nclass HorizontalApp(App):\n    CSS_PATH = \"horizontal.tcss\"\n\n    def compose(self) -> ComposeResult:\n        yield Button(\"OK\")\n        yield Button(\"Cancel\")\n        yield Button(\"Go!\")\n\n\nif __name__ == \"__main__\":\n    app = HorizontalApp()\n    app.run() Yes, this code is almost the same as the previous example, except the\u00c2 CSS_PATH \u00c2\u00a0variable. That\u2019s okay. The point is to show you how you can change the layout. Create your\u00c2 horizontal.tcss \u00c2\u00a0file in a Python or text editor to make a horizontally oriented layout. Then enter the following CSS: Screen {\n    layout: horizontal;\n}\n\nButton {\n    height: 100%;\n    color: yellow;\n    background: red;\n    border: solid green;\n} The CSS above added a border to the buttons to make them stand out a bit more. Depending on the terminal, the widgets appear to blend together more when arranged horizontally. You can add space around the widgets by setting the\u00c2 margin \u00c2\u00a0style, though. When you run this code, you should see something like the following: When using a horizontal layout, the horizontal scrollbar will not automatically appear if the widgets do not fit the screen. If you want to have a horizontal scrollbar, then you will need to set\u00c2 overflow-x: auto; , like in the following CSS: Screen {\n    layout: horizontal;\n    overflow-x: auto;\n}\n\nButton {\n    height: 100%;\n    color: yellow;\n    background: red;\n    border: solid green;\n} Now, set the widgets\u2019 width to greater than 33% so that the scrollbar will appear. Spend some time experimenting, and you\u2019ll soon figure it out! Layouts with Containers The Textual package has several\u00c2 utility containers \u00c2\u00a0you can use to lay out your widgets. You are most likely to use\u00c2 Vertical ,\u00c2 Horizontal , or\u00c2 Grid \u00c2\u00a0containers. You can also combine the containers to create more complex layouts. Here is a full list of the containers included with Textual at the time of writing: Center Container Horizontal HorizontalScroll Middle ScrollableContainer Vertical VerticalScroll You will most likely use the\u00c2 Center ,\u00c2 Middle ,\u00c2 Horizontal , and\u00c2 Vertical \u00c2\u00a0containers the most. Practicing is the best learning method, especially when laying out user interfaces. You can start your container journey by opening your Python editor and creating a new file called\u00c2 horizontal_container.py . Then enter the following code: # horizontal_container.py\n\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Button\nfrom textual.containers import Horizontal\n\n\nclass HorizontalApp(App):\n\n    def compose(self) -> ComposeResult:\n        yield Horizontal(\n            Button(\"OK\"),\n            Button(\"Cancel\"),\n            Button(\"Go!\"),\n        )\n\n\nif __name__ == \"__main__\":\n    app = HorizontalApp()\n    app.run() You import the\u00c2 Horizontal \u00c2\u00a0container from\u00c2 textual.containers . The main contents of a container is its widgets. You reuse the widgets from the previous example here. Pay attention and note that you do not need to use\u00c2 yield \u00c2\u00a0inside the container. You can simply add the widget instances instead. When you run this code, you will see something like this: What will happen if you use your\u00c2 horizontal.tcss \u00c2\u00a0file with this code? Try adding it to the code above and re-run your example. The result will look familiar: The real benefit using containers comes when you nest them. You\u2019ll find out about that concept next! Nesting Containers Nesting containers allows you to combine horizontally and vertically oriented widgets, resulting in rows and columns of widgets. This design pattern can create some pretty nice layouts. To start, create a new file called\u00c2 nested_containers.py \u00c2\u00a0in your Python editor. Then add this code to it: # nested_containers.py\n\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Button\nfrom textual.containers import Horizontal, Vertical\n\n\nclass NestedApp(App):\n\n    def compose(self) -> ComposeResult:\n        yield Vertical(\n            Horizontal(\n                Button(\"One\"),\n                Button(\"Two\"),\n                classes=\"row\",\n            ),\n            Horizontal(\n                Button(\"Three\"),\n                Button(\"Four\"),\n                classes=\"row\",\n            ),\n        )\n\n\nif __name__ == \"__main__\":\n    app = NestedApp()\n    app.run() Your code above has a single\u00c2 Vertical \u00c2\u00a0container with two\u00c2 Horizontal \u00c2\u00a0containers inside. You can think of the\u00c2 Horizontal \u00c2\u00a0containers as \u201crows\u201d. You can see that you set the\u00c2 classes \u00c2\u00a0parameters to \u201crow\u201d to identify them. Each row contains two\u00c2 Button \u00c2\u00a0widgets. When you run this code, you will see something like this: This example doesn\u2019t use any CSS. You should do that! Update the code to include a CSS file called\u00c2 nested.tcss , like the code below: # nested_containers.py\n\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Button\nfrom textual.containers import Horizontal, Vertical\n\n\nclass NestedApp(App):\n    CSS_PATH = \"nested.tcss\"\n\n    def compose(self) -> ComposeResult:\n        yield Vertical(\n            Horizontal(\n                Button(\"One\"),\n                Button(\"Two\"),\n                classes=\"row\",\n            ),\n            Horizontal(\n                Button(\"Three\"),\n                Button(\"Four\"),\n                classes=\"row\",\n            ),\n        )\n\n\nif __name__ == \"__main__\":\n    app = NestedApp()\n    app.run() Then, create the\u00c2 nested.tcss \u00c2\u00a0file. You will be putting the following CSS rules into it: Button {\n    content-align: center middle;\n    background: green;\n    border: yellow;\n    height: 1fr;\n    width: 1fr;\n} Here, you set various rules for the\u00c2 Button \u00c2\u00a0widgets to follow. You want the buttons to be green with a yellow border. You also set the width and height to\u00c2 1fr , which causes the buttons to expand to fit all the horizontal and vertical space. When you run this version of your code, you can see that the user interface has changed significantly: Nice! You should spend some time adjusting the style rules and seeing how to change these layouts. Wrapping Up Learning how to create layouts is a fundamental skill that you will need to master to be able to create engaging, intuitive user interfaces. Fortunately, Textual gives you enough tools that you can create your user interfaces fairly easily. No; you don\u2019t get a What-you-see-is-what-you-get (WYSIWYG) tool as you do with some GUI toolkits, such as QT Creator. But you do get live-coding with CSS, and since most of your user interface layouts are controlled there, tweaking the user interface is so nicer. Want to Learn More Textual? This tutorial is based on a chapter from my latest book, Creating TUI Applications with Textual and Python . You will learn everything you need to know about Textual from this book. You will also create TEN small applications to apply what you learn. Check it out today! The post Textual \u2013 How to Add Widgets to a Container appeared first on Mouse Vs Python . April 01, 2025 01:44 PM UTC Zero to Mastery [March 2025] Python Monthly Newsletter \u00f0\u009f\u0090\u008d 64th issue of Andrei Neagoie's must-read monthly Python Newsletter: Django Got Forked, The Science of Troubleshooting, Python 3.13 TLDR, and much more. Read the full newsletter to get up-to-date with everything you need to know from last month. April 01, 2025 10:00 AM UTC eGenix.com Python Meeting D\u00c3\u00bcsseldorf - 2025-04-09 The following text is in German, since we're announcing a regional user group meeting in D\u00c3\u00bcsseldorf, Germany. Ank\u00c3\u00bcndigung Das n\u00c3\u00a4chste Python Meeting D\u00c3\u00bcsseldorf findet an folgendem Termin statt: 09.04.2025, 18:00 Uhr Raum 1, 2.OG im B\u00c3\u00bcrgerhaus Stadtteilzentrum Bilk D\u00c3\u00bcsseldorfer Arcaden , Bachstr. 145, 40217 D\u00c3\u00bcsseldorf Programm Bereits angemeldete Vortr\u00c3\u00a4ge Fabian Prei\u00c3\u009f: How Not to Use Python Match Cases Ulf Morys: n8n - Erster Einblick in low code workflow automation... mit und ohne Python Johannes Dr\u00c3\u00b6ge: Distributed, Data-driven Applications with Python and ZebraStream Weitere Vortr\u00c3\u00a4ge k\u00c3\u00b6nnen gerne noch angemeldet werden. Bei Interesse, bitte unter info@pyddf.de melden. Startzeit und Ort Wir treffen uns um 18:00 Uhr im B\u00c3\u00bcrgerhaus in den \nD\u00c3\u00bcsseldorfer Arcaden. Das B\u00c3\u00bcrgerhaus teilt sich den Eingang mit dem Schwimmbad und befindet \nsich an der Seite der Tiefgarageneinfahrt der D\u00c3\u00bcsseldorfer Arcaden. \u00c3\u009cber dem Eingang steht ein gro\u00c3\u009fes \"Schwimm\u00e2\u0080\u0099 in Bilk\" Logo. Hinter der T\u00c3\u00bcr\n direkt links zu den zwei Aufz\u00c3\u00bcgen, dann in den 2. Stock hochfahren. Der\n Eingang zum Raum 1 liegt direkt links, wenn man aus dem Aufzug kommt. >>> Eingang in Google Street View \u00e2\u009a\u00a0\u00ef\u00b8\u008f Wichtig : Bitte nur dann anmelden, wenn ihr absolut \nsicher seid, dass ihr auch kommt. Angesichts der begrenzten Anzahl Pl\u00c3\u00a4tze, haben\n wir kein Verst\u00c3\u00a4ndnis f\u00c3\u00bcr kurzfristige Absagen oder No-Shows. Einleitung Das Python Meeting D\u00c3\u00bcsseldorf ist eine regelm\u00c3\u00a4\u00c3\u009fige Veranstaltung in D\u00c3\u00bcsseldorf, die sich an Python Begeisterte aus der Region wendet. Einen guten \u00c3\u009cberblick \u00c3\u00bcber die Vortr\u00c3\u00a4ge bietet unser PyDDF YouTube-Kanal , auf dem wir Videos der Vortr\u00c3\u00a4ge nach den Meetings ver\u00c3\u00b6ffentlichen. Veranstaltet wird das Meeting von der eGenix.com GmbH , Langenfeld, in Zusammenarbeit mit Clark Consulting & Research , D\u00c3\u00bcsseldorf: Format Das Python Meeting D\u00c3\u00bcsseldorf nutzt eine Mischung aus (Lightning) Talks und offener Diskussion. Vortr\u00c3\u00a4ge k\u00c3\u00b6nnen vorher angemeldet werden, oder auch spontan \nw\u00c3\u00a4hrend des Treffens eingebracht werden. Ein Beamer mit HDMI und FullHD Aufl\u00c3\u00b6sung \nsteht zur Verf\u00c3\u00bcgung. (Lightning) Talk Anmeldung bitte formlos per EMail an info@pyddf.de Kostenbeteiligung Das Python Meeting D\u00c3\u00bcsseldorf wird von Python Nutzern f\u00c3\u00bcr Python Nutzer veranstaltet. Da Tagungsraum, Beamer, Internet und Getr\u00c3\u00a4nke Kosten produzieren, \nbitten wir die Teilnehmer um einen Beitrag in H\u00c3\u00b6he von EUR 10,00 inkl. \n19% Mwst. Sch\u00c3\u00bcler und Studenten zahlen EUR 5,00 inkl. \n19% Mwst. Wir m\u00c3\u00b6chten alle Teilnehmer bitten, den Betrag in bar mitzubringen. Anmeldung Da wir nur 25 Personen in dem angemieteten Raum empfangen k\u00c3\u00b6nnen, m\u00c3\u00b6chten wir bitten, sich vorher anzumelden. Meeting Anmeldung bitte per Meetup Weitere Informationen Weitere Informationen finden Sie auf der Webseite des Meetings: https://pyddf.de/ Viel Spa\u00c3\u009f ! Marc-Andre Lemburg, eGenix.com April 01, 2025 08:00 AM UTC Tryton News Newsletter April 2025 Last month we focused on fixing bugs, improving the behaviour of things, speeding-up performance issues - building on the changes from our last release . We also added some new features which we would like to introduce to you in this newsletter. For an in depth overview of the Tryton issues please take a look at our issue tracker or see the issues and merge requests filtered by label . Changes for the User CRM, Sales, Purchases and Projects Now we notify the user when trying to add a duplicate contact mechanism . Add quotation validity date on sale and purchase quotations. O n sale we compute the validity date when it goes to state quotation and display the validity date in the report. O n purchase we set the date directly. It is a common practice among other things to answer a complain by giving a promotion coupon to the customer. Now the user can create a coupon from the sale complain as an action. We now use the actual quantity of a sale line when executing a sale complaint, when the product is already selected. Now we add an relate to open all products of sales , to be able to check all the sold products (for quantity or price). We simplify the coupon number management and added a menu entry for promotion coupon numbers . Now we display a coupon form on promotions and we remove the name field on promotion coupons . Accounting, Invoicing and Payments Now we allow to download all pending SEPA messages in a single message report. We now replace the maturity date on account move by a combined payable/receivable date field which contains a given maturity date and if it is empty, falls back to the effective date . This provides a better chronology of the move lines. O n account move we now replace the post_number by the number -field . The original functionality of the number field, - delivering a sequential number for account moves in draft state, - is replaced by the account move id. We now add some common payment terms : Upon Receipt Net 10, 15, 30, 60 days Net 30, 60 days End of Month End of Month End of Month Following Now we display an optional company -field on the payment and group list . We now add tax identifiers to the company . A company may have two tax identifiers, one used for transactions inland and another used abroad. Now it is possible to select the company tax identifier based on rules. Now we make the deposit -field optional on party list view. We now use the statement date to compute the start balance instead of always using the last end balance. Now we make entries in analytic accounting read-only depending on their origin state . We now allow to delete landed costs only if they are cancelled . Now we add the company field optionally to the SEPA mandate list . Stock, Production and Shipments We now add the concept of product place also to the inventory line , because some users may want to see the place when doing inventory so they know where to count the products exactly. Now we display the available quantity when searching in a stock move and if the product is already selected: for a lot for a location for a product We now ship packages of internal shipments with transit . Now we do no longer force to fill an incoterm when shipping inside Europe. User Interface In the web client now we scroll to the first selected element in the tree view , when switching from form view. Now we add a color widget to the form view . Also we now add an icon of type color , to display the color visually in a tree view. We extend the image type to add color which just displays an image filled with color . Now we deactivate the open -button of the One2Many widget , if there is no form view. In the desktop client we now include the version number on the new version available message. System Data and Configuration In the web user form we now use the same structure as in user form . Now we make the product attribute names unique . Because the name of the attributes are used as keys of a fields.Dict . We now add the Yapese currency Rai . Now we order the incoming documents by their descending ID , with the most recent documents on top. New Documentation Now we add an example of a payment term with multiple deltas . We now reworked the web_sh\u00e2\u0080\u008eop_shopify module documentation . New Releases We released bug fixes for the currently maintained long term support series 7.0 and 6.0 , and for the penultimate series 7.4 and 7.2 . Changes for Implementers and Developers Now we raise UserErrors from the database exceptions , to log more information on data and integrity errors. In the desktop client we now remove the usage of GenericTreeModel , the last remaining part of pygtkcompat in Tryton. We now make it easy to extend the Sendcloud sender address with a pattern . Now we set a default value for all fields of a wizard state view . If the client does not display a field of a state view, the value of this field on the instance record is not a defined attribute. So we need to access it using getattr with a default value, but in theory this can happen for any state in any record as user can extend any view. We now store the last version series to which the database was updated in ir.configuration . With this information, the list of databases is filtered to the same client series.  The remote access to a database is restricted to databases available in the list. We now also return the series instead of the version for remote call . Authors: @dave @pokoli @udono spoiler 1 post - 1 participant Read full topic April 01, 2025 06:00 AM UTC Wingware Wing Python IDE 11 Early Access - March 27, 2025 Wing 11 is now available as an early access release, with improved AI assisted development,\nsupport for the uv package manager, improved Python code analysis, improved custom key\nbinding assignment user interface, improved diff/merge, a new preference to auto-save files\nwhen Wing loses the application focus, updated German, French and Russian localizations (partly\nusing AI), a new experimental AI-driven Spanish localization, and other bug fixes and minor\nimprovements. You can participate in the early access program simply by downloading the early access\nreleases. We ask only that you keep your feedback and bug reports private by submitting them\nthrough Wing's Help menu or by emailing us at support@wingware.com . Downloads IMPORTANT Be sure to Check for Updates from Wing's Help menu after installing\nso that you have the latest hot fixes. Wing Pro 11.0.0.1 Wing Personal 11.0.0.1 Wing 101 11.0.0.1 Wing 10 and earlier versions are not affected by installation of Wing 11 and\nmay be installed and used independently. However, project files for Wing 10\nand earlier are converted when opened by Wing 11 and should be saved under a\nnew name, since Wing 11 projects cannot be opened by older versions of Wing. New in Wing 11 Improved AI Assisted Development Wing 11 improves the user interface for AI assisted development by introducing two separate\ntools AI Coder and AI Chat . AI Coder can be used to write, redesign, or extend code\nin the current editor. AI Chat can be used to ask about code or iterate in creating a\ndesign or new code without directly modifying the code in an editor. This release also improves setting up AI request context, so that both automatically and\nmanually selected and described context items may be paired with an AI request. AI request\ncontexts can now be stored, optionally so they are shared by all projects, and may be used\nindependently with different AI features. AI requests can now also be stored in the current project or shared with all projects, and Wing\ncomes preconfigured with a set of commonly used requests. In addition to changing code in the\ncurrent editor, stored requests may create a new untitled file or run instead in AI Chat. Wing\n11 also introduces options for changing code within an editor, including replacing code,\ncommenting out code, or starting a diff/merge session to either accept or reject changes. Wing 11 also supports using AI to generate commit messages based on the changes being committed\nto a revision control system. You can now also configure multiple AI providers for easier access to different models.\nHowever, as of this release, OpenAI is still the only supported AI provider and you will still\nneed a paid OpenAI account and API key. We recommend paying for Tier 2 or better rate\nlimits. For details see AI Assisted Development under Wing Manual in Wing 11's Help menu. Package Management with uv Wing Pro 11 adds support for the uv package manager in the New Project dialog and the\nPackages tool. For details see Project Manager > Creating Projects > Creating Python Environments and Package Manager > Package Management with uv under Wing Manual in Wing 11's Help menu. Improved Python Code Analysis Wing 11 improves code analysis of literals such as dicts and sets, parametrized type\naliases, typing.Self, type variables on the def or class line that declares them, generic\nclasses with [...], and __all__ in *.pyi files. Updated Localizations Wing 11 updates the German, French, and Russian localizations, and introduces a new experimental\nAI-generated Spanish localization. The Spanish localization and the new AI-generated strings in the\nFrench and Russian localizations may be accessed with the new User Interface > Include AI Translated Strings preference. Improved diff/merge Wing Pro 11 adds floating buttons directly between the editors to make navigating differences\nand merging easier, allows undoing previously merged changes, and does a better job managing\nscratch buffers, scroll locking, and sizing of merged ranges. For details see Difference and Merge under Wing Manual in Wing 11's Help menu. Other Minor Features and Improvements Wing 11 also improves the custom key binding assignment user interface, adds a Files >\nAuto-Save Files When Wing Loses Focus preference, warns immediately when opening a project with\nan invalid Python Executable configuration, allows clearing recent menus, expands the set of\navailable special environment variables for project configuration, and makes a number of other\nbug fixes and usability improvements. Changes and Incompatibilities Since Wing 11 replaced the AI tool with AI Coder and AI Chat , and AI configuration is\ncompletely different than in Wing 10, so you will need to reconfigure your AI integration manually\nin Wing 11.  This is done with Manage AI Providers in the AI menu or the Options menu\nin either AI tool.  After adding the first provider configuration, Wing will set that provider\nas the default. If you have questions about any of this, please don't hesitate to contact us at support@wingware.com . April 01, 2025 01:00 AM UTC Glyph Lefkowitz A Bigger Database A Database File When I was 10 years old, and going through a fairly difficult time, I was lucky\nenough to come into the possession of a piece of software called Claris\nFileMaker Pro\u00e2\u0084\u00a2. FileMaker allowed its users to construct arbitrary databases, and to associate\ntheir tables with a customized visual presentation.  FileMaker also had a\nrudimentary scripting language, which would allow users to imbue these\ndatabases with behavior. As a mentally ill pre-teen, lacking a sense of control over anything or anyone\nin my own life, including myself, I began building a personalized database to\ncatalogue the various objects and people in my immediate vicinity.  If one were\ninclined to be generous, one might assess this behavior and say I was\nsystematically taxonomizing the objects in my life and recording schematized\ninformation about them. As I saw it at the time, if I collected the information, I could always use it\nlater, to answer questions that I might have.  If I didn\u00e2\u0080\u0099t collect it, then\nwhat if I needed it?  Surely I would regret it!  Thus I developed a categorical\nimperative to spend as much of my time as possible collecting and entering data\nabout everything that I could reasonably arrange into a common schema. Having thus summoned this specter of regret for all lost data-entry\nopportunities, it was hard to dismiss.  We might label it \u00e2\u0080\u009cClaris\u00e2\u0080\u0099s Basilisk\u00e2\u0080\u009d,\nfor obvious reasons. Therefore, a less-generous (or more clinically-minded) observer might have\nreplaced the word \u00e2\u0080\u009csystematically\u00e2\u0080\u009d with \u00e2\u0080\u009cobsessively\u00e2\u0080\u009d in the assessment above. I also began writing what scripts were within my marginal programming abilities\nat the time, just because I could: things like computing the sum of every\nstreet number of every person in my address book.  Why was this useful?  Wrong\nquestion: the right question is \u00e2\u0080\u009cwas it possible \u00e2\u0080\u009d to which my answer was\n\u00e2\u0080\u009cyes\u00e2\u0080\u009d. If I was obliged to collect all the information which I could observe \u00e2\u0080\u0094 in case\nit later became interesting \u00e2\u0080\u0094 I was similarly obliged to write and run every\nprogram I could.  It might, after all, emit some other interesting\ninformation. I was an avid reader of science fiction as well. I had this vague sense that computers could kind of think.  This resulted in a\nchain of reasoning that went something like this: human brains are kinda like computers, the software running in the human brain is very complex, I could only write simple computer programs, but , when you really think about it, a \u00e2\u0080\u009ccomplex\u00e2\u0080\u009d program is just a collection of\n   simpler programs Therefore: if I just kept collecting data, collecting smaller programs that\ncould solve specific problems, and connecting them all together in one big\nfile, eventually the database as a whole would become self-aware and could\nsolve whatever problem I wanted.  I just needed to be patient; to \u00e2\u0080\u009ckeep\ngrinding\u00e2\u0080\u009d as the kids would put it today. I still feel like this is an understandable way to think \u00e2\u0080\u0094 if you are a\nhighly depressed and anxious 10-year-old in 1990. Anyway. 35 Years Later OpenAI is a company that produces transformer architecture machine learning\ngenerative AI models; their current generation was trained on about 10 trillion\nwords, obtained in a variety of different ways from a large\nvariety of different, unrelated sources. A few days ago, on March 26, 2025 at 8:41 AM Pacific Time, Sam Altman took to\n\u00e2\u0080\u009cX\u00e2\u0084\u00a2, The Everything App\u00e2\u0084\u00a2,\u00e2\u0080\u009d and described the trajectory of his career of the\nlast decade at OpenAI as, and I quote, a \u00e2\u0080\u009c grind for a decade trying to help\nmake super-intelligence to cure cancer or\nwhatever \u00e2\u0080\u009d (emphasis mine). I really, really don\u00e2\u0080\u0099t want to become a full-time AI\nskeptic , and I am not an expert here,\nbut I feel like I can identify a logically flawed premise when I see one. This is not a system-design strategy.  It is a trauma response. You can\u00e2\u0080\u0099t cure cancer \u00e2\u0080\u009cor whatever\u00e2\u0080\u009d. If you want to build a computer system\nthat does some thing, you actually need to hire experts in that thing , and\nhave them work to both design and validate that the system is fit for the\npurpose of that thing. Aside: But... are they, though? I am not an oncologist; I do not particularly want to be writing about the specifics here, but, if I am going to make a claim like \u00e2\u0080\u009cyou can\u00e2\u0080\u0099t cure\ncancer this way\u00e2\u0080\u009d I need to back it up. My first argument \u00e2\u0080\u0094 and possibly my strongest \u00e2\u0080\u0094 is that cancer is not cured. QED. But I guess, to Sam\u00e2\u0080\u0099s credit, there is at least one other company partnering with\nOpenAI to do things that are specifically related to cancer. However, that company\nis still in a self-described \u00e2\u0080\u009cinitial phase\u00e2\u0080\u009d and it\u00e2\u0080\u0099s not entirely\nclear that it is going to work out very well. Almost everything I can find about it online was from a PR push in the middle\nof last year, so it all reads like a press release.  I can\u00e2\u0080\u0099t easily find any\nindependently-verified information. A lot of AI hype is like this .  A\npromising demo is delivered; claims are made that surely if the technology can\nsolve this small part of the problem now, within 5\nyears surely it will be able to solve everything else as well! But even the light-on-content puff-pieces tend to hedge quite a lot.  For\nexample, as the Wall Street Journal quoted one of the users initially testing\nit (emphasis mine): The most promising use of AI in healthcare right now is automating\n\u00e2\u0080\u009cmundane\u00e2\u0080\u009d tasks like paperwork and physician note-taking , he said. The\ntendency for AI models to \u00e2\u0080\u009challucinate\u00e2\u0080\u009d and contain bias presents serious\nrisks for using AI to replace doctors. Both Color\u00e2\u0080\u0099s Laraki and OpenAI\u00e2\u0080\u0099s\nLightcap are adamant that doctors be involved in any clinical decisions. I would probably not personally characterize \u00e2\u0080\u009c\u00e2\u0080\u0098mundane\u00e2\u0080\u0099 tasks like paperwork\nand \u00e2\u0080\u00a6 note-taking\u00e2\u0080\u009d as \u00e2\u0080\u009ccuring cancer\u00e2\u0080\u009d.  Maybe an oncologist could use some\ncode I developed too; even if it helped them, I\nwouldn\u00e2\u0080\u0099t be stealing valor from them on the curing-cancer part of their job. Even fully giving it the benefit of the doubt that it works great, and improves\npatient outcomes significantly, this is medical back-office software. It is not\nsuper-intelligence. It would not even matter if it were \u00e2\u0080\u009csuper-intelligence\u00e2\u0080\u009d, whatever that\nmeans, because \u00e2\u0080\u009cintelligence\u00e2\u0080\u009d is not how you do medical\ncare or medical research.  It\u00e2\u0080\u0099s called \u00e2\u0080\u009clab work\u00e2\u0080\u009d not \u00e2\u0080\u009clab think\u00e2\u0080\u009d. To put a fine point on it: biomedical research fundamentally cannot be done\nentirely by reading papers or processing existing information.  It cannot even\nbe done by testing drugs in computer simulations. Biological systems are enormously complex, and medical research on new\ntherapies inherently requires careful, repeated empirical testing to validate\nthe correspondence of existing research with reality.  Not \u00e2\u0080\u009can experiment\u00e2\u0080\u009d, but\na series of coordinated experiments that all test the same theoretical model.\nThe data (which, in an LLM context, is \u00e2\u0080\u009ctraining data\u00e2\u0080\u009d) might just be wrong ;\nit may not reflect reality, and the only way to tell is to continuously verify\nit against reality. Previous observations can be tainted by methodological errors, by data fraud,\nand by operational mistakes by practitioners.  If there were a way to do\nverifiable development of new disease therapies without the extremely expensive\nladder going from cell cultures to animal models to human trials, we would\nalready be doing it , and \u00e2\u0080\u009cAI\u00e2\u0080\u009d would just be an improvement to efficiency of\nthat process.  But there is no way to do that and nothing about the\ntechnologies involved in LLMs is going to change that fact. Knowing Things The practice of science \u00e2\u0080\u0094 indeed any practice of the collection of meaningful information \u00e2\u0080\u0094 must be done by intentionally and carefully selecting inclusion\ncriteria, methodically and repeatedly curating our data, building a model that\noperates according to rules we understand and can verify , and verifying the\ndata itself with repeated tests against nature.  We cannot just hoover up\nwhatever information happens to be conveniently available with no human\nintervention and hope it resolves to a correct model of reality by accident.\nWe need to look where the keys are, not where the light\nis . Piling up more and more information in a haphazard and increasingly precarious\npile will not allow us to climb to the top of that pile, all the way to heaven,\nso that we can attack and dethrone God. Eventually, we\u00e2\u0080\u0099ll just run out of disk space, and then lose the database file\nwhen the family gets a new computer anyway. Acknowledgments Thank you to my patrons who are supporting my writing on\nthis blog.  Special thanks also to Ben Chatterton for a brief pre-publication\nreview; any errors remain my own.  If you like what you\u00e2\u0080\u0099ve read here and you\u00e2\u0080\u0099d\nlike to read more of it, or you\u00e2\u0080\u0099d like to support my various open-source\nendeavors , you can support my work as a\nsponsor !  Special thanks also to Itamar Turner-Trauring\nand Thomas Grainger for pre-publication feedback on this article; any errors of\ncourse remain my own. April 01, 2025 12:47 AM UTC March 31, 2025 Ari Lamstein censusdis v1.4.0 is now on PyPI I recently contributed a new module to the censusdis package. This resulted in a new version of the package being pushed to PyPI. You can install it like this: $ pip install censusdis -U\n\n#Verify that the installed version is 1.4.0 \n$ pip freeze | grep censusdis \ncensusdis==1.4.0 The module I created is called multiyear . It is very similar to the utils module I created for my hometown_analysis project. This notebook demonstrates how to use the module. You can view the PR for the module here . This PR caused me to grow as a Python programmer. Since many of my readers are looking to improve their technical skills, I thought to write down some of my lessons learned. Python Files, Modules vs. Packages The vocabulary around files, modules and packages in Python is confusing. This PR is when the terms finally clicked: A module \u00c2\u00a0is just a normal file with Python code ( really ). I am not sure why Python invented a new word for this. My best guess is to acknowledge that you can selectively import symbols from a module. This is different than C++ (the first language I programmed in professionally), where #include <file> imports all of the target file. A package is just a directory that contains Python modules. The best practice appears to be putting a file named __init__.py in the directory to denote that it\u2019s a package. A lthough the file can be empty and is not strictly necessary ( link ). This also seems like an odd design decision. One nice thing about this system is that it allows a package to span multiple (sub)directories. In R, all the code for a package must be in a single directory. I always felt that this limited the complexity of packages in R. It\u2019s nice that Python doesn\u2019t have that limitation. Dependency Management Python programmers like to talk about \u201cdependency management hell.\u201d This project gave me my first taste of that. The initial version of the multiyear module used plotly to make the output of graph_multiyear interactive. I used it to do exploratory data analysis in Jupyter notebooks. However, when I tried to share those notebooks via github the images didn\u2019t render: apparently Jupyter notebooks in github cannot render Javascript. The solution I stumbled upon is described here and requires the kaleido package. The issue? Apparently this solution works with kaleido v0.2.0, but not the latest version of kaleido ( link ). So anyone who wants this functionality will need to install a specific version of kaleido. In Python this is known as \u201cpinning\u201d a dependency. Technically, I believe you can do this by modifying the project\u2019s pyproject.toml file by hand. But in practice people use tools like uv or poetry to both manage this file and create a \u201clockfile\u201d which states the exact version of all packages you\u2019re using. In this project I got experience doing this with both uv (which I used for my hometown_analysis repo) and poetry (which censusdis uses). Linting At my last job I advocated for having all the data scientists use a Style Guide. At that company we used R, and people were ok giving up some issues of personal taste in order to make collaboration easier. The process of enforcing adherence to a style guide (or running automated checks on code to detect errors) is called \u201clinting\u201d, and it\u2019s a step we did not take. In my hometown_analysis repo I regularly used black for this. It appears that black is the most widely used code formatter in the Python world. It was my first time using it on a project, and I simply ran it myself prior to checking in code. The Censusdis repo takes this a step further: In addition to running black, it recommends contributors also run flake8 and ruff on their code prior to making a PR. For better or for worse, Python seems to have a lot of tools that do linting. There appears to be some overlap in what they all do, and I can\u2019t speak to the unique differences between them. One thing that surprised me is that at least one of them was particular about the format in which I wrote documentation for my functions. It automatically runs all of these tools on each PR using Github Actions ( link ). If any of the linter tools detects an issue it causes the PR to fail the automated test suite. Automated Tests Speaking of tests: I did not feel the need to write them for my utils module for the hometown_analysis project. But censusdis uses pytest and has 99% test coverage ( link ). So it seemed appropriate to add tests to the multiyear module. Writing tests is something that I\u2019ve done occasionally throughout my career. Pytest was covered in Matt Harrison\u2019s Professional Python course that I took last year, but I found that I forgot a lot of the material. So I did what most engineers would do: I looked at examples in the codebase and used an LLM to help me. Type Annotations I have mixed feelings about Python\u2019s use of Type Annotations . I began my software engineering career using C++, which is a statically typed language. Every variable in a C++ program must have a type defined at compile time (i.e. before the program executes). Python does not have this requirement, which I initially found freeing. Type annotations, I find, remove a lot of this freedom and also make the code a bit harder to read. That being said, the censusdis package uses them throughout the codebase, so I added them to my module. In Professional Python I was taught to run mypy to type check my type annotations. While I believe that my code passed without error, I noticed that the project had a few errors that were not covered in my course. For example: cli/cli.py:9: error: Skipping analyzing \"geopandas\": module is installed, but missing library stubs or py.typed marker It appears that type annotations become more complex when your code uses types defined by third-party libraries (such as Pandas and, in this case, GeoPandas). I researched these errors briefly and created a github issue for them. Code Review A major source of learning comes when someone more experienced than you reviews your code. This was one of the main reasons I chose to do this project: Darren (the maintainer of censusdis) is much more experienced than me at building Python packages, and I was interested in his feedback on my module. Interestingly, his initial feedback was that it would be better if the graph_multiyear function used matplotlib instead of plotly . Not because matplotlib is better than plotly, but because other parts of censusdis already use matplotlib. And there\u2019s value in a package having consistency in terms of which visualization package it uses. This made sense to me, although I do miss the interactive plots that plotly provided! Conclusion The book Software Engineering at Google defines software engineering as \u00e2\u0080\u009cprogramming integrated over time.\u00e2\u0080\u009d The idea is that when code is written for a small project, software engineering best practices aren\u2019t that important. But when code is used over a long period of time, they become essential. This idea stayed with me throughout this project. The first time I did a multi-year analysis of ACS data was for my Covid Demographics Explorer , which I completed last June. I considered the project a one-off. I wrote a single script to download the data and an app to visualize it. For my hometown_analysis project I wanted to do exploratory data analysis of several variables over time. So I wrote a handful of functions to download and visualize multi-year ACS data. I put all the code in a single module and pinned the dependencies. I wrote docstrings for all the functions. I reasoned that if I ever want to do a similar analysis in the future then I could reuse the code. When I wanted to make it easier for others to use the code I added it to an existing package. That required being more rigorous about coding style, adding automated tests and type annotations. It also required me to make design decisions that are best for the overall package, even when they conflict with design decisions I made when working on the module independently. My impression is that a lot of Python programmers (especially data scientists) have never contributed their code to an existing package. If you are given the opportunity, then I recommend giving it a shot. I found that it helped me grow as a Python programmer. While I have disabled comments on my blog, I welcome hearing from reader. Use this form to contact me. March 31, 2025 04:00 PM UTC Real Python Python's Bytearray: A Mutable Sequence of Bytes Python\u00e2\u0080\u0099s bytearray is a mutable sequence of bytes that allows you to manipulate binary data efficiently. Unlike immutable bytes , bytearray can be modified in place, making it suitable for tasks requiring frequent updates to byte sequences. You can create a bytearray using the bytearray() constructor with various arguments or from a string of hexadecimal digits using .fromhex() . This tutorial explores creating, modifying, and using bytearray objects in Python. By the end of this tutorial, you\u00e2\u0080\u0099ll understand that: A bytearray in Python is a mutable sequence of bytes that allows in-place modifications, unlike the immutable bytes . You create a bytearray by using the bytearray() constructor with a non-negative integer, iterable of integers, bytes-like object, or a string with specified encoding. You can modify a bytearray in Python by appending, slicing, or changing individual bytes, thanks to its mutable nature. Common uses for bytearray include processing large binary files, working with network protocols, and tasks needing frequent updates to byte sequences. You\u00e2\u0080\u0099ll dive deeper into each aspect of bytearray , exploring its creation, manipulation, and practical applications in Python programming. Get Your Code: Click here to download the free sample code that you\u00e2\u0080\u0099ll use to learn about Python\u00e2\u0080\u0099s bytearray data type. Take the Quiz: Test your knowledge with our interactive \u00e2\u0080\u009cPython's Bytearray\u00e2\u0080\u009d quiz. You\u00e2\u0080\u0099ll receive a score upon completion to help you track your learning progress: Interactive Quiz Python's Bytearray In this quiz, you'll test your understanding of Python's bytearray data type. By working through this quiz, you'll revisit the key concepts and uses of bytearray in Python. Understanding Python\u00e2\u0080\u0099s bytearray Type Although Python remains a high-level programming language, it exposes a few specialized data types that let you manipulate binary data directly should you ever need to. These data types can be useful for tasks such as processing custom binary file formats, or working with low-level network protocols requiring precise control over the data. The three closely related binary sequence types built into the language are: bytes bytearray memoryview While they\u00e2\u0080\u0099re all Python sequences optimized for performance when dealing with binary data, they each have slightly different strengths and use cases. Note: You\u00e2\u0080\u0099ll take a deep dive into Python\u00e2\u0080\u0099s bytearray in this tutorial. But, if you\u00e2\u0080\u0099d like to learn more about the companion bytes data type, then check out Bytes Objects: Handling Binary Data in Python , which also covers binary data fundamentals. As both names suggest, bytes and bytearray are sequences of individual byte values, letting you process binary data at the byte level . For example, you may use them to work with plain text data, which typically represents characters as unique byte values, depending on the given character encoding . Python natively interprets bytes as 8-bit unsigned integers , each representing one of 256 possible values (2 8 ) between 0 and 255. But sometimes, you may need to interpret the same bit pattern as a signed integer , for example, when handling digital audio samples that encode a sound wave\u00e2\u0080\u0099s amplitude levels. See the section on signedness in the Python bytes tutorial for more details. The choice between bytes and bytearray boils down to whether you want read-only access to the underlying bytes or not. Instances of the bytes data type are immutable , meaning each one has a fixed value that you can\u00e2\u0080\u0099t change once the object is created. In contrast, bytearray objects are mutable sequences , allowing you to modify their contents after creation. While it may seem counterintuitive at first\u00e2\u0080\u0094since many newcomers to Python expect objects to be directly modifiable\u00e2\u0080\u0094immutable objects have several benefits over their mutable counterparts. That\u00e2\u0080\u0099s why types like strings, tuples, and others require reassignment in Python. The advantages of immutable data types include better memory efficiency due to the ability to cache or reuse objects without unnecessary copying. In Python, immutable objects are inherently hashable , so they can become dictionary keys or set elements. Additionally, relying on immutable objects gives you extra security, data integrity, and thread safety . That said, if you need a binary sequence that allows for modification, then bytearray is the way to go. Use it when you frequently perform in-place byte operations that involve changing the contents of the sequence, such as appending, inserting, extending, or modifying individual bytes. A scenario where bytearray can be particularly useful includes processing large binary files in chunks or incrementally reading messages from a network buffer. The third binary sequence type in Python mentioned earlier, memoryview , provides a zero-overhead view into the memory of certain objects. Unlike bytes and bytearray , whose mutability status is fixed, a memoryview can be either mutable or immutable depending on the target object it references. Just like bytes and bytearray , a memoryview may represent a series of single bytes, but at the same time, it can represent a sequence of multi-byte words . Now that you have a basic understanding of Python\u00e2\u0080\u0099s binary sequence types and where bytearray fits into them, you can explore ways to create and work with bytearray objects in Python. Creating bytearray Objects in Python Unlike the immutable bytes data type, whose literal form resembles a string literal prefixed with the letter b \u00e2\u0080\u0094for example, b\"GIF89a\" \u00e2\u0080\u0094the mutable bytearray has no literal syntax in Python. This distinction is important despite many similarities between both byte-oriented sequences, which you\u00e2\u0080\u0099ll discover in the next section. The primary way to create new bytearray instances is by explicitly calling the type\u00e2\u0080\u0099s class constructor , sometimes informally known as the bytearray() built-in function . Alternatively, you can create a bytearray from a string of hexadecimal digits. You\u00e2\u0080\u0099ll learn about both methods next. The bytearray() Constructor Read the full article at https://realpython.com/python-bytearray/ \u00c2\u00bb [ Improve Your Python With \u00f0\u009f\u0090\u008d Python Tricks \u00f0\u009f\u0092\u008c \u00e2\u0080\u0093 Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] March 31, 2025 02:00 PM UTC PyBites Try an AI Speed Run For Your Next Side Project The Problem I have for as long as I can remember had a bit of a problem with analysis paralysis and tunnel vision. If I\u2019m working on a problem and get stuck, I have a tendency to just sit there paging through code trying to understand where to go next. It\u2019s a very unproductive habit and one I\u2019m committed to breaking, because the last thing you want is to lose hours of wall clock time with no progress on your work. I was talking to my boss about this a few weeks back when I had a crazy idea: \u201cHey what if I wrote a program that looked for a particular key combo that I\u2019d hit every time I make progress, and if a specified period e.g. 15 or 30 minutes go by with no progress, a loud buzzer gets played to remind me to ask for help, take a break, or just try something different. \u201d He thought this was a great idea, and suggested that this would be an ideal candidate to try as an \u201cAI speed run\u201d. This article is a brief exploration of the process I used with some concrete hints on things that helped me make this project a success that you can use in your own coding \u201cspeed run\u201d endeavors Explain LIke The AI is 5 For purposes of this discussion I used ChatGPT with its GPT4.0 model. There\u2019s nothing magical about that choice, you can use Claude or any other LLM that fits your needs. Now comes the important part \u2013 coming up with the prompt! The first and most important part of building any program is coming to a full and detailed understanding of what you want to build. Be as descriptive as you can, being sure to include all the most salient aspects of your project. What does it do? Here\u2019s where detail and specifics are super important. Where does it need to run? In a web browser? Windows? Mac? Linux? These are just examples of the kinds of detail you must include. The initial prompt I came up with was: \u201cWrite a program that will run on Mac, Windows and Linux. The program should listen for a particular key combination, and if it doesn\u2019t receive that combination within a prescribed (configurable) time, it plays a notification sound to the user.\u201d. Try, Try Again Building software with a large language model isn\u2019t like rubbing a magic lamp and making a wish, asking for your software to appear. Instead, it\u2019s more like having a conversation about what you want to build with an artist about something you want them to create for you. The LLM is almost guaranteed to not produce exactly what you want on the first try. You can find the complete transcript of my conversation with ChatGPT for this project here . Do take a moment to read through it a bit. Notice that on the first try it didn\u2019t work at all, so I told it that and gave it the exact error. The fix it suggested wasn\u2019t helping, so I did a tiny bit of very basic debugging and found that one of the modules it was suggested (the one for keyboard input) blew up as soon as I ran its import . So I told it that and suggested that the problem was with the other module that played the buzzer sound. Progress Is A Change In Error Messages Once we got past all the platform specific library shenanigans, there were structural issues with the code that needed to be addressed. When I ran the code it generated I got this: UnboundLocalError: cannot access local variable 'watchdog_last_activity' where it is not associated with a value So I told it that by feeding the error back in. It then corrected course and generated the first fully working version of the program. Success! And I don\u2019t know about you, but a detail about this process that still amazes me? This whole conversation took less than an hour from idea to working program! That\u2019s quite something. Packaging And Polish When Bob suggested that I should publish my project to the Python package repository I loved the idea, but I\u2019d never done this before.  Lately I\u2019ve been using the amazing uv for all things package related. It\u2019s an amazing tool! So I dug into the documentation and started playing with my pyproject.toml . And if I\u2019m honest? It wasn\u2019t going very well. I kept trying to run uv publish and kept getting what seemed to me like inscrutable metadata errors At moments like that I try to ask myself one simple question: \u201cAm I following the happy path?\u201d and in this case, the answer was no When I started this project, I had used the uv init command to set up the project.  I began to wonder whether I had set things up wrong, so I pored over the uv docs and one invocation of uv init --package later I had a buildable package that I could publish to pypi ! There was one bit of polish remaining before I felt like I could call this project \u201cdone\u201d as a minimum viable product. Buzzer, Buzzer, Who\u2019s Got the Buzzer? One of the things I\u2019d struggled with since I first tried to package the program was where to put and how to bundle the sound file for the buzzer. After trying various unsatisfying and sub-optimal things like asking the user to supply their own and using a command line argument to locate it, one of Bob\u2019s early suggestions came to mind: I really needed to bundle the sound inside the package in such a way that the program could load it at run time. LLM To The Res-Cue. Again! One of the things you learn as you start working with large language models is that they act like a really good pair programming buddy. They offer another place to turn when you get stuck. So I asked ChatGPT: Write a pyproject.toml for a Python package that includes code that loads a sound file from inside the package. That did the trick! ChatGPT gave me the right pointers to include in my project toml file as well as the Python code to load the included sound file at run time! Let AI Help You Boldly Go Where You\u2019ve Never Been Before As you can see from the final code , this program uses cross platform Python modules for sound playback and keyboard input and more importantly uses threads to manage the real time capture of keypresses while keeping track of the time. I\u2019ve been in this industry for over 30 years, and a recurring theme I\u2019ve been hearing for most of that time is \u201cThreads are hard\u201d. And they are! But there are also cases like this where you can use them simply and reliably where they really make good sense! I know that now, and would feel comforable using them this way in a future project. There\u2019s value in that! Any tool we can use to help us grow and improve our skills is one worth using, and if we take the time to understand the code AI generates for us it\u2019s a good investment in my book! Conclusions I\u2019m very grateful to my manager for having suggested that I try building this project as an \u201cAI speed run\u201d. It\u2019s not something that would have occurred to me but in the end analysis it was a great experience from which I learned a lot. Also? I\u2019m super happy with the resulting tool and use it all the time now to ensure I don\u2019t stay stuck and burn a ton of time making no progress! You can see the project in its current state on my GitHub . There are lots of ideas I have for extending it in the future including a nice Textual interface and more polish around choosing the key chord and the \u201cbuzzer\u201d sound. Thanks for taking the time to read this. I hope that it inspires you to try your own AI speed run! March 31, 2025 09:28 AM UTC Talk Python to Me #499: BeeWare and the State of Python on Mobile This episode is all about Beeware, the project that working towards true native apps built on Python, especially for iOS and Android. Russell's been at this for more than a decade, and the progress is now hitting critical mass. We'll talk about the Toga GUI toolkit, building and shipping your apps with Briefcase, the newly official support for iOS and Android in CPython, and so much more. I can't wait to explore how BeeWare opens up the entire mobile ecosystem for Python developers, let's jump right in.<br/>\n<br/>\n<strong>Episode sponsors</strong><br/>\n<br/>\n<a href='https://talkpython.fm/workbench'>Posit</a><br>\n<a href='https://talkpython.fm/devopsbook'>Python in Production</a><br>\n<a href='https://talkpython.fm/training'>Talk Python Courses</a><br/>\n<br/>\n<h2 class=\"links-heading\">Links from the show</h2>\n<div><strong>Anaconda open source team</strong>: <a href=\"https://www.anaconda.com/our-open-source-commitment?featured_on=talkpython\" target=\"_blank\" >anaconda.com</a><br/>\n<strong>PEP 730 \u00e2\u0080\u0093 Adding iOS</strong>: <a href=\"https://peps.python.org/pep-0730/?featured_on=talkpython\" target=\"_blank\" >peps.python.org</a><br/>\n<strong>PEP 738 \u00e2\u0080\u0093 Adding Android</strong>: <a href=\"https://peps.python.org/pep-0738/?featured_on=talkpython\" target=\"_blank\" >peps.python.org</a><br/>\n<strong>Toga</strong>: <a href=\"https://beeware.org/project/projects/libraries/toga/?featured_on=talkpython\" target=\"_blank\" >beeware.org</a><br/>\n<strong>Briefcase</strong>: <a href=\"https://beeware.org/project/projects/tools/briefcase/?featured_on=talkpython\" target=\"_blank\" >beeware.org</a><br/>\n<strong>emscripten</strong>: <a href=\"https://emscripten.org/?featured_on=talkpython\" target=\"_blank\" >emscripten.org</a><br/>\n<strong>Russell Keith-Magee - Keynote - PyCon 2019</strong>: <a href=\"https://www.youtube.com/watch?v=ftP5BQh1-YM&ab_channel=PyCon2019\" target=\"_blank\" >youtube.com</a><br/>\n<strong>Watch this episode on YouTube</strong>: <a href=\"https://www.youtube.com/watch?v=rSiq8iijkKg\" target=\"_blank\" >youtube.com</a><br/>\n<strong>Episode transcripts</strong>: <a href=\"https://talkpython.fm/episodes/transcript/499/beeware-and-the-state-of-python-on-mobile\" target=\"_blank\" >talkpython.fm</a><br/>\n<br/>\n<strong>--- Stay in touch with us ---</strong><br/>\n<strong>Subscribe to Talk Python on YouTube</strong>: <a href=\"https://talkpython.fm/youtube\" target=\"_blank\" >youtube.com</a><br/>\n<strong>Talk Python on Bluesky</strong>: <a href=\"https://bsky.app/profile/talkpython.fm\" target=\"_blank\" >@talkpython.fm at bsky.app</a><br/>\n<strong>Talk Python on Mastodon</strong>: <a href=\"https://fosstodon.org/web/@talkpython\" target=\"_blank\" ><i class=\"fa-brands fa-mastodon\"></i>talkpython</a><br/>\n<strong>Michael on Bluesky</strong>: <a href=\"https://bsky.app/profile/mkennedy.codes?featured_on=talkpython\" target=\"_blank\" >@mkennedy.codes at bsky.app</a><br/>\n<strong>Michael on Mastodon</strong>: <a href=\"https://fosstodon.org/web/@mkennedy\" target=\"_blank\" ><i class=\"fa-brands fa-mastodon\"></i>mkennedy</a><br/></div> March 31, 2025 08:00 AM UTC Python Bytes #426 Committing to Formatted Markdown <strong>Topics covered in this episode:</strong><br>\n\n<ul>\n\t<li><a href=\"https://github.com/hukkin/mdformat?featured_on=pythonbytes\"><strong>mdformat</strong></a></li>\n<li><strong><a href=\"https://github.com/tox-dev/pre-commit-uv?featured_on=pythonbytes\">pre-commit-uv</a></strong></li>\n<li><strong>PEP 758 and 781</strong></li>\n<li><strong><a href=\"https://github.com/lusingander/serie?featured_on=pythonbytes\">Serie</a>: rich git commit graph in your terminal, like magic <img src=\"https://paper.dropboxstatic.com/static/img/ace/emoji/1f4da.png?version=8.0.0\" alt=\"books\" /></strong></li>\n<li><strong>Extras</strong></li>\n<li><strong>Joke</strong></li>\n\n</ul><a href='https://www.youtube.com/watch?v=-hHtfY8gW_0' style='font-weight: bold;'data-umami-event=\"Livestream-Past\" data-umami-event-episode=\"426\">Watch on YouTube</a><br>\n\n<p><strong>About the show</strong></p>\n\n<p>Sponsored by <strong>Posit Connect Cloud</strong>: <a href=\"https://pythonbytes.fm/connect-cloud\">pythonbytes.fm/connect-cloud</a></p>\n\n<p><strong>Connect with the hosts</strong></p>\n\n<ul>\n<li>Michael: <a href=\"https://fosstodon.org/@mkennedy\"><strong>@mkennedy@fosstodon.org</strong></a> <strong>/</strong> <a href=\"https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes\"><strong>@mkennedy.codes</strong></a> <strong>(bsky)</strong></li>\n<li>Brian: <a href=\"https://fosstodon.org/@brianokken\"><strong>@brianokken@fosstodon.org</strong></a> <strong>/</strong> <a href=\"https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes\"><strong>@brianokken.bsky.social</strong></a></li>\n<li>Show: <a href=\"https://fosstodon.org/@pythonbytes\"><strong>@pythonbytes@fosstodon.org</strong></a> <strong>/</strong> <a href=\"https://bsky.app/profile/pythonbytes.fm\"><strong>@pythonbytes.fm</strong></a> <strong>(bsky)</strong></li>\n</ul>\n\n<p>Join us on YouTube at <a href=\"https://pythonbytes.fm/stream/live\"><strong>pythonbytes.fm/live</strong></a> to be part of the audience. Usually <strong>Monday</strong> at 10am PT. Older video versions available there too.</p>\n\n<p>Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to <a href=\"https://pythonbytes.fm/friends-of-the-show\">our friends of the show list</a>, we'll never share it. </p>\n\n<p><strong>Brian #1:</strong> <a href=\"https://github.com/hukkin/mdformat?featured_on=pythonbytes\"><strong>mdformat</strong></a></p>\n\n<ul>\n<li>Suggested by Matthias Sch\u00c3\u00b6ttle</li>\n<li><a href=\"https://pythonbytes.fm/episodes/show/425/if-you-were-a-klingon-programmer\">Last episode </a>Michael covered blacken-docs, and I mentioned it\u00e2\u0080\u0099d be nice to have an autoformatter for text markdown.</li>\n<li>Matthias delivered with suggesting mdformat</li>\n<li>\u00e2\u0080\u009cMdformat is an opinionated Markdown formatter that can be used to enforce a consistent style in Markdown files.\u00e2\u0080\u009d</li>\n<li>A python project that can be run on the command line.</li>\n<li>Uses a <a href=\"https://mdformat.readthedocs.io/en/stable/users/style.html?featured_on=pythonbytes\">style guide</a> I mostly agree with.\n<ul>\n<li>I\u00e2\u0080\u0099m not a huge fan of numbered list items all being \u00e2\u0080\u009c1.\u00e2\u0080\u009d, but that can be turned off with --number, so I\u00e2\u0080\u0099m happy.</li>\n<li>Converts underlined headings to #, ##, etc. headings.</li>\n<li>Lots of other sane conventions.</li>\n<li>The numbering thing is also sane, I just think it also makes the raw markdown hard to read.</li>\n</ul></li>\n<li>Has a <a href=\"https://mdformat.readthedocs.io/en/stable/users/plugins.html?featured_on=pythonbytes\">plugin system to format code blocks</a></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://github.com/tox-dev/pre-commit-uv?featured_on=pythonbytes\">pre-commit-uv</a></p>\n\n<ul>\n<li>via Ben Falk</li>\n<li>Use uv to create virtual environments and install packages for pre-commit.</li>\n</ul>\n\n<p><strong>Brian #3:</strong> <strong>PEP 758 and 781</strong></p>\n\n<ul>\n<li><a href=\"https://peps.python.org/pep-0758/?featured_on=pythonbytes\">PEP 758 \u00e2\u0080\u0093 Allow except and except* expressions without parentheses</a>\n<ul>\n<li>accepted</li>\n</ul></li>\n<li><a href=\"https://peps.python.org/pep-0781/?featured_on=pythonbytes\">PEP 781 \u00e2\u0080\u0093 Make TYPE_CHECKING a built-in constant</a>\n<ul>\n<li>draft status</li>\n</ul></li>\n<li>Also,<a href=\"https://peps.python.org/pep-0000/#index-by-category\"> PEP Index by Category </a>kinda rocks</li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/lusingander/serie?featured_on=pythonbytes\">Serie</a>: rich git commit graph in your terminal, like magic <img src=\"https://paper.dropboxstatic.com/static/img/ace/emoji/1f4da.png?version=8.0.0\" alt=\"books\" /></p>\n\n<ul>\n<li>While some users prefer to use Git via CLI, they often rely on a GUI or feature-rich TUI to view commit logs. </li>\n<li>Others may find git log --graph sufficient.</li>\n<li><strong>Goals</strong>\n<ul>\n<li>Provide a rich git log --graph experience in the terminal.</li>\n<li>Offer commit graph-centric browsing of Git repositories.</li>\n</ul></li>\n</ul>\n\n<p><img src=\"https://github.com/lusingander/serie/raw/master/img/demo.gif\" alt=\"\" /></p>\n\n<p><strong>Extras</strong> </p>\n\n<p>Michael:</p>\n\n<ul>\n<li><a href=\"https://mkennedy.codes/posts/sunsetting-search/?featured_on=pythonbytes\">Sunsetting Search</a>? (<a href=\"https://www.startpage.com/?featured_on=pythonbytes\">Startpage</a>)</li>\n<li><a href=\"https://fosstodon.org/@RhetTbull/114237153385659674\">Ruff in or out</a>?</li>\n</ul>\n\n<p><strong>Joke:</strong> <a href=\"https://x.com/PR0GRAMMERHUM0R/status/1902299037652447410?featured_on=pythonbytes\">Wishing for wishes</a></p> March 31, 2025 08:00 AM UTC Armin Ronacher I'm Leaving Sentry Every ending marks a new beginning, and today, is the beginning of a new\nchapter for me.  Ten years ago I took a leap into the unknown, today I\ntake another.  After a decade of working on Sentry I move on to start something new. Sentry has been more than just a job, it has been a defining part of my\nlife.  A place where I've poured my energy, my ideas, my heart.  It has\nshaped me, just as I've shaped it.  And now, as I step away, I do so with\nimmense gratitude, a deep sense of pride, and a heart full of memories. From A Chance Encounter I've known David, Sentry's co-founder (alongside Chris), long before I was\never officially part of the team as our paths first crossed on IRC in the\nDjango community.  Even my first commit to Sentry predates me officially working there by a few years.  Back in\n2013, over conversations in the middle of Russia \u00e2\u0080\u0094 at a conference that,\nincidentally, also led to me meeting my wife \u00e2\u0080\u0094 we toyed with the idea of\nstarting a company together.  That exact plan didn't materialize, but the\nseeds of collaboration had been planted. Conversations continued, and by late 2014, the opportunity to help\ntransform Sentry (which already showed product market fit) into a much\nbigger company was simply too good to pass up.  I never could have\nimagined just how much that decision would shape the next decade of my\nlife. To A Decade of Experiences For me, Sentry's growth has been nothing short of extraordinary.  At\nfirst, I thought reaching 30 employees would be our ceiling.  Then we\nsurpassed that, and the milestones just kept coming \u00e2\u0080\u0094 reaching a unicorn\nvaluation was something I once thought was impossible.  While we may have\nstumbled at times, we've also learned immensely throughout this time. I'm grateful for all the things I got to experience and there never was a\ndull moment.  From representing Sentry at conferences, opening an\nengineering office in Vienna, growing teams, helping employees, assisting\nour licensing efforts and leading our internal platform teams.  Every step\nand achievement drove me. Yet for me, the excitement and satisfaction of being so close to the\nfounding of a company, yet not quite a founder, has only intensified my\ndesire to see the rest of it. A Hard Goodbye Walking away from something you love is never easy and leaving Sentry is\nhard.  Really hard.  Sentry has been woven into the very fabric of my\nadult life.  Working on it hasn't just spanned any random decade; it\nperfectly overlapped with marrying my wonderful wife, and growing our\nfamily from zero to three kids. And will it go away entirely?  The office is right around the corner\nafterall.  From now on, every morning, when I will grab my coffee, I will\nwalk past it.  The idea of no longer being part of the daily decisions,\nthe debates, the momentum \u00e2\u0080\u0094 it feels surreal.  That sense of belonging to\na passionate team, wrestling with tough decisions, chasing big wins,\nfighting fires together, sometimes venting about our missteps and\ndiscussing absurd and ridiculous trivia became part of my identity. There are so many bright individuals at Sentry, and I'm incredibly proud\nof what we have built together.  Not just from an engineering point of\nview, but also product, marketing and upholding our core values.  We\ndeveloped SDKs that support a wide array of platforms from Python to JavaScript to Swift to C++ , lately expanding to game\nconsoles.  We stayed true to our Open Source principles, even when other\noptions were available.  For example, when we needed an Open Source PDB\nimplementation for analyzing Windows crashes but couldn't find a suitable\nsolution, we contributed to a promising Rust crate instead of relying on\nWindows VMs and Microsoft's dbghelp.  When we started, our ingestion\nsystem handled a few thousand requests per second \u00e2\u0080\u0094\u00a0now it handles well\nover a million. While building an SDK may seem straightforward, maintaining and updating\nthem to remain best-in-class over the years requires immense dedication.\nIt takes determination to build something that works out of the box with\nlittle configuration.  A lot of clever engineering and a lot of deliberate\ntradeoffs went into the product to arrive where it is.  And ten years\nlater, is a multi-product company.  What started with just crashes, now\nyou can send traces, profiles, sessions, replays and more. We also stuck to our values.  I'm pleased that we ran experiments with\nlicensing despite all\nthe push back we got over the years.  We might not have found the right\nsolution yet, but we pushed the conversation.  The same goes for our\ncommitment to funding of dependencies . And Heartfelt Thank You I feel an enormous amount of gratitude for those last ten years.  There\nare so many people I owe thanks to.  I owe eternal thanks to David Cramer and Chris Jennings for the opportunity and trust they placed in me. To Ben Vinegar for his unwavering guidance and support.  To Dan\nLevine , for investing in\nus and believing in our vision.  To Daniel Griesser , for being an\nexceptional first hire in Vienna, and shepherding our office there and\ngrowing it to 50 people.  To Vlad Cretu , for bringing\nstructure to our chaos over the years.  To Milin Desai for taking the helm and growing us. And most of all, to my wonderful wife, Maria \u00e2\u0080\u0094 who has stood beside me\nthrough every challenge, who has supported me when the road was uncertain,\nand who has always encouraged me to forge my own path. To everyone at Sentry, past and present \u00e2\u0080\u0094 thank you.  For the trust, the\nlessons, the late nights, the victories.  For making Sentry what it is\ntoday. Quo eo? I'm fully aware it's a gamble to believe my next venture will find the\nsame success as Sentry.  The reality is that startups that achieve the\nkind of scale and impact Sentry has are incredibly rare.  There's a\nmeasure of hubris in assuming lightning strikes twice, and as humbling as\nthat realization is, it also makes me that much more determined.  The\ncreative spark that fueled me at Sentry isn't dimming.  Not at all in\nfact: it burns brighter fueld by the feeling that I can explore new\nthings, beckoning me.  There's more for me to explore, and I'm ready to\nchannel all that energy into a new venture. Today, I stand in an open field, my backpack filled with experiences and a\nrenewed sense of purpose.  That's because the world has changed a lot in\nthe past decade, and so have I.  What drives me now is different from what\ndrove me before, and I want my work to reflect that evolution. At my core, I'm still inspired by the same passion \u00e2\u0080\u0094 seeing others find\nvalue in what I create, but my perspective has expanded.  While I still\ntake great joy in building things that help developers, I want to broaden\nmy reach.  I may not stray far from familiar territory, but I want to\nbuild something that speaks to more people, something that, hopefully,\neven my children will find meaningful. Watch this space, as they say. March 31, 2025 12:00 AM UTC March 29, 2025 Ned Batchelder Human sorting improved When sorting strings, you\u2019d often like the order to make sense to a person.\nThat means numbers need to be treated numerically even if they are in a larger\nstring. For example, sorting Python versions with the default sort() would give\nyou: Python\u00c2\u00a03.10 Python\u00c2\u00a03.11 Python\u00c2\u00a03.9 when you want it to be: Python\u00c2\u00a03.9 Python\u00c2\u00a03.10 Python\u00c2\u00a03.11 I wrote about this long ago ( Human sorting ), but have\ncontinued to tweak the code and needed to add it to a\nproject recently.  Here\u2019s the latest: import re def human_key ( s : str ) -> tuple [ list [ str | int ], str ]: \"\"\"Turn\u00a0a\u00a0string\u00a0into\u00a0a\u00a0sortable\u00a0value\u00a0that\u00a0works\u00a0how\u00a0humans\u00a0expect. \"z23A\"\u00a0->\u00a0([\"z\",\u00a023,\u00a0\"a\"],\u00a0\"z23A\") The\u00a0original\u00a0string\u00a0is\u00a0appended\u00a0as\u00a0a\u00a0last\u00a0value\u00a0to\u00a0ensure\u00a0the key\u00a0is\u00a0unique\u00a0enough\u00a0so\u00a0that\u00a0\"x1y\"\u00a0and\u00a0\"x001y\"\u00a0can\u00a0be\u00a0distinguished. \"\"\" def try_int ( s : str ) -> str | int : \"\"\"If\u00a0`s`\u00a0is\u00a0a\u00a0number,\u00a0return\u00a0an\u00a0int,\u00a0else\u00a0`s`\u00a0unchanged.\"\"\" try : return int ( s ) except ValueError : return s return ([ try_int ( c ) for c in re . split ( r \"(\\d+)\" , s . casefold ())], s ) def human_sort ( strings : list [ str ]) -> None : \"\"\"Sort\u00a0a\u00a0list\u00a0of\u00a0strings\u00a0how\u00a0humans\u00a0expect.\"\"\" strings . sort ( key = human_key ) The central idea here is to turn a string like \"Python\u00c2\u00a03.9\" into the\nkey [\"Python\u00c2\u00a0\",\u00c2\u00a03,\u00c2\u00a0\".\",\u00c2\u00a09] so that numeric components will be sorted by\ntheir numeric value. The re.split() function gives us interleaved words and\nnumbers, and try_int() turns the numbers into actual numbers, giving us sortable\nkey lists. There are two improvements from the original: The sort is made case-insensitive by using casefold() to lower-case the\nstring. The key returned is now a two-element tuple: the first element is the list\nof intermixed strings and integers that gives us the ordering we want.  The\nsecond element is the original string unchanged to ensure that unique strings\nwill always result in distinct keys.  Without it, \"x1y\" and \"x001Y\" would both produce the same key.  This solves a problem that actually happened when sorting the items of\na dictionary. #\u00a0Without\u00a0the\u00a0tuple:\u00a0different\u00a0strings,\u00a0same\u00a0key!! human_key ( \"x1y\" ) -> [ \"x\" , 1 , \"y\" ] human_key ( \"x001Y\" ) -> [ \"x\" , 1 , \"y\" ] #\u00a0With\u00a0the\u00a0tuple:\u00a0different\u00a0strings,\u00a0different\u00a0keys. human_key ( \"x1y\" ) -> ([ \"x\" , 1 , \"y\" ], \"x1y\" ) human_key ( \"x001Y\" ) -> ([ \"x\" , 1 , \"y\" ], \"x001Y\" ) If you are interested, there are many different ways to split the string into\nthe word/number mix.  The comments on the old post have many alternatives, and there are certainly more. This still makes some assumptions about what is wanted, and doesn\u2019t cover all\npossible options (floats? negative/positive? full file paths?).  For those, you\nprobably want the full-featured natsort (natural sort)\npackage. March 29, 2025 04:59 PM UTC Python GUIs PyQt6 Toolbars & Menus \u00e2\u0080\u0094 QAction \u00e2\u0080\u0094 Defining toolbars, menus, and keyboard shortcuts with QAction Next, we'll look at some of the common user interface elements you've probably seen in many other applications \u2014 toolbars and menus. We'll also explore the neat system Qt provides for minimizing the duplication between different UI areas \u2014 QAction . Table of Contents Basic App Toolbars Adding a Toolbar Menus Adding a Menu Basic App We'll start this tutorial with a simple skeleton application, which we can customize. Save the following code in a file named app.py -- this code all the imports you'll need for the later steps: python from PyQt6.QtCore import QSize, Qt\nfrom PyQt6.QtGui import QAction, QIcon, QKeySequence\nfrom PyQt6.QtWidgets import (\n    QApplication,\n    QCheckBox,\n    QLabel,\n    QMainWindow,\n    QStatusBar,\n    QToolBar,\n)\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"My App\")\n\napp = QApplication([])\nwindow = MainWindow()\nwindow.show()\napp.exec() This file contains the imports and the basic code that you'll use to complete the examples in this tutorial. If you're migrating to PyQt6 from PyQt5, notice that QAction is now available via the QtGui module. Toolbars One of the most commonly seen user interface elements is the toolbar. Toolbars are bars of icons and/or text used to perform common tasks within an application, for which access via a menu would be cumbersome. They are one of the most common UI features seen in many applications. While some complex applications, particularly in the Microsoft Office suite, have migrated to contextual 'ribbon' interfaces, the standard toolbar is usually sufficient for the majority of applications you will create. Standard GUI elements Adding a Toolbar Let's start by adding a toolbar to our application. In Qt, toolbars are created from the QToolBar class. To start, you create an instance of the class and then call addToolbar on the QMainWindow . Passing a string in as the first argument to QToolBar sets the toolbar's name, which will be used to identify the toolbar in the UI: python class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"My App\")\n\n        label = QLabel(\"Hello!\")\n        label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        self.setCentralWidget(label)\n\n        toolbar = QToolBar(\"My main toolbar\")\n        self.addToolBar(toolbar) Run it! You'll see a thin grey bar at the top of the window. This is your toolbar. Right-click the name to trigger a context menu and toggle the bar off. A window with a toolbar. How can I get my toolbar back? Unfortunately, once you remove a toolbar, there is now no place to right-click to re-add it. So, as a general rule, you want to either keep one toolbar un-removeable, or provide an alternative interface in the menus to turn toolbars on and off. We should make the toolbar a bit more interesting. We could just add a QButton widget, but there is a better approach in Qt that gets you some additional features \u2014 and that is via QAction . QAction is a class that provides a way to describe abstract user interfaces. What this means in English is that you can define multiple interface elements within a single object, unified by the effect that interacting with that element has. For example, it is common to have functions that are represented in the toolbar but also the menu \u2014 think of something like Edit->Cut , which is present both in the Edit menu but also on the toolbar as a pair of scissors, and also through the keyboard shortcut Ctrl-X ( Cmd-X on Mac). Without QAction , you would have to define this in multiple places. But with QAction you can define a single QAction , defining the triggered action, and then add this action to both the menu and the toolbar. Each QAction has names, status messages, icons, and signals that you can connect to (and much more). In the code below, you can see this first QAction added: python class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"My App\")\n\n        label = QLabel(\"Hello!\")\n        label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        self.setCentralWidget(label)\n\n        toolbar = QToolBar(\"My main toolbar\")\n        self.addToolBar(toolbar)\n\n        button_action = QAction(\"Your button\", self)\n        button_action.setStatusTip(\"This is your button\")\n        button_action.triggered.connect(self.toolbar_button_clicked)\n        toolbar.addAction(button_action)\n\n    def toolbar_button_clicked(self, s):\n        print(\"click\", s) To start with, we create the function that will accept the signal from the QAction so we can see if it is working. Next, we define the QAction itself. When creating the instance, we can pass a label for the action and/or an icon. You must also pass in any QObject to act as the parent for the action \u2014 here we're passing self as a reference to our main window. Strangely, for QAction the parent element is passed in as the final argument. Next, we can opt to set a status tip \u2014 this text will be displayed on the status bar once we have one. Finally, we connect the triggered signal to the custom function. This signal will fire whenever the QAction is triggered (or activated). Run it! You should see your button with the label that you have defined. Click on it, and then our custom method will print \"click\" and the status of the button. Toolbar showing our QAction button. Why is the signal always false? The signal passed indicates whether the button is checked , and since our button is not checkable \u2014 just clickable \u2014 it is always false. We'll show how to make it checkable shortly. Next, we can add a status bar. We create a status bar object by calling QStatusBar to get a new status bar object and then passing this into setStatusBar . Since we don't need to change the status bar settings, we can also just pass it in as we create it, in a single line: python class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"My App\")\n\n        label = QLabel(\"Hello!\")\n        label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        self.setCentralWidget(label)\n\n        toolbar = QToolBar(\"My main toolbar\")\n        self.addToolBar(toolbar)\n\n        button_action = QAction(\"Your button\", self)\n        button_action.setStatusTip(\"This is your button\")\n        button_action.triggered.connect(self.toolbar_button_clicked)\n        toolbar.addAction(button_action)\n\n        self.setStatusBar(QStatusBar(self))\n\n    def toolbar_button_clicked(self, s):\n        print(\"click\", s) Run it! Hover your mouse over the toolbar button, and you will see the status text in the status bar. Status bar text updated as we hover over the action. Next, we're going to turn our QAction toggleable \u2014 so clicking will turn it on, and clicking again will turn it off. To do this, we simply call setCheckable(True) on the QAction object: python class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"My App\")\n\n        label = QLabel(\"Hello!\")\n        label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        self.setCentralWidget(label)\n\n        toolbar = QToolBar(\"My main toolbar\")\n        self.addToolBar(toolbar)\n\n        button_action = QAction(\"Your button\", self)\n        button_action.setStatusTip(\"This is your button\")\n        button_action.triggered.connect(self.toolbar_button_clicked)\n        button_action.setCheckable(True)\n        toolbar.addAction(button_action)\n\n        self.setStatusBar(QStatusBar(self))\n\n    def toolbar_button_clicked(self, s):\n        print(\"click\", s) Run it! Click on the button to see it toggle from checked to unchecked state. Note that the custom slot method we create now alternates outputting True and False . The toolbar button toggled on. There is also a toggled signal, which only emits a signal when the button is toggled. But the effect is identical, so it is mostly pointless. Things look pretty shabby right now \u2014 so let's add an icon to our button. For this, I recommend you download the fugue icon set by designer Yusuke Kamiyamane. It's a great set of beautiful 16x16 icons that can give your apps a nice professional look. It is freely available with only attribution required when you distribute your application \u2014 although I am sure the designer would appreciate some cash too if you have some spare. Fugue Icon Set \u2014\u00a0Yusuke Kamiyamane Select an image from the set (in the examples here, I've selected the file bug.png ) and copy it into the same folder as your source code. We can create a QIcon object by passing the file name to the class, e.g. QIcon(\"bug.png\") -- if you place the file in another folder, you will need a full relative or absolute path to it. Finally, to add the icon to the QAction (and therefore the button), we simply pass it in as the first argument when creating the QAction . You also need to let the toolbar know how large your icons are. Otherwise, your icon will be surrounded by a lot of padding. You can do this by calling setIconSize() with a QSize object: python class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"My App\")\n\n        label = QLabel(\"Hello!\")\n        label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        self.setCentralWidget(label)\n\n        toolbar = QToolBar(\"My main toolbar\")\n        toolbar.setIconSize(QSize(16, 16))\n        self.addToolBar(toolbar)\n\n        button_action = QAction(QIcon(\"bug.png\"), \"Your button\", self)\n        button_action.setStatusTip(\"This is your button\")\n        button_action.triggered.connect(self.toolbar_button_clicked)\n        button_action.setCheckable(True)\n        toolbar.addAction(button_action)\n\n        self.setStatusBar(QStatusBar(self))\n\n    def toolbar_button_clicked(self, s):\n        print(\"click\", s) Run it! The QAction is now represented by an icon. Everything should work exactly as it did before. Our action button with an icon. Note that Qt uses your operating system's default settings to determine whether to show an icon, text, or an icon and text in the toolbar. But you can override this by using setToolButtonStyle() . This slot accepts any of the following flags from the Qt namespace: Flag Behavior Qt.ToolButtonStyle.ToolButtonIconOnly Icon only, no text Qt.ToolButtonStyle.ToolButtonTextOnly Text only, no icon Qt.ToolButtonStyle.ToolButtonTextBesideIcon Icon and text, with text beside the icon Qt.ToolButtonStyle.ToolButtonTextUnderIcon Icon and text, with text under the icon Qt.ToolButtonStyle.ToolButtonFollowStyle Follow the host desktop style The default value is Qt.ToolButtonStyle.ToolButtonFollowStyle , meaning that your application will default to following the standard/global setting for the desktop on which the application runs. This is generally recommended to make your application feel as native as possible. Finally, we can add a few more bits and bobs to the toolbar. We'll add a second button and a checkbox widget. As mentioned, you can literally put any widget in here, so feel free to go crazy: python from PyQt6.QtCore import QSize, Qt\nfrom PyQt6.QtGui import QAction, QIcon\nfrom PyQt6.QtWidgets import (\n    QApplication,\n    QCheckBox,\n    QLabel,\n    QMainWindow,\n    QStatusBar,\n    QToolBar,\n)\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"My App\")\n\n        label = QLabel(\"Hello!\")\n        label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        self.setCentralWidget(label)\n\n        toolbar = QToolBar(\"My main toolbar\")\n        toolbar.setIconSize(QSize(16, 16))\n        self.addToolBar(toolbar)\n\n        button_action = QAction(QIcon(\"bug.png\"), \"&Your button\", self)\n        button_action.setStatusTip(\"This is your button\")\n        button_action.triggered.connect(self.toolbar_button_clicked)\n        button_action.setCheckable(True)\n        toolbar.addAction(button_action)\n\n        toolbar.addSeparator()\n\n        button_action2 = QAction(QIcon(\"bug.png\"), \"Your &button2\", self)\n        button_action2.setStatusTip(\"This is your button2\")\n        button_action2.triggered.connect(self.toolbar_button_clicked)\n        button_action2.setCheckable(True)\n        toolbar.addAction(button_action2)\n\n        toolbar.addWidget(QLabel(\"Hello\"))\n        toolbar.addWidget(QCheckBox())\n\n        self.setStatusBar(QStatusBar(self))\n\n    def toolbar_button_clicked(self, s):\n        print(\"click\", s)\n\napp = QApplication([])\nwindow = MainWindow()\nwindow.show()\napp.exec() Run it! Now you see multiple buttons and a checkbox. Toolbar with an action and two widgets. Menus Menus are another standard component of UIs. Typically, they are at the top of the window or the top of a screen on macOS. They allow you to access all standard application functions. A few standard menus exist \u2014 for example File , Edit , Help . Menus can be nested to create hierarchical trees of functions, and they often support and display keyboard shortcuts for fast access to their functions. Standard GUI elements - Menus Adding a Menu To create a menu, we create a menubar we call menuBar() on the QMainWindow . We add a menu to our menu bar by calling addMenu() , passing in the name of the menu. I've called it '&File' .  The ampersand defines a quick key to jump to this menu when pressing Alt. This won't be visible on macOS. Note that this is different from a keyboard shortcut \u2014 we'll cover that shortly. This is where the power of actions comes into play. We can reuse the already existing QAction to add the same function to the menu. To add an action, you call addAction() passing in one of our defined actions: python class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"My App\")\n\n        label = QLabel(\"Hello!\")\n        label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        self.setCentralWidget(label)\n\n        toolbar = QToolBar(\"My main toolbar\")\n        toolbar.setIconSize(QSize(16, 16))\n        self.addToolBar(toolbar)\n\n        button_action = QAction(QIcon(\"bug.png\"), \"&Your button\", self)\n        button_action.setStatusTip(\"This is your button\")\n        button_action.triggered.connect(self.toolbar_button_clicked)\n        button_action.setCheckable(True)\n        toolbar.addAction(button_action)\n\n        toolbar.addSeparator()\n\n        button_action2 = QAction(QIcon(\"bug.png\"), \"Your &button2\", self)\n        button_action2.setStatusTip(\"This is your button2\")\n        button_action2.triggered.connect(self.toolbar_button_clicked)\n        button_action2.setCheckable(True)\n        toolbar.addAction(button_action2)\n\n        toolbar.addWidget(QLabel(\"Hello\"))\n        toolbar.addWidget(QCheckBox())\n\n        self.setStatusBar(QStatusBar(self))\n\n        menu = self.menuBar()\n\n        file_menu = menu.addMenu(\"&File\")\n        file_menu.addAction(button_action)\n\n    def toolbar_button_clicked(self, s):\n        print(\"click\", s) Run it! Click the item in the menu, and you will notice that it is toggleable \u2014 it inherits the features of the QAction . Menu shown on the window -- on macOS this will be at the top of the screen. Let's add some more things to the menu. Here, we'll add a separator to the menu, which will appear as a horizontal line in the menu, and then add the second QAction we created: python class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"My App\")\n\n        label = QLabel(\"Hello!\")\n        label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        self.setCentralWidget(label)\n\n        toolbar = QToolBar(\"My main toolbar\")\n        toolbar.setIconSize(QSize(16, 16))\n        self.addToolBar(toolbar)\n\n        button_action = QAction(QIcon(\"bug.png\"), \"&Your button\", self)\n        button_action.setStatusTip(\"This is your button\")\n        button_action.triggered.connect(self.toolbar_button_clicked)\n        button_action.setCheckable(True)\n        toolbar.addAction(button_action)\n\n        toolbar.addSeparator()\n\n        button_action2 = QAction(QIcon(\"bug.png\"), \"Your &button2\", self)\n        button_action2.setStatusTip(\"This is your button2\")\n        button_action2.triggered.connect(self.toolbar_button_clicked)\n        button_action2.setCheckable(True)\n        toolbar.addAction(button_action2)\n\n        toolbar.addWidget(QLabel(\"Hello\"))\n        toolbar.addWidget(QCheckBox())\n\n        self.setStatusBar(QStatusBar(self))\n\n        menu = self.menuBar()\n\n        file_menu = menu.addMenu(\"&File\")\n        file_menu.addAction(button_action)\n        file_menu.addSeparator()\n        file_menu.addAction(button_action2)\n\n    def toolbar_button_clicked(self, s):\n        print(\"click\", s) Run it! You should see two menu items with a line between them. Our actions showing in the menu. You can also use ampersand to add accelerator keys to the menu to allow a single key to be used to jump to a menu item when it is open. Again this doesn't work on macOS. To add a submenu, you simply create a new menu by calling addMenu() on the parent menu. You can then add actions to it as usual. For example: python class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"My App\")\n\n        label = QLabel(\"Hello!\")\n        label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        self.setCentralWidget(label)\n\n        toolbar = QToolBar(\"My main toolbar\")\n        toolbar.setIconSize(QSize(16, 16))\n        self.addToolBar(toolbar)\n\n        button_action = QAction(QIcon(\"bug.png\"), \"&Your button\", self)\n        button_action.setStatusTip(\"This is your button\")\n        button_action.triggered.connect(self.toolbar_button_clicked)\n        button_action.setCheckable(True)\n        toolbar.addAction(button_action)\n\n        toolbar.addSeparator()\n\n        button_action2 = QAction(QIcon(\"bug.png\"), \"Your &button2\", self)\n        button_action2.setStatusTip(\"This is your button2\")\n        button_action2.triggered.connect(self.toolbar_button_clicked)\n        button_action2.setCheckable(True)\n        toolbar.addAction(button_action2)\n\n        toolbar.addWidget(QLabel(\"Hello\"))\n        toolbar.addWidget(QCheckBox())\n\n        self.setStatusBar(QStatusBar(self))\n\n        menu = self.menuBar()\n\n        file_menu = menu.addMenu(\"&File\")\n        file_menu.addAction(button_action)\n        file_menu.addSeparator()\n\n        file_submenu = file_menu.addMenu(\"Submenu\")\n        file_submenu.addAction(button_action2)\n\n    def toolbar_button_clicked(self, s):\n        print(\"click\", s) Run it! You will see a nested menu in the File menu. Submenu nested in the File menu. Finally, we'll add a keyboard shortcut to the QAction . You define a keyboard shortcut by passing setKeySequence() and passing in the key sequence. Any defined key sequences will appear in the menu. Note that the keyboard shortcut is associated with the QAction and will still work whether or not the QAction is added to a menu or a toolbar. Key sequences can be defined in multiple ways - either by passing as text, using key names from the Qt namespace, or using the defined key sequences from the Qt namespace. Use the latter wherever you can to ensure compliance with the operating system standards. The completed code, showing the toolbar buttons and menus, is shown below: python class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"My App\")\n\n        label = QLabel(\"Hello!\")\n\n        # The `Qt` namespace has a lot of attributes to customize\n        # widgets. See: http://doc.qt.io/qt-6/qt.html\n        label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\n        # Set the central widget of the Window. Widget will expand\n        # to take up all the space in the window by default.\n        self.setCentralWidget(label)\n\n        toolbar = QToolBar(\"My main toolbar\")\n        toolbar.setIconSize(QSize(16, 16))\n        self.addToolBar(toolbar)\n\n        button_action = QAction(QIcon(\"bug.png\"), \"&Your button\", self)\n        button_action.setStatusTip(\"This is your button\")\n        button_action.triggered.connect(self.toolbar_button_clicked)\n        button_action.setCheckable(True)\n        # You can enter keyboard shortcuts using key names (e.g. Ctrl+p)\n        # Qt.namespace identifiers (e.g. Qt.CTRL + Qt.Key_P)\n        # or system agnostic identifiers (e.g. QKeySequence.Print)\n        button_action.setShortcut(QKeySequence(\"Ctrl+p\"))\n        toolbar.addAction(button_action)\n\n        toolbar.addSeparator()\n\n        button_action2 = QAction(QIcon(\"bug.png\"), \"Your &button2\", self)\n        button_action2.setStatusTip(\"This is your button2\")\n        button_action2.triggered.connect(self.toolbar_button_clicked)\n        button_action2.setCheckable(True)\n        toolbar.addAction(button_action2)\n\n        toolbar.addWidget(QLabel(\"Hello\"))\n        toolbar.addWidget(QCheckBox())\n\n        self.setStatusBar(QStatusBar(self))\n\n        menu = self.menuBar()\n\n        file_menu = menu.addMenu(\"&File\")\n        file_menu.addAction(button_action)\n\n        file_menu.addSeparator()\n\n        file_submenu = file_menu.addMenu(\"Submenu\")\n\n        file_submenu.addAction(button_action2)\n\n    def toolbar_button_clicked(self, s):\n        print(\"click\", s) Experiment with building your own menus using QAction and QMenu . March 29, 2025 06:00 AM UTC March 28, 2025 Robin Wilson Learning resources for GIS in Python with cloud-native geospatial, PostGIS and more I recently gave a careers talk to students at Solent University , and through that I got to know a MSc student there who had previous GIS experience and was now doing a Data Analytics and AI MSc course. Her GIS experience was mostly in the ESRI stack (ArcGIS and related tools) and she was keen to learn other tools and how to combine her new Python and data knowledge with her previous GIS knowledge. I wrote her a long email with links to loads of resources and, with her permission, I\u2019m publishing it here as it may be useful to others. The general focus is on the tools I use, which are mostly Python-focused, but also on becoming familiar with a range of tools rather than using tools from just one ecosystem (like ESRI). I hope it is useful to you. Tools to investigate: GDAL GDAL is a library that consists of two parts GDAL and OGR. It provides ways to read and write geospatial data formats like shapefile, geopackage, GeoJSON, GeoTIFF etc \u2013 both raster (GDAL) and vector (OGR). It has a load of command-line tools like gdal_translate, ogr2ogr, gdalwarp and so on. These are extremely useful for converting between formats, importing data to databases, doing basic processing etc. It will be very useful for you to become familiar with the GDAL command-line tools. It comes with a Python interface which is a bit of a pain to use, and there are nicer libraries that are easier for using GDAL functionality from Python. A good tutorial for the command-line tools is at https://courses.spatialthoughts.com/gdal-tools.html Command line tools in general Getting familiar with running things from the command-line (Command Prompt on Windows) is very useful. On Windows I suggest installing \u00e2\u0080\u0098Windows Terminal\u00e2\u0080\u0099 ( https://apps.microsoft.com/detail/9n0dx20hk701?hl=en-GB&gl=GB ) and using that \u2013 but make sure you select standard command prompt not Powershell when you open a terminal using it. Git There\u00e2\u0080\u0099s a good tutorial at https://swcarpentry.github.io/git-novice/ qgis2web This is a plugin for QGIS that will export a QGIS project to a standalone web map, with the styling/visualisation as close to the original QGIS project as they can manage. It\u00e2\u0080\u0099s very useful for exporting maps to share easily. There\u00e2\u0080\u0099s a tutorial at https://www.qgistutorials.com/en/docs/web_mapping_with_qgis2web.html and the main page is at https://plugins.qgis.org/plugins/qgis2web/ Python libraries to investigate: GeoPandas \u2013 like pandas but including geometry columns for geospatial information. Try the geopandas explore() method, which will do an automatic webmap of a GeoPandas GeoDataFrame (like you did manually with Folium, but automatically) rasterio \u2013 a nice wrapper around GDAL functionality that lets you easily load/manipulate/save raster geospatial data fiona \u2013 a similar wrapper for vector data in GDAL/OGR shapely \u2013 a library for representing vector geometries in Python \u2013 used by fiona, GeoPandas etc rasterstats \u2013 a library for doing \u00e2\u0080\u0098zonal statistics\u00e2\u0080\u0099 \u2013 ie. getting raster values within a polygon, at a point etc Cloud Native Geospatial There\u2019s a good \u00e2\u0080\u0098zine\u00e2\u0080\u0099 that explains the basics behind cloud-native geospatial \u2013 see https://zines.developmentseed.org/zines/cloud-native/ . Understanding the basics of the topics in there would be good. There are loads of good tutorials online for using STAC catalogues, COG files and so on. See https://planetarycomputer.microsoft.com/docs/quickstarts/reading-stac/ and https://planetarycomputer.microsoft.com/docs/tutorials/cloudless-mosaic-sentinel2/ and https://github.com/microsoft/PlanetaryComputerExamples/blob/main/tutorials/surface_analysis.ipynb My Blog You can subscribe via email on the left-hand side at the bottom of the sidebar Relevant posts: https://blog.rtwilson.com/searching-an-aerial-photo-with-text-queries-a-demo-and-how-it-works/ https://blog.rtwilson.com/simple-segmentation-of-geospatial-images/ https://blog.rtwilson.com/whats-the-largest-building-in-southampton-find-out-with-5-lines-of-code/ https://blog.rtwilson.com/simple-self-hosted-openstreetmap-routing-using-valhalla-and-docker/ https://blog.rtwilson.com/how-to-speed-up-appending-to-postgis-tables-with-ogr2ogr/ https://blog.rtwilson.com/how-to-fix-geopandas-drop_duplicates-on-geometry-column-not-getting-rid-of-all-duplicates/ https://blog.rtwilson.com/how-to-easily-reload-a-qgis-layer/ https://blog.rtwilson.com/travel-times-over-time/ Conference talks These can be a really good way to get a brief intro to a topic, to know where to delve in deeper later. I often put them on and half-listen while I\u00e2\u0080\u0099m doing something else, and then switch to focusing on them fully if they get particularly interesting. There are loads of links here, don\u00e2\u0080\u0099t feel like you have to look at them all! PostGIS Day conference: https://www.crunchydata.com/blog/postgis-day-2024-summary Particularly relevant talks: https://www.youtube.com/watch?v=O45Zy5zKkm8 \u2013 good example of building up a complex SQL query https://www.youtube.com/watch?v=mR0WshjWfVY \u2013 includes descriptions of on-the-fly Mapbox Vector Tile creation like we use in GPAP https://www.youtube.com/watch?v=BsFCVTBzTvY \u2013 also includes on-the-fly MVT creation https://www.youtube.com/watch?v=1KhWJHKuNCY FOSS4G UK conference last year in Bristol: https://uk.osgeo.org/foss4guk2024/bristol.html Most relevant talks for you are the following (just the slides): https://uk.osgeo.org/foss4guk2024/decks/08-robin-wilson-cloud-native-flood-risk.pdf \u2013 see what you think of the large SQL query that I talk through https://uk.osgeo.org/foss4guk2024/decks/11-al-graham-overture.pdf https://uk.osgeo.org/foss4guk2024/decks/13-alexei-qgis-grid-layout-plugin.pdf https://uk.osgeo.org/foss4guk2024/decks/14-matt-travis-overture.pdf FOSS4G conference YouTube videos: https://www.youtube.com/@FOSS4G/videos \u2013 they have a load of ones from 2022 at the top for some reason, but if you scroll down a long way you can find 2023 and 2024 stuff. Actually, better is to use this playlist of talks from the 2023 global conference: https://www.youtube.com/playlist?list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ Here\u00e2\u0080\u0099s a few talks that might be particularly interesting/relevant to you, in no particular order https://www.youtube.com/watch?v=g7iMO1KmyJE&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=47 https://www.youtube.com/watch?v=QN1CQZ9xq6Y&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=49 https://www.youtube.com/watch?v=uOziWmcn7z0&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=53 https://www.youtube.com/watch?v=jfaizvF5S4I&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=56 https://www.youtube.com/watch?v=gl7LMEPvAmo&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=105 https://www.youtube.com/watch?v=KCfMljtOzWQ&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=111 https://www.youtube.com/watch?v=6ZFjSXAOkss&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=137 https://www.youtube.com/watch?v=oK7QxhAWPTc&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=140 https://www.youtube.com/watch?v=OtsvoR0wo80&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=141 https://www.youtube.com/watch?v=0QMmfGn7btc&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=148 https://www.youtube.com/watch?v=ZBj77BRx-XE&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=193 https://www.youtube.com/watch?v=Y-t5wHq7OrA&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=227 https://www.youtube.com/watch?v=UKbmeFkW8nM&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=230 https://www.youtube.com/watch?v=snGDbX8pG2I&list=PLqa06jy1NEM2Kna9Gt_LDKZHv1dl4xUoZ&index=256 Suggestions for learning projects/tasks (These are quite closely related to the MSc project that this student might be doing, but are probably useful for people generally) I know when you\u00e2\u0080\u0099re starting off it is hard to work out what sort of things to do to develop your skills. One thing that is really useful is to become a bit of a \u2018tool polyglot\u2019, so you can do the same task in various tools depending on what makes sense in the circumstances. I\u00e2\u0080\u0099ve listed a couple of tasks below. I\u00e2\u0080\u0099d suggest trying to complete them in a few ways: Using QGIS and clicking around in the GUI Using Python libraries like geopandas, rasterio and so on Using PostGIS (Possibly \u2013 not essential) Using the QGIS command-line, or model builder or similar Task 1 \u2013 Flood risk Download the \u00e2\u0080\u0098Flood Zone 2\u00e2\u0080\u0099 flood risk data from https://environment.data.gov.uk/explore/86ec354f-d465-11e4-b09e-f0def148f590?download=true for a particular area (maybe the whole of Southampton?) Download OS data on buildings from this page \u2013 https://automaticknowledge.org/gb/ \u2013 you can download it for a specific local authority area Find all buildings at risk of flooding, and provide a count of buildings at risk and a map of buildings at risk (static map or web map) Extension task: also provide a total ground area of buildings at risk Task 2 \u2013 Elevation data (Don\u00e2\u0080\u0099t do this with PostGIS as its raster functionality isn\u00e2\u0080\u0099t great, but you could probably do all of this with GDAL command-line tools if you wanted) Download Digital Terrain Model data from https://environment.data.gov.uk/survey \u2013 download multiple tiles Mosaic the tiles together into one large image file Do some basic processing on the DEM data. For example, try: a) Subtracting the minimum value, so the lowest elevation comes out as a value of zero b) Running a smoothing algorithm across the DEM to remove noise Produce a map \u2013 either static or web map March 28, 2025 07:34 PM UTC March 27, 2025 Test and Code pytest-html - a plugin that generates HTML reports for test results pytest-html has got to be one of my all time favorite plugins.\u00c2 pytest-html is a plugin for pytest that generates a HTML report for test results.\u00c2 This episode digs into some of the super coolness of pytest-html. pytest-html repo readme with screenshot enhancing reports pytest-metadata Sponsored by:\u00c2 The Complete pytest course is now a bundle, with each part available separately. pytest Primary Power teaches the super powers of pytest that you need to learn to use pytest effectively. Using pytest with Projects has lots of \"when you need it\" sections like debugging failed tests, mocking, testing strategy, and CI Then pytest Booster Rockets can help with advanced parametrization and building plugins. Whether you need to get started with pytest today, or want to power up your pytest skills, PythonTest has a course for you. \u00e2\u0098\u0085 Support this podcast on Patreon \u00e2\u0098 <p>pytest-html has got to be one of my all time favorite plugins.\u00c2\u00a0<br>pytest-html is a plugin for pytest that generates a HTML report for test results.\u00c2\u00a0<br>This episode digs into some of the super coolness of pytest-html.</p><ul><li><a href=\"https://pytest-html.readthedocs.io/\">pytest-html</a></li><li><a href=\"https://github.com/pytest-dev/pytest-html/blob/master/README.rst\">repo readme with screenshot</a></li><li><a href=\"https://pytest-html.readthedocs.io/en/latest/user_guide.html#enhancing-reports\">enhancing reports</a></li><li><a href=\"https://github.com/pytest-dev/pytest-metadata/tree/master\">pytest-metadata</a></li></ul>\n<br><p><strong>Sponsored by:\u00c2\u00a0</strong></p><ul><li><a href=\"https://file+.vscode-resource.vscode-cdn.net/Users/brianokken/projects/test_and_code_notes/new_ad.md\">The Complete pytest course</a> is now a bundle, with each part available separately.<ul><li><a href=\"https://courses.pythontest.com/pytest-primary-power\">pytest Primary Power</a> teaches the super powers of pytest that you need to learn to use pytest effectively.</li><li><a href=\"https://courses.pythontest.com/using-pytest-with-projects\">Using pytest with Projects</a> has lots of \"when you need it\" sections like debugging failed tests, mocking, testing strategy, and CI</li><li>Then <a href=\"https://courses.pythontest.com/pytest-booster-rockets\">pytest Booster Rockets</a> can help with advanced parametrization and building plugins.</li></ul></li><li>Whether you need to get started with pytest today, or want to power up your pytest skills, <a href=\"https://courses.pythontest.com\">PythonTest</a> has a course for you.<p></p></li></ul>\n<strong>\n  <a href=\"https://www.patreon.com/c/testpodcast\" rel=\"payment\" title=\"\u00e2\u0098\u0085 Support this podcast on Patreon \u00e2\u0098\u0085\">\u00e2\u0098\u0085 Support this podcast on Patreon \u00e2\u0098\u0085</a>\n</strong> March 27, 2025 06:16 PM UTC Python Anywhere innit: a new system image, with Python 3.13 and Ubuntu 22.04 If you signed up for an account on PythonAnywhere after 25 March 2025, you\u2019ll\nhave Python versions 3.11, 3.12 and 3.13 available.  Additionally, the underlying operating system for\nyour account will be Ubuntu 22.04, rather than the 20.04 used by older accounts. If you signed up before that date, you\u2019ll be on an older \u201csystem image\u201d \u2013\nessentially the version of the operating system and the set of installed packages\nthat you have access to.  You can switch to the new system image from the \u201cAccount\u201d page ,\nbut you may need to make changes to your code and/or virtualenvs to make\neverything work \u2013 there\u2019s more information on that page. This post has more details on what\u2019s new in the \u201cinnit\u201d system image.  There\u2019s a lot! March 27, 2025 01:00 PM UTC Real Python Quiz: Using Python's .__dict__ to Work With Attributes In this quiz, you\u2019ll test your understanding of Using Python\u2019s .__dict__ to Work With Attributes . By working through this quiz, you\u2019ll revisit how .__dict__ holds an object\u2019s writable attributes, allowing for dynamic manipulation and introspection. You\u2019ll also review how both vars() and .__dict__ let you inspect an object\u2019s attributes, and the common use cases of .__dict__ in Python applications. [ Improve Your Python With \u00f0\u009f\u0090\u008d Python Tricks \u00f0\u009f\u0092\u008c \u00e2\u0080\u0093 Get a short & sweet Python Trick delivered to your inbox every couple of days. >> Click here to learn more and see examples ] March 27, 2025 12:00 PM UTC Eli Bendersky Notes on implementing Attention Some notes on implementing attention blocks in pure Python +\nNumpy. The focus here is on the exact implementation in code, explaining all the\nshapes throughout the process. The motivation for why attention works is not\ncovered here - there are plenty of excellent online resources explaining it. Several papers are mentioned throughout the code; they are: AIAYN - Attention Is All You Need by\nVaswani et al. GPT-3 - Language Models are Few-Shot Learners by Brown et al. Basic scaled self-attention We'll start with the most basic scaled dot product self-attention, working on a\nsingle sequence of tokens, without masking. The input is a 2D array of shape (N, D). N is the length of the sequence (how\nmany tokens it contains) and D is the embedding depth - the length of the\nembedding vector representing each token [1] . D could be something like\n512, or more, depending on the model. A self-attention module is parameterized with three weight matrices, Wk , Wq and Wv . Some variants also have accompanying bias vectors, but the\nAIAYN paper doesn't use them, so I'll skip them here. In the general case,\nthe shape of each weight matrix is (D, HS), where HS is some fraction of\nD. HS stands for \"head size\" and we'll see what this means soon. This is a\ndiagram of a self-attention module (the diagram assumes\nN=6, D is some large number and so is HS). In the diagram, @ stands for\nmatrix multiplication (Python/Numpy syntax): Here's a basic Numpy implementation of this: # self_attention the way it happens in the Transformer model. No bias. # D = model dimension/depth (length of embedding) # N = input sequence length # HS = head size # # x is the input (N, D), each token in a row. # Each of W* is a weight matrix of shape (D, HS) # The result is (N, HS) def self_attention ( x , Wk , Wq , Wv ): # Each of these is (N, D) @ (D, HS) = (N, HS) q = x @ Wq k = x @ Wk v = x @ Wv # kq: (N, N) matrix of dot products between each pair of q and k vectors. # The division by sqrt(HS) is the scaling. kq = q @ k . T / np . sqrt ( k . shape [ 1 ]) # att: (N, N) attention matrix. The rows become the weights that sum # to 1 for each output vector. att = softmax_lastdim ( kq ) return att @ v # (N, HS) The \"scaled\" part is just dividing kq by the square root of HS , which\nis done to keep the values of the dot products manageable (otherwise they would\ngrow with the size of the contracted dimension). The only dependency is a function for calculating Softmax across the last dimension of an input array: def softmax_lastdim ( x ): \"\"\"Compute softmax across last dimension of x. x is an arbitrary array with at least two dimensions. The returned array has the same shape as x, but its elements sum up to 1 across the last dimension. \"\"\" # Subtract the max for numerical stability ex = np . exp ( x - np . max ( x , axis =- 1 , keepdims = True )) # Divide by sums across last dimension return ex / np . sum ( ex , axis =- 1 , keepdims = True ) When the input is 2D, the \"last dimension\" is the columns. Colloquially, this\nSoftmax function acts on each row of x separately; it applies the Softmax\nformula to the elements (columns) of the row, ending up with a row of numbers in\nthe range [0,1] that all sum up to 1. Another note on the dimensions: it's possible for the Wv matrix to have a\ndifferent second dimension from Wq and Wk . If you look at the diagram,\nyou can see this will work out, since the softmax produces (N, N), and whatever\nthe second dimension of V is, will be the second dimension of the output. The\nAIAYN paper designates these dimensions as d_k and d_v, but in\npractice d_k=d_v in all the variants it lists. I found that these\ndimensions are typically the same in other papers as well. Therefore, for\nsimplicity I just made them all equal to D in this post; if desired, a variant\nwith different d_k and d_v is a fairly trivial modification to\nthis code. Batched self-attention In the real world, the input array is unlikely to be 2D because models are\ntrained on batches of input sequences. To leverage the parallelism of modern\nhardware, whole batches are typically processed in the same operation. The batched version of scaled self-attention is very similar to the non-batched\none, due to the magic of Numpy matrix multiplication and broadcasts. Now the\ninput shape is (B, N, D), where B is the batch dimension. The W* matrices\nare still (D, HS); multiplying a (B, N, D) array by (D, HS) performs contraction\nbetween the last axis of the first array and the first axis of the second array,\nresulting in (B, N, HS). Here's the code, with the dimensions annotated\nfor each operation: # self_attention with inputs that have a batch dimension. # x has shape (B, N, D) # Each of W* has shape (D, D) def self_attention_batched ( x , Wk , Wq , Wv ): q = x @ Wq # (B, N, HS) k = x @ Wk # (B, N, HS) v = x @ Wv # (B, N, HS) kq = q @ k . swapaxes ( - 2 , - 1 ) / np . sqrt ( k . shape [ - 1 ]) # (B, N, N) att = softmax_lastdim ( kq ) # (B, N, N) return att @ v # (B, N, HS) Note that the only difference between this and the non-batched version is the\nline calculating kq : Since k is no longer 2D, the notion of \"transpose\" is ambiguous so we\nexplicitly ask to swap the last and the penultimate axis, leaving the first\naxis (B) intact. When calculating the scaling factor we use k.shape[-1] to select the last dimension of k , instead of k.shape[1] which only selects the\nlast dimension for 2D arrays. In fact, this function could also calculate the non-batched version! From now\non, we'll assume that all inputs are batched, and all operations are implicitly\nbatched. I'm not going to be using the \"batched\" prefix or suffix on functions\nany more. The basic underlying idea of the attention module is to shift around the\nmulti-dimensional representations of tokens in the sequence towards a better\nrepresentation of the entire sequence. The tokens attend to each other.\nSpecifically, the matrix produced by the Softmax operation is called the attention matrix . It's (N, N); for each token it specifies how much\ninformation from every other token in the sequence should be taken into account.\nFor example, a higher number in cell (R, C) means that there's a stronger\nrelation of token at index R in the sequence to the token at index C. Here's a nice example from the AIAYN paper, showing a word sequence and the\nweights produced by two attention heads (purple and brown) for a given position\nin the input sequence: This shows how the model is learning to resolve what the word \"its\" refers to\nin the sentence. Let's take just the purple head as an example. The index of\ntoken \"its\" in the sequence is 8, and the index of \"Law\" is 1. In the attention\nmatrix for this head, the value at index (8, 1) will be very high (close to 1),\nwith other values in the same row much lower. While this intuitive explanation isn't critical to understand how attention is\nimplemented, it will become more important when we talk about masked self-attention later on. Multi-head attention The attention mechanism we've seen so far has a single set of K, Q and V\nmatrices. This is called one \"head\" of attention. In today's models, there\nare typically multiple heads. Each head does its attention job separately, and\nin the end all these results are concatenated and feed through a linear layer. In what follows, NH is the number of heads and HS is the head size.\nTypically, NH times HS would be D; for example, the AIAYN paper mentions\nseveral configurations for D=512: NH=8 and HS=64, NH=32 and HS=16, and so on [2] .\nHowever, the math works out even if this isn't the case, because the final linear\n(\"projection\") layer maps the output back to (N, D). Assuming the previous diagram showing a self-attention module is a single head\nwith input (N, D) and output (N, HS), this is how multiple heads are combined: Each of the (NH) heads has its own parameter weights for Q, K and\nV. Each attention head outputs a (N, HS) matrix; these are concatenated along\nthe last dimension to (N, NH * HS), which is passed through a final linear\nprojection. Here's a function implementing (batched) multi-head attention; for now, please\nignore the code inside do_mask conditions: # x has shape (B, N, D) # In what follows: #   NH = number of heads #   HS = head size # Each W*s is a list of NH weight matrices of shape (D, HS). # Wp is a weight matrix for the final linear projection, of shape (NH * HS, D) # The result is (B, N, D) # If do_mask is True, each attention head is masked from attending to future # tokens. def multihead_attention_list ( x , Wqs , Wks , Wvs , Wp , do_mask = False ): # Check shapes. NH = len ( Wks ) HS = Wks [ 0 ] . shape [ 1 ] assert len ( Wks ) == len ( Wqs ) == len ( Wvs ) for W in Wqs + Wks + Wvs : assert W . shape [ 1 ] == HS assert Wp . shape [ 0 ] == NH * HS # List of head outputs head_outs = [] if do_mask : # mask is a lower-triangular (N, N) matrix, with zeros above # the diagonal and ones on the diagonal and below. N = x . shape [ 1 ] mask = np . tril ( np . ones (( N , N ))) for Wk , Wq , Wv in zip ( Wks , Wqs , Wvs ): # Calculate self attention for each head separately q = x @ Wq # (B, N, HS) k = x @ Wk # (B, N, HS) v = x @ Wv # (B, N, HS) kq = q @ k . swapaxes ( - 2 , - 1 ) / np . sqrt ( k . shape [ - 1 ]) # (B, N, N) if do_mask : # Set the masked positions to -inf, to ensure that a token isn't # affected by tokens that come after it in the softmax. kq = np . where ( mask == 0 , - np . inf , kq ) att = softmax_lastdim ( kq ) # (B, N, N) head_outs . append ( att @ v ) # (B, N, HS) # Concatenate the head outputs and apply the final linear projection all_heads = np . concatenate ( head_outs , axis =- 1 ) # (B, N, NH * HS) return all_heads @ Wp # (B, N, D) It is possible to vectorize this code even further; you'll sometimes see the\nheads laid out in a separate (4th) dimension instead of being a list. See\nthe Vectorizing across the heads dimension section. Masked (or Causal) self-attention Attention modules can be used in both encoder and decoder blocks. Encoder blocks are useful for things like language understanding or translation; for\nthese, it makes sense for each token to attend to all the other tokens in the\nsequence. However, for generative models this presents a problem: if during training a\nword attends to future words, the model will just \"cheat\" and not really learn\nhow to generate the next word from only past words. This is done in a decoder block, and for this we need to add masking to attention. Conceptually, masking is very simple. Consider the sentence: People like watching funny cat videos When our attention code generates the att matrix, it's a square (N, N)\nmatrix with attention weights from each token to each other token in the\nsequence: What we want is for all the gray cells in this matrix to be zero, to ensure\nthat a token doesn't attend to future tokens. The blue cells in the matrix\nadd up to 1 in each row, after the softmax operation. Now take a look at the previous code sample and see what happens when do_mask=True : First, a (N, N) lower-triangular array is prepared with zeros above the\ndiagonal and ones on the diagonal and below. Then, before we pass the scaled QK^T to softmax, we set its values\nto -\\infty wherever the mask matrix is 0. This ensures that the\nsoftmax function will assign zeros to outputs at these indices, while still\nproducing the proper values in the rest of the row. Another name for masked self-attention is causal self-attention. This is a\nvery good name that comes from causal systems in control theory. Cross-attention So far we've been working with self-attention blocks, where the self suggests\nthat elements in the input sequence attend to other elements in the same input\nsequence. Another variant of attention is cross-attention , where elements of one\nsequence attend to elements in another sequence. This variant exists in the\ndecoder block of the AIAYN paper. This is a single head of\ncross-attention: Here we have two sequences with potentially different lengths: xq and xv . xq is used for the query part of attention, while xv is used for\nthe key and value parts. The rest of the dimensions remain as before. The output\nof such a block is shaped (Nq, HS). This is an implementation of multi-head cross-attention; it doesn't include\nmasking, since masking is not typically necessary in cross attention - it's OK\nfor elements of xq to attend to all elements of xv [3] : # Cross attention between two input sequences that can have different lengths. # xq has shape (B, Nq, D) # xv has shape (B, Nv, D) # In what follows: #   NH = number of heads #   HS = head size # Each W*s is a list of NH weight matrices of shape (D, HS). # Wp is a weight matrix for the final linear projection, of shape (NH * HS, D) # The result is (B, Nq, D) def multihead_cross_attention_list ( xq , xv , Wqs , Wks , Wvs , Wp ): # Check shapes. NH = len ( Wks ) HS = Wks [ 0 ] . shape [ 1 ] assert len ( Wks ) == len ( Wqs ) == len ( Wvs ) for W in Wqs + Wks + Wvs : assert W . shape [ 1 ] == HS assert Wp . shape [ 0 ] == NH * HS # List of head outputs head_outs = [] for Wk , Wq , Wv in zip ( Wks , Wqs , Wvs ): q = xq @ Wq # (B, Nq, HS) k = xv @ Wk # (B, Nv, HS) v = xv @ Wv # (B, Nv, HS) kq = q @ k . swapaxes ( - 2 , - 1 ) / np . sqrt ( k . shape [ - 1 ]) # (B, Nq, Nv) att = softmax_lastdim ( kq ) # (B, Nq, Nv) head_outs . append ( att @ v ) # (B, Nq, HS) # Concatenate the head outputs and apply the final linear projection all_heads = np . concatenate ( head_outs , axis =- 1 ) # (B, Nq, NH * HS) return all_heads @ Wp # (B, Nq, D) Vectorizing across the heads dimension The multihead_attention_list implementation shown above uses lists of weight\nmatrices as input. While this makes the code clearer, it's not a particularly\nfriendly format for an optimized implementation - especially on accelerators\nlike GPUs and TPUs. We can vectorize it further by creating a new dimension for\nattention heads. To understand the trick being used, consider a basic matmul of (8, 6) by\n(6, 2): Now suppose we want to multiply our LHS by another (6, 2) matrix. We can do\nit all in the same operation by concatenating the two RHS matrices along\ncolumns: If the yellow RHS block in both diagrams is identical, the green block of the\nresult will be as well. And the violet block is just the matmul of the LHS by\nthe red block of the RHS. This stems from the semantics of matrix\nmultiplication, and is easy to verify on paper. Now back to our multi-head attention. Note that we multiply the input x by\na whole list of weight matrices - in fact, by three lists (one list for Q,\none for K, and another for V). We can use the same vectorization technique by\nconcatenating all these weight matrices into a single one. Assuming that NH * HS = D , the shape of the combined matrix is (D, 3 * D). Here's\nthe vectorized implementation: # x has shape (B, N, D) # In what follows: #   NH = number of heads #   HS = head size #   NH * HS = D # W is expected to have shape (D, 3 * D), with all the weight matrices for # Qs, Ks, and Vs concatenated along the last dimension, in this order. # Wp is a weight matrix for the final linear projection, of shape (D, D). # The result is (B, N, D). # If do_mask is True, each attention head is masked from attending to future # tokens. def multihead_attention_vec ( x , W , NH , Wp , do_mask = False ): B , N , D = x . shape assert W . shape == ( D , 3 * D ) qkv = x @ W # (B, N, 3 * D) q , k , v = np . split ( qkv , 3 , axis =- 1 ) # (B, N, D) each if do_mask : # mask is a lower-triangular (N, N) matrix, with zeros above # the diagonal and ones on the diagonal and below. mask = np . tril ( np . ones (( N , N ))) HS = D // NH q = q . reshape ( B , N , NH , HS ) . transpose ( 0 , 2 , 1 , 3 ) # (B, NH, N, HS) k = k . reshape ( B , N , NH , HS ) . transpose ( 0 , 2 , 1 , 3 ) # (B, NH, N, HS) v = v . reshape ( B , N , NH , HS ) . transpose ( 0 , 2 , 1 , 3 ) # (B, NH, N, HS) kq = q @ k . swapaxes ( - 1 , - 2 ) / np . sqrt ( k . shape [ - 1 ]) # (B, NH, N, N) if do_mask : # Set the masked positions to -inf, to ensure that a token isn't # affected by tokens that come after it in the softmax. kq = np . where ( mask == 0 , - np . inf , kq ) att = softmax_lastdim ( kq ) # (B, NH, N, N) out = att @ v # (B, NH, N, HS) return out . transpose ( 0 , 2 , 1 , 3 ) . reshape ( B , N , D ) @ Wp # (B, N, D) This code computes Q, K and V in a single matmul, and then splits them\ninto separate arrays (note that on accelerators these splits and later\ntransposes may be very cheap or even free as they represent a different access\npattern into the same data). Each of Q, K and V is initially (B, N, D), so they are reshaped into a more\nconvenient shape by first splitting the D into (NH, HS), and finally\nchanging the order of dimensions to get (B, NH, N, HS). In this format, both\nB and NH are considered batch dimensions that are fully parallelizable.\nThe QK^T computation can then proceed as before, and Numpy will\nautomatically perform the matmul over all the batch dimensions. Sometimes you'll see an alternative notation used in papers for these matrix\nmultiplications: numpy.einsum . For\nexample, in our last code sample the computation of kq could also be\nwritten as: kq = np . einsum ( \"bhqd,bhkd->bhqk\" , q , k ) / np . sqrt ( k . shape [ - 1 ]) See this post for my detailed notes on this notation . Code The full code for these samples, with tests, is available in this repository . [1] In LLM papers, D is often called d_{model}. [2] In the GPT-3 paper, this is also true for all model variants. For example,\nthe largest 175B model has NH=96, HS=128 and D=12288. [3] It's also not as easy to define mathematically: how do we make a\nnon-square matrix triangular? And what does it mean when the lengths\nof the two inputs are different? March 27, 2025 07:17 AM UTC Armin Ronacher Rust Any Part 3: Finally we have Upcasts Three years ago I shared the As-Any Hack on\nthis blog.  That hack is a way to get upcasting to supertraits working on\nstable Rust.  To refresh your memory, the goal was to make something like\nthis work: #[derive(Debug)] struct AnyBox ( Box < dyn DebugAny > ); trait DebugAny : Any + Debug {} impl < T : Any + Debug + ' static > DebugAny for T {} The problem? Even though DebugAny inherits from Any , Rust wouldn't let you\nuse methods from Any on a dyn DebugAny .  So while you could call DebugAny methods just fine, trying to use downcast_ref from Any (the\nreason to use Any in the first place) would fail: fn main () { let any_box = AnyBox ( Box :: new ( 42 i32 )); dbg! ( any_box . 0. downcast_ref :: < i32 > ()); // Compile error } The same would happen if we tried to cast it into an &dyn Any ?  A\ncompile error again: fn main () { let any_box = AnyBox ( Box :: new ( 42 i32 )); let any = &* any_box . 0 as & dyn Any ; dbg! ( any . downcast_ref :: < i32 > ()); } But there is good news!  As of Rust 1.86, this is finally fixed. The cast\nnow works: [src/main.rs:14:5] any.downcast_ref::<i32>() = Some(\n    42,\n) At the time of writing, this fix is in the beta channel, but stable\nrelease is just around the corner.  That means a lot of old hacks can\nfinally be retired.  At least once your MSRV moves up. Thank you so much to everyone who worked on this to make it work! For completeness' sake here is the extension map from the original\nblock post cleaned up so that it does not need the as-any hack: use std :: any :: { Any , TypeId }; use std :: cell :: { Ref , RefCell , RefMut }; use std :: collections :: HashMap ; use std :: fmt :: Debug ; trait DebugAny : Any + Debug {} impl < T : Any + Debug + ' static > DebugAny for T {} #[derive(Default, Debug)] pub struct Extensions { map : RefCell < HashMap < TypeId , Box < dyn DebugAny >>> , } impl Extensions { pub fn insert < T : Debug + ' static > ( & self , value : T ) { self . map . borrow_mut () . insert ( TypeId :: of :: < T > (), Box :: new ( value )); } pub fn get < T : Default + Debug + ' static > ( & self ) -> Ref <' _ , T > { self . ensure :: < T > (); Ref :: map ( self . map . borrow (), | m | { m . get ( & TypeId :: of :: < T > ()) . and_then ( | b | ( &** b as & dyn Any ). downcast_ref ()) . unwrap () }) } pub fn get_mut < T : Default + Debug + ' static > ( & self ) -> RefMut <' _ , T > { self . ensure :: < T > (); RefMut :: map ( self . map . borrow_mut (), | m | { m . get_mut ( & TypeId :: of :: < T > ()) . and_then ( | b | (( & mut ** b ) as & mut dyn Any ). downcast_mut ()) . unwrap () }) } fn ensure < T : Default + Debug + ' static > ( & self ) { if self . map . borrow (). get ( & TypeId :: of :: < T > ()). is_none () { self . insert ( T :: default ()); } } } March 27, 2025 12:00 AM UTC meejah.ca Magic Wormhole is What? Various levels of details regarding a secure peer connection technology March 27, 2025 12:00 AM UTC March 26, 2025 Python Morsels Checking whether iterables are equal in Python You can check whether iterables contain the same elements in Python with equality checks, type conversions, sets, Counter , or looping helpers. Table of contents Simple equality checks Comparing different types of iterables Checking equality between large iterables Checking for near -equality Ignoring order when comparing iterables Comparing iterables isn't just about equality Simple equality checks If we have two lists and we wanted to know whether the items in these two lists are the same , we could use the equality operator ( == ): >>> lines1 = [ \"Grains\" , \"Kindred\" , \"Zia\" ] >>> lines2 = [ \"Grains\" , \"Kindred\" , \"Zia\" ] >>> lines1 == lines2 True The same thing works for comparing tuples: >>> p = ( 3 , 4 , 8 ) >>> q = ( 3 , 5 , 7 ) >>> p == q False But what if we wanted to compare a list and a tuple ? We can't use a simple equality check for that: >>> lines1 = [ \"Grains\" , \"Kindred\" , \"Zia\" ] >>> lines2 = ( \"Grains\" , \"Kindred\" , \"Zia\" ) >>> lines1 == lines2 False Comparing different types of iterables To compare the items in \u00e2\u0080\u00a6 Read the full article: https://www.pythonmorsels.com/iterable-equality/ March 26, 2025 11:00 PM UTC Mirek D\u00c5\u0082ugosz Interesting bugs: peculiar intermittent failure in testing\u00c2\u00a0pipeline Over the years I have encountered my share of memorable problems. They were remarkably complex, hard to debug, completely obvious in retrospect, or plain funny. This is the story of one of\u00a0them. At the beginning, there was a suite of automated tests that I was maintaining. One day one of them failed. Not a big deal, unfortunate reality is that some of them fail sometimes for various reasons. Usually they pass when run again and we can blame unreliable infrastructure, transient networking issue or misalignment of the stars. But few days later the same test failed again. And then again. It was clear that there\u2019s something going on and this particular test is intermittently failing. I had to figure out what is happening and how can I make the test provide the same result\u00a0reliably. (Note the choice of words here. My goal was not to make the test passing, or \u201cgreen\u201d. There might as well have been a bug in the test itself, or in the product. At this point nobody knew. The main goal was understanding the issue and making sure test is reliably providing the same result - whether it is pass or\u00a0fail.) Before we move on, there\u2019s some relevant context that I need to share. That suite contained only UI tests. Running them all took about an hour. They were running against staging environment few times a day. The test that was failing was responsible for checking a chart which plots the data from last 30 days. There were other tests verifying other charts, sometimes using different time spans. The website used the same generic chart component in all cases. These other tests never\u00a0failed. On a high level, the failing test consisted of three main steps: request the data from last 30 days using the API , read the data from the graph on the website, and compare both. Test was considered failed if there was any difference between the data from these two sources. Python deepdiff package was used for comparison. To make it possible, data from API was locally transformed to mimic the structure returned by function responsible for reading the data from UI . Testing infrastructure had few distinct pieces. There was a Jenkins server that triggered a test suite run at certain times of the day. Job executors were containers in a Kubernetes cluster. To facilitate UI testing, there was a Selenium Grid server with few workers hosted as virtual machines on OpenStack. Tests were running against staging environment of the product, which was also hosted on a Kubernetes cluster, but different than the one where job executors were. I believe all that was scattered across two data centers, with most of testing infrastructure being co-located, and product under test being\u00a0elsewhere. Not necessarily accurate illustration of infrastructure. Now, let\u2019s get back to the\u00a0story. The very first thing I did was looking into test logs. Unfortunately, differences between objects as reported by deepdiff in this particular case are not easy to read (see below). The amount of data is overwhelming, and displaying everything in single line contributes to the challenge. The log made it clear that lists returned by API and read from UI are different, but it was not immediately obvious where exactly these differences\u00a0are. >       assert not deepdiff.DeepDiff(expected_graph_data, actual_graph_data) E       assert not {'values_changed': {\"root[0]['Date']\": {'new_value': '1970-01-01', 'old_value': '1970-01-02'}, \"root[0]['Foo']\": {'new_value': 46, 'old_value': 23}, \"root[0]['Bar']\": {'new_value': 60, 'old_value': 99}, \"root[0]['Total']\": {'new_value': 106, 'old_value': 122}, \"root[1]['Date']\": {'new_value': '1970-01-02', 'old_value': '1970-01-03'}, \"root[1]['Foo']\": {'new_value': 23, 'old_value': 26}, \"root[1]['Bar']\": {'new_value': 99, 'old_value': 92}, \"root[1]['Total']\": {'new_value': 122, 'old_value': 118}, \"root[2]['Date']\": {'new_value': '1970-01-03', 'old_value': '1970-01-04'}, \"root[2]['Foo']\": {'new_value': 26, 'old_value': 49}, \"root[2]['Bar']\": {'new_value': 92, 'old_value': 86}, \"root[2]['Total']\": {'new_value': 118, 'old_value': 135}, \"root[3]['Date']\": {'new_value': '1970-01-04', 'old_value': '1970-01-05'}, \"root[3]['Foo']\": {'new_value': 49, 'old_value': 68}, \"root[3]['Bar']\": {'new_value': 86, 'old_value': 60}, \"root[3]['Total']\": {'new_value': 135, 'old_value': 128}, \"root[4]['Date']\": {'new_value': '1970-01-05', 'old_value': '1970-01-06'}, \"root[4]['Foo']\": {'new_value': 68, 'old_value': 33}, \"root[4]['Bar']\": {'new_value': 60, 'old_value': 14}, \"root[4]['Total']\": {'new_value...ue': 25}, \"root[24]['Bar']\": {'new_value': 29, 'old_value': 78}, \"root[24]['Total']\": {'new_value': 106, 'old_value': 103}, \"root[25]['Date']\": {'new_value': '1970-01-26', 'old_value': '1970-01-27'}, \"root[25]['Foo']\": {'new_value': 25, 'old_value': 57}, \"root[25]['Bar']\": {'new_value': 78, 'old_value': 84}, \"root[25]['Total']\": {'new_value': 103, 'old_value': 141}, \"root[26]['Date']\": {'new_value': '1970-01-27', 'old_value': '1970-01-28'}, \"root[26]['Foo']\": {'new_value': 57, 'old_value': 48}, \"root[26]['Bar']\": {'new_value': 84, 'old_value': 18}, \"root[26]['Total']\": {'new_value': 141, 'old_value': 66}, \"root[27]['Date']\": {'new_value': '1970-01-28', 'old_value': '1970-01-29'}, \"root[27]['Foo']\": {'new_value': 48, 'old_value': 89}, \"root[27]['Bar']\": {'new_value': 18, 'old_value': 14}, \"root[27]['Total']\": {'new_value': 66, 'old_value': 103}, \"root[28]['Date']\": {'new_value': '1970-01-29', 'old_value': '1970-01-30'}, \"root[28]['Foo']\": {'new_value': 89, 'old_value': 61}, \"root[28]['Bar']\": {'new_value': 14, 'old_value': 66}, \"root[28]['Total']\": {'new_value': 103, 'old_value': 127}}, 'iterable_item_added': {'root[29]': {'Date': '1970-01-30', 'Foo': 61, 'Bar': 66, 'Total': 127}}} Trying to understand this log felt daunting, so my next step was running the failing test locally, in isolation. Predictably, it passed. I didn\u2019t have the high hopes that I will be able to reproduce the problem right away, but that was a cheap thing to try, so I think it was worth giving a\u00a0shot. At this point I decided there is no way around it and I have to better understand how API and UI responses are different. I copied the log line into editor and inserted a new line character after each }, . Few more changes later I had a form that was a little easier to\u00a0decipher. Deepdiff shows the differences between elements under the same index in lists. But focusing on elements with the same date value revealed that they are fundamentally the same. Values appearing under \u201cold_value\u201d in one list appears as \u201cnew_value\u201d in the other list, just under different index. I have put colored overlay on the screenshot below to make it easier to see. You can think of these lists as mostly the same, but one is shifted when compared to other; or you can say that one list has extra element added at the end, while the other has extra element added at the very beginning. Specifically, API read data from January 2nd to February 1st, but UI displayed data from January 1st to January 31st. There\u2019s a large overlap, but deepdiff output obscured this key\u00a0insight. Deepdiff output after editing. Color overlays shows that both lists have the same data, but in different places. At this point I had an idea what is wrong, but I had no clue why, and why it would affect only this one single test. So in the next step I wanted to see if there are any patterns to the failure. I grabbed test results from last few weeks and put them in the spreadsheet. I added columns for basic things, like the result itself, how long did it take for test to finish, date and time when test was run. To make failing tests visually distinct, I added background color to highlight them. In separate column I tagged all rows where test was running for a first time in a given day. Then I added columns representing known issues that we encountered in previous few weeks, to see if all failures fall into one of\u00a0them. While there wasn\u2019t a clear and predictable pattern, I did notice a curious thing - if the test failed, it would fail in the first run of a given day. Subsequent runs of any day never failed. And the first run in a day always started shortly after midnight UTC . That allowed me to construct a working hypothesis: the issue is somehow related to time and there\u2019s only a short window when it may occur, maybe up to few hours. That window is located around midnight UTC . Such hypothesis explains why subsequent pipeline runs never failed, and why I was never successful at reproducing the issue locally - I am located east of UTC line and I would have to try running the test way outside of working hours. Of course I didn\u2019t know if I was up to something or I was just creating complex ad hoc hypothesis that fits the data. But it directed my next\u00a0step. To corroborate the hypothesis I needed some new information, things I didn\u2019t have before. To gather it, I have added further logging in the test suite. First, I have used Selenium JavaScript execution capability to obtain the date and time as the browser \u201csees\u201d it. Then I have done the same from Python, which both drives Selenium and requests data from API . The important part is that Python code is executed directly on test runner (container in Kubernetes) and JavaScript code is executed in the browser (Selenium Grid VM on\u00a0OpenStack). diff --git package/tests/ui/test_failing.py package/tests/ui/test_failing.py index 1234567..abcdef0 100644 --- package/tests/ui/test_failing.py +++ package/tests/ui/test_failing.py @@ -10,6 +10,13 @@ def test_failing_test(user_app, some_fixture): \"\"\" view = navigate_to(user_app.some_app, \"SomeViewName\") +    browser_time_string = view.browser.execute_script(\"return new Date().toTimeString()\") +    browser_utc_string = view.browser.execute_script(\"return new Date().toUTCString()\") +    view.logger.info( +        \"[JavaScript] Time right now: %s ; UTC time: %s\", +        browser_time_string, +        browser_utc_string, +    ) expected_x_axis = get_xaxis_values() view.items.item_select(some_value) view.graph.wait_displayed() diff --git package/utils/utils.py package/utils/utils.py index 1234567..abcdef0 100644 --- package/utils/utils.py +++ package/utils/utils.py @@ -10,6 +10,14 @@ METRIC_MAP = { def _get_dates_range(some_param=\"Daily\", date=None): +    current_time = arrow.now() +    log.info( +        \"[Python] Time right now: %s ; TZ name: %s ; TZ offset: %s ; UTC time: %s\", +        current_time, +        current_time.strftime(\"%Z\"), +        current_time.strftime(\"%z\"), +        arrow.utcnow(), +    ) try: date = arrow.get(date) except TypeError: With the above patch applied and deployed, all I needed to do was waiting for the next failure. I hoped that new logs would reveal some more information once it fails\u00a0again. That turned out to be true. JavaScript showed a date one day earlier than Python. In fact, the time in JavaScript was about 15 minutes earlier than in Python. So if test suite ran around midnight, and we got to offending test within 15 minutes of suite start, then Python would request data through API for some dates, but website in browser would think it is still the previous day, and request different set of dates. It means that the window where issue occurs is extremely small - just around 15 minutes each\u00a0day. [JavaScript] Time right now: Thu Jan 01 1970 23:58:17 GMT+0000 (Coordinated Universal Time) ; UTC time: Thu, 01 Jan 1970 23:58:17GMT [Python] Time right now: 1970-01-02T00:14:36.042473+00:00 ; TZ name: UTC ; TZ offset: +0000 ; UTC time: 1970-01-02T00:14:36.042473+00:00 This concludes the main part of the debugging story - at this point we knew what is wrong, we knew that failure is not caused by a bug in a test or a product, and it was clear that the solution is for all machines involved in testing to reconcile date and time. It also seemed like the JavaScript shows wrong date, which might mean that the issue is with Selenium Grid machines or OpenStack\u00a0instance. I connected to all Selenium Grid machines using SSH and checked their local time using date command. They were about 15 minutes behind their wall-clock time. I assumed the difference is caused by various OpenStack and underlying infrastructure maintenance work, so I just used hwclock to force OS clock to synchronize with hardware clock and moved on with my\u00a0day. Couple of days later I connected to these machines again and noticed that the local time is behind again, but only by about 15 seconds. It looked like the local clock is drifting by about 5 seconds a day. It might not sound like much, but it also meant that it\u2019s only a matter of time before original issue happens again. Clearly someone logging in to these machines every once in a while and resetting clock would not be a good long term solution - we needed something that can automatically keep time\u00a0synchronized. That something is called NTP and all the machines already had chrony installed. However, it didn\u2019t seem to work correctly. While the commands succeeded and logs did not show any problems, the clock would just not change. After few frustrating hours I think I ruled out all possible causes at the operating system level and came to the conclusion that perhaps the NTP traffic to public servers is blocked by data center firewall. I reached out to OpenStack administrators for help and they told me that there is a blessed NTP server instance inside the data center that I should use. Once I configured chrony to use it as a source, everything finally\u00a0worked. This way browsers started to consistently report the same time as Python executors. That fixed the original issue and we did not observe any test failures caused by it\u00a0again. March 26, 2025 06:22 PM UTC RSS feed Titles Only Powered by Planet! Other Python Planets Python Summer of Code Planet Python Francophone Planet Python Argentina Planet Python Brasil Planet Python Poland Python Libraries OLPC PySoy SciPy SymPy Twisted Python/Web Planets CherryPy Django Community Plone Turbogears Other Languages Haskell Lisp Parrot Perl Ruby Databases MySQL PostgreSQL Subscriptions [OPML feed] \"Mathspp Pydon'ts\" \"Menno's Musings\" \"Michael J.T. O'Kelly\" \"Morphex's Blogologue\" \"Speno's Pythonic Avocado\" \"William's Journal\" 2degrees A. Jesse Jiryu Davis ABlog for Sphinx Aahz Abhijeet Pal Abu Ashraf Masnun Adam Pletcher Agendaless Consulting Ahmed Bouchefra Al-Ahmadgaid Asaad Alec Munro Alex Gr\u00c3\u00b6nholm Alex Morozov Alexander Limi Alexandre Conrad Alexandre Vassalotti Alexey Evseev Allison Kaptur Amjith Ramanujam AmvTek Anarcat Anatoly Techtonik Andre Roberge Andrea Grandi Andrew Dalke Andriy Kornatskyy Andy Dustman Andy R. Terrel Anna Martelli Ravenscroft Anthony Baxter Anton Belyaev Anton Bobrov Anwesha Das Ari Lamstein Armin Ronacher Artem Golubin Artem Rys Ashish Vidyarthi Astro Code School Automating OSINT Awesome Python Applications Baiju Muthukadan Bajusz Tam\u00c3\u00a1s BeDjango Ben Bass Ben Cook Ben Rousch Benjamin Peterson Benji York Bertrand Mathieu Bhavin Gandhi Bhishan Bhandari BioPython News Bit of Cheese Bojan Mihelac Brandon Rhodes BreadcrumbsCollector Brendan Scott Brett Cannon Brian Okken Bruno Oliveira Bruno Ponne / Coding The Past Bruno Rocha Caktus Consulting Group Calvin Cheng Calvin Spealman Carl Chenet Carl D\u00c3\u00bcvel Carl Trachte Carlos Eduardo de Paula Casey Duncan Catherine Devlin Ching-Hwa Yu Chris Hager Chris Miles Chris Mitchell Chris Moffitt Chris Rose Chris Warrick Christian Heimes Christian Ledermann Christian Scholz Christoph Schiessl Christoph Zwerschke CodeGrades CodeSnipers CodersLegacy Coding Diet Corey Gallon Corey Goldberg Cormoran Project Cross-Platform Command Line Tools CubicWeb Curtis Miller DSPIllustrations.com DaPythonista Daily Tech Video (Python) Dallas Fort Worth Pythoneers Dan Crosta Dan Stromberg Dan Yeaw Daniel Bader Daniel Nouri Daniel Roy Greenfeld Data Community DC Data School DataWars.io Dave Beazley David Amos David Caron David Goodger David Lindelof David MacIver David Malcolm David Szotten Davide Moro Davy Mitchell Davy Wybiral Declassed Art Denis Kurov Django Weblog Djangostars Doing Math with Python Doug Hellmann Dougal Matthews Duncan McGreggor Ed Crewe Edward K. Ream Eli Bendersky Eniram Ltd. Eray \u00c3\u0096zkural (examachine) Erik Marsja Etienne Desautels EuroPython EuroPython Society Evennia Everyday Superpowers Fabio Zadrozny Filip Wasilewski Filipe Saraiva Flavio Coelho Flavio Percoco Floris Bruynooghe Frank Wierzbicki Fran\u00c3\u00a7ois Dion Fran\u00c3\u00a7ois Marier Frederik Rietdijk From Python Import Podcast Full Stack Python Ga\u00ebl Varoquaux Georges Dubus Ghaandee on IT Giampaolo Rodola Giulio Fidente Glenn Franxman Glyph Lefkowitz Go Deh Gocept Weblog Godson Gera Graeme Cross Graham Dumpleton Graham Wheeler Grant Baillie Grant Rettke Greg Taylor Grig Gheorghiu Grzegorz \u00c5\u009aliwi\u00c5\u0084ski Guido van Rossum Gustavo Narea Gustavo Niemeyer G\u00c3\u00b6khan Sever Hernan Grecco Hilary Mason Holger Krekel Holger Peters HoloViz Hugo van Kemenade Humberto Rocha Hynek Schlawack Ian Ozsvald Ilian Iliev Import Python Inspired Python Ionel Cristian Maries IronPython-URLs IslandT Israel Fruchter Itamar Turner Trauring Ivan Velichko J. Pablo Fern\u00c3\u00a1ndez Jack Diederich Jacob Perkins Jahongir Rahmonov Jaime Buelta Jamal Moir James Bennett Janusworx Jarrod Millman Jean-Paul Calderone Jeff Bisbee Jeff Bradberry Jeff Hinrichs Jeff Shell Jeremy Epstein Jeremy Hylton Jim Fulton Joe Abbate Joe Pitz Johan Dahlin John Burns John Cook John Jacobsen John Ludhi/nbshare.io Jon Parise Jonathan Ellis Jonathan Harrington Jonathan Hartley Jonathan Street Jorgen Sch\u00c3\u00a4fer Juan Manuel Contreras Julien Danjou Julien Tayon Juri Pakaste Just a little Python Justin Mayer Kai Lautaportti Karim Elghamrawy Kay Hayen Kay Schluehr Kelly Yancey Kodnito Kogan Dev Konrad Delong Koodaamo Kristj\u00c3\u00a1n Valur J\u00c3\u00b3nsson Kriti Godey Kulbir Saini Kumar McMillan Kumar Vipin Yadav Kushal Das K\u00c3\u00a1roly Nagy LAAC Technology Laurent Szyster Leigh Honeywell Lennart Regebro Leonhard Vogt Lintel Technologies Linux Stans ListenData Logilab Low Kian Seong Luca Botti Lucas Cimon Ludovic Gasc Ludvig Ericson Luke Plant Maciej Fijalkowsk Made With Mu Mahmoud Hashemi Malthe Borch Marc Richter Marc-Andr\u00c3\u00a9 Lemburg Marcos Dione Mariatta Marius Gedminas Mark Dufour Mark McLoughlin Mark McMahon Martijn Pieters Martin Fitzpatrick Mats Kindahl Matt Layman Matthew Rocklin Matthew Rollings Matthew Wilson Matthew Wright Mattias Br\u00c3\u00a4ndstr\u00c3\u00b6m Mauveweb Michael Becker Michael Droettboom Michael Foord Michael Nelson Michal Kwiatkowski Micha\u00c5\u0082 Bultrowicz Michele Simionato Michy Alice Mike C. Fletcher Mike Driscoll Mike M\u00c3\u00bcller Mikhail Korobov Mikko Ohtamaa Mirek D\u00c5\u0082ugosz Mitchell Garnaat Mitya Sirenef Montreal Python User Group Moshe Zadka Moya Project Mozilla Web Development Muharem Hrnjadovic Mycli Nadav Samet Naomi Ceder Natan Zabkar Ned Batchelder Neil Schemenauer Nick Coghlan Nick Craig-Wood Nick Efford Nick Janetakis Nicola Iarocci Nicolas Dumazet Nicolas Paris Nigel Babu Nikola Nikolaos Diamantis Not Invented Here Nsukami Patrick Obey the Testing Goat Ofosos Omaha Python Users Group Ond\u0159ej \u010cert\u00edk Paolo Melchiorre Pathwright Patrice Neff Patrick Kennedy Paul Everitt Paul Harrison Paul Redman Pawe\u00c5\u0082 Fertyk Pedro Lima Peter Bengtsson Peter Eisentraut Peter Fankh\u00c3\u00a4nel Peter Harkins Peter Hoffmann Phil Hassey Philip Jenvey Philipp von Weitershausen Philippe Normand Phillip J. Eby Podcast.__init__ Polyglot.Ninja() Possbility and Probability Pradeep Gowda Pranav Pandey Praveen Gollakota Programiz Programming Ideas With Jake Przemys\u00c5\u0082aw Ko\u00c5\u0082odziejczyk PyATL Bytecode PyBites PyCharm PyCoder\u00e2\u0080\u0099s Weekly PyCon PyPodcats PyPy PyTennessee Python 4 Kids Python 411 Podcast Python Advocacy Python Anywhere Python Bytes Python Celery - Weekly Celery Tutorials and How-tos Python Circle Python Data Python Diary Python Docs Editorial Board Python Does What?! Python Engineering at Microsoft Python GUIs Python Insider Python Morsels Python People Python Piedmont Triad User Group Python Pool Python Software Foundation Python Sweetness Python User Groups Python for Beginners Python on Karan Python with Myo Python(x,y) News PythonClub - A Brazilian collaborative blog about Python PythonDebugging.com Pythonicity Pythonology Python\u00e2\u0087\u0092Speed P\u00c3\u00a9ter Szab\u00c3\u00b3 P\u00c3\u00a9ter Zsoldos Quansight Labs Blog R David Murray RMOTR Ralph Bean Ram Rachum Randell Benavidez Randle Taylor Randy Zwitch Raymond Hettinger Read the Docs Real Python Red Hat Developers Rene Dudfield Reuven Lerner Richard Tew Richard Wall Rickard Lindberg Rishi Maker Rob Galanakis Robert Collins Robert Zaremba Robin Parmar Robin Wilson Rodrigo Ara\u00c3\u00baj RoseHosting Blog Ruslan Spivak Ryan Cox S. Lott S. R. Krishnan SDJournal SPE Weblog STX Next Salim Fadhley Sandipan Dey Sandro Tosi Sean McGrath Sebastian P\u00c3\u00b6lsterl Sebastian Witowski Selena Deckelmann Senthil Kumaran Seth Michael Larson Shannon -jj Behrens ShiningPanda Simeon Franklin Simeon Visser Simon Simon Brunning Simon Wittber Simple is Better Than Complex SoftFormance Speed Matters Spike ekipS Spyder IDE Stack Abuse Stanislas Morbieu Starzel.de Stefan Behnel Stefan Scherfke Stefanie Molin Stein Magnus Jodal Stephen Ferg Steve Holden Steven Klass Stuart Gordon Reid St\u00c3\u00a9phane Wirtel Sumana Harihareswara - Cogito, Ergo Sumana Suresh Dasari/Tutlane.com Swisscom ICT Talk Python to Me Taylor Edmiston TechBeamers Python Techiediaries - Django Terri Oda Terry Jones Test and Code TestDriven.io The Data Scientist The Digital Cat The Lunar Cowboy The No Title\u00c2\u00ae Tech Blog The Occasional Occurrence The Open Sourcerer The Parcon Blog The Python Coding Blog The Python Papers The Python Show The Three of Wands Thibauld Nion ThisHosting.Rocks Thomas Guest Thomas Vander Stichele Tibo Beijen Tim Arnold / reachtim Tim Gilbert Tim Knapp Tim Lesher Tobias Ivarsson Tom Christie Tomasz Ducin Toma\u00c5\u00be Muraus Tomer Filiba Tony Breyal Toshio Kuratomi Travis Oliphant Trey Hunner Tryton News Turnkey Linux Twisted Matrix Labs TypeThePipe V.S. Babu Varun Nischal Vasudev Ram Vinay Sajip Vinay Sajip (Logging) Vinayak Mehta Virgil Dupras Vladimir Peri\u00c4\u0087 Wayne Witzel Weekly Python Chat Weekly Python StackOverflow Report Wes Mason Wesley Chun Will Kahn-Greene Will McGugan Will Pierce William Minchin William Reade Wing Tips Wingware Wyatt Baldwin Yaniv Aknin Yann Larriv\u00c3\u00a9e Yuval Greenfield Zaki Akhmad Zato Blog Zero to Mastery Zero-with-Dot (Oleg \u00c5\u00bbero) ZeroDB bottlepy-dev codeboje death and gravity eGenix.com hypothesis.works articles kdev-python meejah.ca nl-project pgcli py.CheckIO pygame pythonwise qutebrowser development blog saaj/recollection scikit-learn testmon tryexceptpass \u00c3\u0089ric Araujo \u00c5\u0081ukasz Langa To request addition or removal: Open an issue on github"
  },
  "http://www.web2py.com/": {
    "url": "http://www.web2py.com/",
    "content": "Home About Download Docs & Resources Support Contributors web2py 2.27.1 is the last version of web2py supporting python 2.7 Future versions of web2py will require 3.9 or greater. While we will continue some limited support for web2py, for future development, we no longer recommend it. We strongly recommend instead web2py's successor: py4web . It is smaller and 10x faster. It uses the same pydal and the same templates as web2py. It includes better Auth, Form, and Grid. Porting web2py apps to py4web is easy. Ask for help on the py4web google group . Web Framework Free open source full-stack framework for rapid development of fast, scalable, secure and portable database-driven web-based applications. Written and programmable in Python (version 3 and 2.7). Current version: 3.0.11-stable+timestamp.2024.12.28.14.24.26 ( LGPLv3 License ) Download Now Quick Examples Try it now online Sites Powered by web2py Batteries Included Everything you need in one package including fast multi-threaded web server, SQL database and web-based interface. No third party dependencies but works with third party tools . Web-Based IDE Create, modify, deploy and manage application from anywhere using your browser. One web2py instance can run multiple web sites using different databases. Try the interactive demo . Extensive Docs Start with some quick examples , then read the manual and the Sphinx docs , watch videos , and join a user group for discussion. Take advantage of the layouts , plugins , appliances , and recipes . Copyright @ 2016 - Powered by Web2py"
  },
  "https://dearpygui.readthedocs.io/en/latest/": {
    "url": "https://dearpygui.readthedocs.io/en/latest/",
    "content": "Dear PyGui\u2019s Documentation \u2014 Dear PyGui  documentation Dear PyGui About DPG What & Why Project Information Tutorials 1. First Steps 2. DPG Structure Overview 3. Item Usage 4. Tips & More Resources Documentation Render Loop Viewport Primary Window IO, Handlers, State Polling Item Creation Tag System Item Configuration Item Callbacks Values Containers & Context Managers Container Slots & Children Container Stack Drawing-API File & Directory Selector Filter Set Fonts Init Files Menu Bar Node Editor Plots Popups Simple Plots Staging Tables Textures & Images Themes Tooltips API Reference dearpygui.dearpygui More Showcase Video Tutorials Glossary Dear PyGui \u00bb Dear PyGui\u2019s Documentation View page source Dear PyGui\u2019s Documentation \u00b6 About DPG \u00b6 Dear PyGui is an easy-to-use, dynamic, GPU-Accelerated, cross-platform graphical\nuser interface toolkit(GUI) for Python. It is \u201cbuilt with\u201d Dear ImGui . Features include traditional GUI elements such as buttons, radio buttons,\nmenus and various methods to create a functional layout. Additionally, DPG has an incredible assortment of dynamic\nplots, tables, drawings, debugger, and multiple resource viewers. DPG is well suited for creating simple user interfaces\nas well as developing complex and\ndemanding graphical interfaces. DPG offers a solid framework for developing scientific,\nengineering, gaming, data science and other applications that require fast and interactive interfaces. Quick Start \u00b6 If you\u2019re ready to start using DPG visit\nthe First Steps in tutorials. The Tutorials will provide a great overview\nand links to each topic in the API Reference for more detailed reading. However, use the API reference\nfor the most detailed documentation on any specific topic. Documentation \u00b6 Live Demo: A mostly complete showcase of DPG can be found by running the show_demo command in the dearpygui.demo module. Internal Documentation: Run show_documentation API Reference Guide: Online API Reference More \u00b6 Showcase Video Tutorials Next \u00a9 Copyright 2025, Jonathan Hoffstadt and Preston Cothren. Built with Sphinx using a theme provided by Read the Docs ."
  },
  "https://github.com/python/pythondotorg/issues": {
    "url": "https://github.com/python/pythondotorg/issues",
    "content": "GitHub \u00b7 Where software is built Skip to content Navigation Menu Toggle navigation Sign in Product GitHub Copilot Write better code with AI GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert python / pythondotorg Public Notifications You must be signed in to change notification settings Fork 616 Star 1.5k Code Issues 164 Pull requests 24 Actions Projects 1 Security Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights Preview Issues Search Issues is : issue state : open is:issue state:open Clear filter Search Labels Milestones New issue Search results Open Closed Enhancement: Downloads page: Add latest patch release column enhancement This is an improvement to existing code or configuration This is an improvement to existing code or configuration Status: Open. # 2701 In python/pythondotorg; \u00b7 srittau opened on Mar 17, 2025 Bug: downloads page is broken bug This is a bug! This is a bug! Status: Open. # 2696 In python/pythondotorg; \u00b7 rafrafek opened on Feb 11, 2025 \"Latest news\" should link to articles on blog.python.org not pythoninsider.blogspot.com bug This is a bug! This is a bug! Status: Open. # 2685 In python/pythondotorg; \u00b7 hugovk opened on Jan 14, 2025 Docs: Multiple (inconsistent) lists of PSF Code of Conduct Work Group members Status: Open. # 2679 In python/pythondotorg; \u00b7 JesseWeinstein opened on Dec 23, 2024 Bug: Resolutions in PSF minutes not listed on Resolutions page bug This is a bug! This is a bug! Status: Open. # 2677 In python/pythondotorg; \u00b7 JesseWeinstein opened on Dec 23, 2024 Bug: ASCII range mentioned as U+0001..U+007F, rather than U+0000..U+007F bug This is a bug! This is a bug! Status: Open. # 2674 In python/pythondotorg; \u00b7 ezequiel-garzon opened on Dec 7, 2024 Docs: Add Sigstore to python.org/downloads Status: Open. # 2671 In python/pythondotorg; \u00b7 hugovk opened on Dec 4, 2024 Bug: Redirect pythoninsider.blogspot.com to blog.python.com bug This is a bug! This is a bug! Status: Open. # 2662 In python/pythondotorg; \u00b7 hugovk opened on Nov 26, 2024 Bug: <title>News Letter Subscription form is not working bug This is a bug! This is a bug! Status: Open. # 2658 In python/pythondotorg; \u00b7 Abdullah-Nadir opened on Nov 20, 2024 Enhancement: <title> Docs Recommended Example enhancement This is an improvement to existing code or configuration This is an improvement to existing code or configuration Status: Open. # 2654 In python/pythondotorg; \u00b7 reda929 opened on Nov 8, 2024 Bug: Dead links on page Python Distutils-SIG: Documentation bug This is a bug! This is a bug! Status: Open. # 2646 In python/pythondotorg; \u00b7 quentinboudinel opened on Oct 16, 2024 Bug: sponsor application form is not found and  the PSF Sponsorship Prospectus is not there. bug This is a bug! This is a bug! Status: Open. # 2645 In python/pythondotorg; \u00b7 Danuragtiwari opened on Oct 15, 2024 Footer \u00a9 2025 GitHub,\u00a0Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can\u2019t perform that action at this time."
  },
  "https://psfmember.org/civicrm/contribute/transact?reset=1&id=2": {
    "url": "https://psfmember.org/civicrm/contribute/transact?reset=1&id=2",
    "content": "Donation for the PSF \u2013 Python Software Foundation Skip to content Python Software Foundation Login Register Back Donation for the PSF About the PSF The Python Software Foundation is a 501(c)(3) non-profit organization dedicated to the Python programming language. Your donation helps sustain a vibrant and diverse Python community and shows your support for Open Source. We rely on memberships, individual donations,\u00a0and corporate sponsorships to award grants for regional Python conferences, sprints, local Meetups, and other community events, as well as to support Python documentation, fiscal sponsorships, and community projects such as: Python Developer's Guide Issue Tracker PyPI - the Python Package Index Contribution Amount $ 10.00 $ 25.00 $ 50.00 $ 100.00 $ 150.00 $ 250.00 $ 500.00 $ 1,000.00 $ 5,000.00 Other Amount Other Amount  $ Total Amount I want to contribute this amount every month year for installments You can specify the number of installments, or you can leave the number of installments blank if you want to make an open-ended commitment. In either case, you can choose to cancel at any time. Email Address * Payment Options Payment Method PayPal Website Payment Standard I will send payment by check, ACH, or wire. Contact information is required for tax reporting purposes and will be shared only with the US government. Name and Address Required First Name * Middle Name Last Name * Street Address (Home) * City (Home) * State (Home) * - select State/Province - Alabama Alaska American Samoa Arizona Arkansas Armed Forces Americas Armed Forces Europe Armed Forces Pacific California Colorado Connecticut Delaware District of Columbia Florida Georgia Guam Hawaii Idaho Illinois Indiana Iowa Kansas Kentucky Louisiana Maine Maryland Massachusetts Michigan Minnesota Mississippi Missouri Montana Nebraska Nevada New Hampshire New Jersey New Mexico New York North Carolina North Dakota Northern Mariana Islands Ohio Oklahoma Oregon Pennsylvania Puerto Rico Rhode Island South Carolina South Dakota Tennessee Texas United States Minor Outlying Islands Utah Vermont Virgin Islands Virginia Washington West Virginia Wisconsin Wyoming Country (Home) * - select Country (Home) - United States Afghanistan \u00c5land Islands Albania Algeria American Samoa Andorra Angola Anguilla Antarctica Antigua and Barbuda Argentina Armenia Aruba Australia Austria Azerbaijan Bahamas Bahrain Bangladesh Barbados Belarus Belgium Belize Benin Bermuda Bhutan Bolivia Bonaire, Saint Eustatius and Saba Bosnia and Herzegovina Botswana Bouvet Island Brazil British Indian Ocean Territory Brunei Darussalam Bulgaria Burkina Faso Burundi Cabo Verde Cambodia Cameroon Canada Cape Verde Cayman Islands Central African Republic Chad Chile China Christmas Island Cocos (Keeling) Islands Colombia Comoros Congo, Republic Of The Congo, The Democratic Republic of the Cook Islands Costa Rica C\u00f4te d\u2019Ivoire Croatia Cuba Cura\u00e7ao Cyprus Czech Republic Denmark Djibouti Dominica Dominican Republic Ecuador Egypt El Salvador Equatorial Guinea Eritrea Estonia Eswatini Ethiopia Falkland Islands (Malvinas) Faroe Islands Fiji Finland France French Guiana French Polynesia French Southern Territories Gabon Gambia Georgia Germany Ghana Gibraltar Greece Greenland Grenada Guadeloupe Guam Guatemala Guernsey Guinea Guinea-Bissau Guyana Haiti Heard Island and McDonald Islands Holy See (Vatican City State) Honduras Hong Kong Hungary Iceland India Indonesia Iran, Islamic Republic of Iraq Ireland Isle of Man Israel Italy Jamaica Japan Jersey Jordan Kazakhstan Kenya Kiribati Korea, Democratic People's Republic of Korea, Republic of Kosovo Kuwait Kyrgyzstan Lao People's Democratic Republic Latvia Lebanon Lesotho Liberia Libya Liechtenstein Lithuania Luxembourg Macao Madagascar Malawi Malaysia Maldives Mali Malta Marshall Islands Martinique Mauritania Mauritius Mayotte Mexico Micronesia (Federated States of) Micronesia, Federated States of Moldova Monaco Mongolia Montenegro Montserrat Morocco Mozambique Myanmar Namibia Nauru Nepal Netherlands New Caledonia New Zealand Nicaragua Niger Nigeria Niue Norfolk Island North Macedonia Northern Mariana Islands Norway Oman Pakistan Palau Palestine, State of Panama Papua New Guinea Paraguay Peru Philippines Pitcairn Poland Portugal Puerto Rico Qatar Reunion Romania Russian Federation Rwanda Saint Barth\u00e9lemy Saint Helena Saint Kitts and Nevis Saint Lucia Saint Martin (French part) Saint Pierre and Miquelon Saint Vincent and the Grenadines Samoa San Marino Sao Tome and Principe Saudi Arabia Senegal Serbia Serbia and Montenegro Seychelles Sierra Leone Singapore Sint Maarten (Dutch Part) Slovakia Slovenia Solomon Islands Somalia South Africa South Georgia and the South Sandwich Islands South Sudan Spain Sri Lanka Sudan Suriname Svalbard and Jan Mayen Sweden Switzerland Syrian Arab Republic Taiwan Tajikistan Tanzania, United Republic of Thailand Timor-Leste Togo Tokelau Tonga Trinidad and Tobago Tunisia Turkey Turkmenistan Turks and Caicos Islands Tuvalu Uganda Ukraine United Arab Emirates United Kingdom United States Minor Outlying Islands Uruguay Uzbekistan Vanuatu Venezuela Viet Nam Virgin Islands, British Virgin Islands, U.S. Wallis and Futuna Western Sahara Yemen Zambia Zimbabwe Postal Code (Home) Review your contribution Thank you for supporting the Python Software Foundation! Payments are processed by PayPal, but may be made either with your credit card or your existing PayPal account.\u00a0 If you wish to use a credit card, once on the PayPal site click the link \"Don't have a PayPal account?\", which will take you to a credit card form.\u00a0 A PayPal account is not required. For your security, this website and the PSF do not acquire or retain any of your credit card data. Following the transaction, you will receive both a PayPal receipt and/or our formal acknowledgment of your contribution. Please whitelist psfmember.org and check your spam bins if you don't receive the acknowledgment from the PSF. Log in Python Software Foundation , Proudly powered by WordPress. Login Register"
  },
  "https://wiki.python.org/moin/PythonEventsCalendar#Submitting_an_Event": {
    "url": "https://wiki.python.org/moin/PythonEventsCalendar#Submitting_an_Event",
    "content": "PythonEventsCalendar - Python Wiki Search: PythonEventsCalendar PythonEventsCalendar FrontPage RecentChanges FindPage HelpContents PythonEventsCalendar Page Immutable Page Comments Info Attachments More Actions: Raw Text Print View Delete Cache ------------------------ Check Spelling Like Pages Local Site Map ------------------------ Rename Page Delete Page ------------------------ ------------------------ Remove Spam Revert to this revision ------------------------ SlideShow User Login Python Events Calendar Introduction The Python events calendar is a combination of Google calendars maintained by the Python Calendar Team and published on the following sites: http://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) https://twitter.com/PythonEvents (@ PythonEvents ) http://legacy.python.org/ (in the side bar on the left of all pages) As of January 2020, we have more then 520 events listed and the calendars are proving to be a really useful resource for the Python community. The events are also listed on a map mashup created by Luis Miguel Morillas: http://lmorillas.github.io/python_events/ Here's a snapshot showing all events from Jan 2012 - March 2016: Contents Python Events Calendar Introduction Submitting an Event Bulk Submission of Events Available Calendars iCal Downloads RSS Feeds Twitter Feed Embedding Calendars Known sites embedding the calendars Python Calendar Team Mailing List Guidelines for entries General Requirements Calendar Choice Notes regarding calendar entries Calendar embedding code Resources Submitting an Event If you would like to get new events listed on these calendars, please write to events@python.org using the following email template: Please add the following event: * name of the event: * type of event: * focus on Python: * approximate number of attendees: * location (incl. country): * dates/times/recurrence (incl. time zone): * HTML link using the format <a href=\"http://url/\">name of the event</a>: Please mention: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) the location (venue address, including city and country ) the dates/times (including the time zone) a link with more details for the event (using HTML format \" <a\u00a0href=\"http://url/\">name\u00a0of\u00a0the\u00a0event</a> \"); URL shorteners are not permitted . For recurring events, please also include the recurrence information, e.g. \"monthly, every second Thursday\". Notes: For online events, please use \"Online Event\" as location. For training sessions, courses, webinars and similar type of events , please post your event on the PythonTraining page. We currently do not have a calendar for these. Please leave at least 4 weeks notice when submitting events. The calendar team is volunteer driven. While we try to add new events swiftly, we cannot guarantee response times. Bulk Submission of Events In some cases, the email format may not be suitable, e.g. if you want to submit several larger events in one go. For those cases, please list the events in the email sent to events@python.org , including the following details: the name of the event (including the user group name for user group events) type of event (conference, bar camp, sprint, user group meeting, etc.) focus on Python and approximate size (number of attendees) optional: a link with more details for the event for each event, or as summary, so that we can tell which type of event you want entered and whether they are suitable for our calendars. Please attach the event data as iCal file events.ics using the following entry format: title: name\u00a0of\u00a0the\u00a0event start and end dates: start day and end day of the event, entered as \"all day events\" for larger events, or as start and end date and time in the local timezone for smaller single day events location: city,\u00a0[state,]\u00a0country description: <a\u00a0href=\"http://url/\">name\u00a0of\u00a0the\u00a0event</a> The same notes as above apply to bulk submissions. Available Calendars Python Events Calendar - mostly meant for conferences and larger local events Calendar ID: j7gov1cmnqr9tvg14k621j7t5c@group.calendar.google.com Python User Group Calendar - meant for user group events and other smaller local events Calendar ID: 3haig2m9msslkpf2tn1h56nn9g@group.calendar.google.com Both calendars combined - in a single calendar widget iCal Downloads Python Events Calendar Python User Group Calendar RSS Feeds Note: Google has switched off calendar RSS feeds on Nov 18 2015, so these links no longer work. Python Events Calendar Python User Group Calendar Twitter Feed @PythonEvents This Twitter account automatically gets all new entries from both calendars as tweets. The triggering is setup using IFTTT . Note that changes to the calendar entries are not reported on the Twitter feed. This appears to be a limitation of the IFTTT trigger. Embedding Calendars If you'd like to embed the calendar into your site, please ping us at events@python.org before doing so. We'd like to keep a list of sites where the calendars are displayed. You can find the embedding code further below on this page. Known sites embedding the calendars https://www.python.org/ (in the events box on the front page and on the events calendar pages) http://www.pycon.org/ (calendar widget under the conference listing) http://legacy.python.org/ (in the side bar on the left of all pages) https://pythonz.net/events (a Russian site) Python Calendar Team The following people are active team members with have admin rights to the calendars: Marc-Andre Lemburg These are our volunteers with editing rights: Abdur-Rahmaan Janhangeer Helio Loureiro Olivia Sauls Mayank Pathak Giri Prasath Dinakaran If you want to join the team, please sign up to the python-events ML and send a short intro about yourself together with a Google compatible email address to the list. Thanks. The following people are inactive team members: Sergey Sokolov Anton Caceres Marcelo Elizeche Land\u00f3 Richard Jones Mike M\u00fcller Tarek Ziade Tetsuya Morimoto Skip Montanaro Tim Golden Mats Wichmann Laura Creighton Carol Willing Oier Etxaniz Mailing List The team uses the python-events mailing list for discussion and to process events. The events@python.org address is an alias for the python-events mailing list. https://mail.python.org/mailman/listinfo/python-events As team member, it is vital for you to subscribe to this list, otherwise you won't get the incoming event notifications. Guidelines for entries In order to make the decision of whether to add an event and where to add it easier, we've setup a few guidelines: General Requirements Events have to have some focus on Python: The event should either target Python, a project written in Python, or showcase Python in some form. Examples are Python conferences, conferences which have a Python track or tutorial, conferences at which Python is presented in some form. The same goes for conferences which target a project written mostly in Python (e.g. Plone, Django, OpenStack , etc.) and for other events such as sprints. The calendars should only list the events themselves. CFP deadlines, registration openings or similar announcements should not be listed in the calendars. For online events, such as PyWeek game jams, only a reasonably short events (no longer than two weeks) should be added as single event. For longer events, it's better to just add the start and end date as separate events to the calendar, or even just the start date and then mention the end in the description. The same criteria for calendars apply to online events as well. Please add these using Online or Online\u00a0Event as location. For hybrid events (both in-person and virtual), mentioning and\u00a0Online after the in-person location is possible as well. Training events, conferences which don't have a strong Python focus or offer a decent sized Python track, should not be listed on the calendars. Calendar Choice Python Events Calendar: This calendar should only receive entries for conferences of at least around 100 attendees, which at least around a 3rd non-local attendees. Smaller events with at least around 30 attendees such as sprints, barcamps, PyDays or smaller unconferences may also be added to this calendar if they are scheduled as separate event, will have a significant impact and reach out to larger regions. Examples: PyCon conferences, OSCON, Django conferences, Plone conference, Need-for-speed sprints, Python BarCamps/Unconferences/etc. Python User Group Calendar: This calendar is meant for user group activities which are open to Python people from outside the group (new prospective members and visitors from out of town). It is not meant for user group internal events. Examples: monthly local user group meetings, project sprints that are open for non-group members, workshops organized by user groups, Django Girls events. Notes regarding calendar entries Some notes regarding entries for the admins: Please add the conference/event year to the title, if available. For user group meetings or other events that occur more often that's probably not necessary. For conference events please use \"All day\" entries (even for one day events), for user group events please add the start time and end time, if known. Full day user group events can also be added as \"All day\" event to give them a little more attention in the calendar. We use this for e.g. Django Girls workshops or similar full day events. Please include the location as \"City, Country\", not with the full address, since this can often be inaccurate and confused the Google maps mashup. For online events, please use \"Online\" or \"Online from City, Country\" (not sure whether this will work with mapping tool, but worth a try). Please add a link to the event as description. We have standardized on using HTML links for this, e.g. <a\u00a0href=\"http://www.pycon.fr/2012/>PyCon\u00a0FR\u00a02012</a> . Note that the Google calendar UI was changed some time ago to no longer accept HTML as input. Instead, you have to paste the HTML link directly into the description box. Calendar interfaces using iCal typically require adding the full HTML. Please test the provided link and make sure that it's not a URL shortener URL or one which redirects to an unrelated website. We have had situations where the added events later linked to unrelated or spam pages. For familiar sounding event names, please check whether the requests are genuine. In case of naming collisions, try to get the organizers to talk to each other and sort out the issue. Please don't add more than the link to the description. If an event does not have a website, it's fine to add a one line text description. Background: The entries should not be used as advertisement text for events, only as reference. Please don't select an event color. People who subscribe to the calendars will have their own color preferences, so it's better to leave the default color set for all events. Reminders should not be setup for the events. They can be annoying for users subscribing to the calendars. We've always used \"Show me as: Available\" for new entries. No idea whether that matters or not. Please select \"Privacy: Default\" for new entries. This makes the entries public, since that's the default setting. All calendar admins can invite more people as calendar admins. When doing so, please add the new admins to the above list and ping the team by writing to events@python.org and also to get their email address added to the python-events mailing list. Calendar embedding code This iframe code is used on pycon.org to display the calendar: <iframe src=\"https://www.google.com/calendar/embed?showTitle=0&amp;showCalendars=0&amp;height=400&amp;wkst=2&amp;bgcolor=%23FFFFFF&amp;src=j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com&amp;color=%23125A12&amp;src=3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com&amp;color=%232F6309&amp;ctz=Europe%2FLondon\" style=\" border-width:0 \" width=\"800\" height=\"450\" frameborder=\"0\" scrolling=\"no\"> <a href=\"https://www.google.com/calendar/ical/j7gov1cmnqr9tvg14k621j7t5c%40group.calendar.google.com/public/basic.ics\">Python Events iCal Calendar</a><br/> <a href=\"https://www.google.com/calendar/ical/3haig2m9msslkpf2tn1h56nn9g%40group.calendar.google.com/public/basic.ics\">Python User Group iCal Calendar</a> </iframe> Resources Google Calendar API v2 Atom Reference . This describes the available RSS feed options available on the Google calendar feed links. PythonEventsCalendar  (last edited 2023-11-29 13:59:23 by MarcAndreLemburg ) MoinMoin Powered Python Powered GPL licensed Valid HTML 4.01 Unable to edit the page? See the FrontPage for instructions."
  },
  "https://pyfound.blogspot.com/2025/03/psf-dsa-ewa-jodlowska.html": {
    "url": "https://pyfound.blogspot.com/2025/03/psf-dsa-ewa-jodlowska.html",
    "content": "Python Software Foundation News: PSF Distinguished Service Award Granted to Ewa Jodlowska News from the Python Software Foundation Thursday, March 06, 2025 PSF Distinguished Service Award Granted to Ewa Jodlowska Ewa Jodlowska, former PSF Executive Director and Board Member, has been recognized with the PSF\u2019s Distinguished Service Award. For over a decade, Ewa played a pivotal role in transforming the PSF from a volunteer-driven group into a thriving, professional organization. Thanks to her hard work and vision, the PSF now has paid staff, solid funding, and the ability to support the global Python community like never before. The PSF\u2019s Distinguished Service Award ( DSA ) is granted to individuals who make sustained exemplary contributions to the Python community. Each award is voted on by the PSF Board and they are looking for people whose impact has positively and significantly shaped the Python world. Ewa\u2019s work with the Python community very much exemplifies the ethos of \u201cbuild the community you want to see.\u201d After receiving the award, Ewa shared, \u201cReflecting on the many years I've dedicated to working with the Python community, I am filled with fond memories and a deep sense of accomplishment. The relationships built and the collaborative efforts made over these years have been invaluable. Knowing that my contributions have played a foundational role in the PSF\u2019s ongoing success is incredibly gratifying.\u201d Today, the PSF can hire developers, manage a vital grants program, and oversee the infrastructure that keeps Python (and its vast library ecosystem) freely accessible to everyone worldwide. Ewa\u2019s leadership has left an incredible mark on the PSF\u2019s history, and her work has set us up for a future that once felt unimaginable. Curious about previous recipients of the DSA or wondering how to nominate someone? Check out the PSF\u2019s Distinguished Service Awards page . The PSF also bestows Community Service Awards to recognize outstanding community members\u2013 if you\u2019d like to learn more about CSAs and how they differ from DSAs, check out our Service Awards given by the PSF: what are they and how they differ blog post . Posted by Marie Nordin at 3/06/2025 08:40:00 AM Newer Post Older Post Home Mission The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Python Software Foundation Grants Program Membership Awards Meeting Minutes PSF Sponsors A big thank you to the above PSF sponsors for supporting our mission! Blog Archive \u25bc 2025 (6) \u25bc March (4) PSF Distinguished Service Award Granted to Thomas ... PSF Distinguished Service Award Granted to Van Lin... PSF Distinguished Service Award Granted to Ewa Jod... Announcing Python Software Foundation Fellow Membe... \u25ba February (1) \u25ba January (1) \u25ba 2024 (58) \u25ba December (6) \u25ba November (5) \u25ba October (3) \u25ba September (2) \u25ba August (4) \u25ba July (7) \u25ba June (16) \u25ba May (4) \u25ba April (2) \u25ba March (2) \u25ba February (3) \u25ba January (4) \u25ba 2023 (37) \u25ba December (1) \u25ba November (3) \u25ba October (3) \u25ba September (2) \u25ba August (3) \u25ba June (5) \u25ba May (12) \u25ba April (2) \u25ba March (1) \u25ba February (3) \u25ba January (2) \u25ba 2022 (35) \u25ba December (2) \u25ba November (3) \u25ba October (2) \u25ba July (3) \u25ba June (6) \u25ba May (12) \u25ba April (2) \u25ba March (3) \u25ba February (1) \u25ba January (1) \u25ba 2021 (42) \u25ba December (3) \u25ba November (4) \u25ba October (3) \u25ba September (2) \u25ba August (1) \u25ba July (2) \u25ba June (4) \u25ba May (12) \u25ba April (5) \u25ba March (1) \u25ba February (4) \u25ba January (1) \u25ba 2020 (51) \u25ba December (8) \u25ba November (3) \u25ba October (3) \u25ba September (4) \u25ba July (4) \u25ba June (2) \u25ba May (10) \u25ba April (11) \u25ba March (4) \u25ba January (2) \u25ba 2019 (45) \u25ba December (3) \u25ba November (3) \u25ba October (3) \u25ba September (4) \u25ba August (3) \u25ba July (3) \u25ba June (5) \u25ba May (11) \u25ba April (1) \u25ba March (2) \u25ba February (5) \u25ba January (2) \u25ba 2018 (31) \u25ba December (5) \u25ba November (1) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (3) \u25ba June (3) \u25ba May (5) \u25ba April (2) \u25ba March (2) \u25ba February (1) \u25ba January (2) \u25ba 2017 (32) \u25ba December (3) \u25ba November (2) \u25ba October (4) \u25ba September (6) \u25ba August (2) \u25ba July (2) \u25ba May (2) \u25ba April (3) \u25ba March (2) \u25ba February (2) \u25ba January (4) \u25ba 2016 (27) \u25ba December (2) \u25ba October (2) \u25ba August (4) \u25ba July (1) \u25ba June (3) \u25ba May (6) \u25ba April (4) \u25ba March (2) \u25ba January (3) \u25ba 2015 (67) \u25ba December (2) \u25ba November (4) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (4) \u25ba June (6) \u25ba May (4) \u25ba April (13) \u25ba March (14) \u25ba February (9) \u25ba January (4) \u25ba 2014 (14) \u25ba October (1) \u25ba September (1) \u25ba August (2) \u25ba July (1) \u25ba May (1) \u25ba April (1) \u25ba March (2) \u25ba February (3) \u25ba January (2) \u25ba 2013 (18) \u25ba November (1) \u25ba September (2) \u25ba August (1) \u25ba July (1) \u25ba June (1) \u25ba April (1) \u25ba March (5) \u25ba February (3) \u25ba January (3) \u25ba 2012 (21) \u25ba December (3) \u25ba November (2) \u25ba October (2) \u25ba September (1) \u25ba August (1) \u25ba July (1) \u25ba June (2) \u25ba May (4) \u25ba April (1) \u25ba March (1) \u25ba January (3) \u25ba 2011 (55) \u25ba December (2) \u25ba November (1) \u25ba October (7) \u25ba September (5) \u25ba August (2) \u25ba July (1) \u25ba June (3) \u25ba May (8) \u25ba April (8) \u25ba March (13) \u25ba February (2) \u25ba January (3) \u25ba 2010 (35) \u25ba December (4) \u25ba November (1) \u25ba October (3) \u25ba September (2) \u25ba August (1) \u25ba July (8) \u25ba June (6) \u25ba May (2) \u25ba April (4) \u25ba March (2) \u25ba January (2) \u25ba 2009 (21) \u25ba December (1) \u25ba October (1) \u25ba September (6) \u25ba August (4) \u25ba July (4) \u25ba June (1) \u25ba May (2) \u25ba April (1) \u25ba February (1) \u25ba 2008 (23) \u25ba December (1) \u25ba November (1) \u25ba October (1) \u25ba August (3) \u25ba July (1) \u25ba May (3) \u25ba April (1) \u25ba March (5) \u25ba February (4) \u25ba January (3) \u25ba 2007 (26) \u25ba December (3) \u25ba November (2) \u25ba October (6) \u25ba September (1) \u25ba August (1) \u25ba July (1) \u25ba June (2) \u25ba May (1) \u25ba April (1) \u25ba March (2) \u25ba February (3) \u25ba January (3) \u25ba 2006 (39) \u25ba December (3) \u25ba November (4) \u25ba October (5) \u25ba September (4) \u25ba August (4) \u25ba July (3) \u25ba May (7) \u25ba April (6) \u25ba March (3) Powered by Blogger ."
  },
  "http://tornadoweb.org": {
    "url": "http://tornadoweb.org",
    "content": "Tornado Web Server \u2014 Tornado 6.4.2 documentation Tornado 6.4.2 User\u2019s guide Web framework HTTP servers and clients Asynchronous networking Coroutines and concurrency Integration with other services Utilities Frequently Asked Questions Release notes Tornado Tornado Web Server View page source \u00b6 Tornado is a Python web framework and\nasynchronous networking library, originally developed at FriendFeed .  By using non-blocking network I/O, Tornado\ncan scale to tens of thousands of open connections, making it ideal for long polling , WebSockets , and other\napplications that require a long-lived connection to each user. Quick links \u00b6 Current version: 6.4.2 ( download from PyPI , release notes ) Source (GitHub) Mailing lists: discussion and announcements Stack Overflow Wiki Hello, world \u00b6 Here is a simple \u201cHello, world\u201d example web app for Tornado: import asyncio import tornado class MainHandler ( tornado . web . RequestHandler ): def get ( self ): self . write ( \"Hello, world\" ) def make_app (): return tornado . web . Application ([ ( r \"/\" , MainHandler ), ]) async def main (): app = make_app () app . listen ( 8888 ) await asyncio . Event () . wait () if __name__ == \"__main__\" : asyncio . run ( main ()) This example does not use any of Tornado\u2019s asynchronous features; for\nthat see this simple chat room . Threads and WSGI \u00b6 Tornado is different from most Python web frameworks. It is not based\non WSGI , and it is\ntypically run with only one thread per process. See the User\u2019s guide for more on Tornado\u2019s approach to asynchronous programming. While some support of WSGI is available in the tornado.wsgi module,\nit is not a focus of development and most applications should be\nwritten to use Tornado\u2019s own interfaces (such as tornado.web )\ndirectly instead of using WSGI. In general, Tornado code is not thread-safe. The only method in\nTornado that is safe to call from other threads is IOLoop.add_callback . You can also use IOLoop.run_in_executor to\nasynchronously run a blocking function on another thread, but note\nthat the function passed to run_in_executor should avoid\nreferencing any Tornado objects. run_in_executor is the\nrecommended way to interact with blocking code. asyncio Integration \u00b6 Tornado is integrated with the standard library asyncio module and\nshares the same event loop (by default since Tornado 5.0). In general,\nlibraries designed for use with asyncio can be mixed freely with\nTornado. Installation \u00b6 pip install tornado Tornado is listed in PyPI and\ncan be installed with pip . Note that the source distribution\nincludes demo applications that are not present when Tornado is\ninstalled in this way, so you may wish to download a copy of the\nsource tarball or clone the git repository as well. Prerequisites : Tornado 6.3 requires Python 3.8 or newer. The following\noptional packages may be useful: pycurl is used by the optional tornado.curl_httpclient .  Libcurl version 7.22 or higher is required. pycares is an alternative\nnon-blocking DNS resolver that can be used when threads are not\nappropriate. Platforms : Tornado is designed for Unix-like platforms, with best\nperformance and scalability on systems supporting epoll (Linux), kqueue (BSD/macOS), or /dev/poll (Solaris). Tornado will also run on Windows, although this configuration is not\nofficially supported or recommended for production use. Some features\nare missing on Windows (including multi-process mode) and scalability\nis limited (Even though Tornado is built on asyncio , which\nsupports Windows, Tornado does not use the APIs that are necessary for\nscalable networking on Windows). Documentation \u00b6 This documentation is also available in PDF and Epub formats . User\u2019s guide Introduction Asynchronous and non-Blocking I/O Coroutines Queue example - a concurrent web spider Structure of a Tornado web application Templates and UI Authentication and security Running and deploying Web framework tornado.web \u2014 RequestHandler and Application classes tornado.template \u2014 Flexible output generation tornado.routing \u2014 Basic routing implementation tornado.escape \u2014 Escaping and string manipulation tornado.locale \u2014 Internationalization support tornado.websocket \u2014 Bidirectional communication to the browser HTTP servers and clients tornado.httpserver \u2014 Non-blocking HTTP server tornado.httpclient \u2014 Asynchronous HTTP client tornado.httputil \u2014 Manipulate HTTP headers and URLs tornado.http1connection \u2013 HTTP/1.x client/server implementation Asynchronous networking tornado.ioloop \u2014 Main event loop tornado.iostream \u2014 Convenient wrappers for non-blocking sockets tornado.netutil \u2014 Miscellaneous network utilities tornado.tcpclient \u2014 IOStream connection factory tornado.tcpserver \u2014 Basic IOStream -based TCP server Coroutines and concurrency tornado.gen \u2014 Generator-based coroutines tornado.locks \u2013 Synchronization primitives tornado.queues \u2013 Queues for coroutines tornado.process \u2014 Utilities for multiple processes Integration with other services tornado.auth \u2014 Third-party login with OpenID and OAuth tornado.wsgi \u2014 Interoperability with other Python frameworks and servers tornado.platform.caresresolver \u2014 Asynchronous DNS Resolver using C-Ares tornado.platform.twisted \u2014 Bridges between Twisted and Tornado tornado.platform.asyncio \u2014 Bridge between asyncio and Tornado Utilities tornado.autoreload \u2014 Automatically detect code changes in development tornado.concurrent \u2014 Work with Future objects tornado.log \u2014 Logging support tornado.options \u2014 Command-line parsing tornado.testing \u2014 Unit testing support for asynchronous code tornado.util \u2014 General-purpose utilities Frequently Asked Questions Release notes What\u2019s new in Tornado 6.4.2 What\u2019s new in Tornado 6.4.1 What\u2019s new in Tornado 6.4.0 What\u2019s new in Tornado 6.3.3 What\u2019s new in Tornado 6.3.2 What\u2019s new in Tornado 6.3.1 What\u2019s new in Tornado 6.3.0 What\u2019s new in Tornado 6.2.0 What\u2019s new in Tornado 6.1.0 What\u2019s new in Tornado 6.0.4 What\u2019s new in Tornado 6.0.3 What\u2019s new in Tornado 6.0.2 What\u2019s new in Tornado 6.0.1 What\u2019s new in Tornado 6.0 What\u2019s new in Tornado 5.1.1 What\u2019s new in Tornado 5.1 What\u2019s new in Tornado 5.0.2 What\u2019s new in Tornado 5.0.1 What\u2019s new in Tornado 5.0 What\u2019s new in Tornado 4.5.3 What\u2019s new in Tornado 4.5.2 What\u2019s new in Tornado 4.5.1 What\u2019s new in Tornado 4.5 What\u2019s new in Tornado 4.4.3 What\u2019s new in Tornado 4.4.2 What\u2019s new in Tornado 4.4.1 What\u2019s new in Tornado 4.4 What\u2019s new in Tornado 4.3 What\u2019s new in Tornado 4.2.1 What\u2019s new in Tornado 4.2 What\u2019s new in Tornado 4.1 What\u2019s new in Tornado 4.0.2 What\u2019s new in Tornado 4.0.1 What\u2019s new in Tornado 4.0 What\u2019s new in Tornado 3.2.2 What\u2019s new in Tornado 3.2.1 What\u2019s new in Tornado 3.2 What\u2019s new in Tornado 3.1.1 What\u2019s new in Tornado 3.1 What\u2019s new in Tornado 3.0.2 What\u2019s new in Tornado 3.0.1 What\u2019s new in Tornado 3.0 What\u2019s new in Tornado 2.4.1 What\u2019s new in Tornado 2.4 What\u2019s new in Tornado 2.3 What\u2019s new in Tornado 2.2.1 What\u2019s new in Tornado 2.2 What\u2019s new in Tornado 2.1.1 What\u2019s new in Tornado 2.1 What\u2019s new in Tornado 2.0 What\u2019s new in Tornado 1.2.1 What\u2019s new in Tornado 1.2 What\u2019s new in Tornado 1.1.1 What\u2019s new in Tornado 1.1 What\u2019s new in Tornado 1.0.1 What\u2019s new in Tornado 1.0 Index Module Index Search Page Discussion and support \u00b6 You can discuss Tornado on the Tornado developer mailing list , and report bugs on\nthe GitHub issue tracker .  Links to additional\nresources can be found on the Tornado wiki .  New releases are\nannounced on the announcements mailing list . Tornado is available under\nthe Apache License, Version 2.0 . This web site and all documentation is licensed under Creative\nCommons 3.0 . Next \u00a9 Copyright The Tornado Authors. Built with Sphinx using a theme provided by Read the Docs ."
  },
  "http://www.riverbankcomputing.co.uk/software/pyqt/intro": {
    "url": "http://www.riverbankcomputing.co.uk/software/pyqt/intro",
    "content": "Riverbank Computing | Introduction Riverbank Computing News Software PyQt Introduction Download PyQt6 Documentation PyQt5 Documentation PyQt4 Documentation PyQt-3D Introduction Download PyQt-Charts Introduction Download PyQt-DataVisualization Introduction Download PyQt-Graphs Introduction Download PyQt-NetworkAuth Introduction Download PyQt-Purchasing Introduction Download PyQt-WebEngine Introduction Download SIP Introduction Documentation Download MetaSIP Introduction Documentation Download PyQt-builder Introduction Documentation Download pyqtdeploy Introduction Documentation Download QScintilla Introduction Documentation Scintilla Documentation Download Other Stuff Books PyQt6 Book (Fitzpatrick) PyQt5 Book (Fitzpatrick) PyQt5 Book (Herrmann) PyQt4 Book (Summerfield) PyQt3 Book (Rempt) Tools Eric IDE Mu Python Editor fman Build System Support Asking for Help Mailing Lists PyQt Wiki Commercial PyQt Commercial Version License FAQ Buy PyQt About Login What is PyQt? PyQt is a set of Python bindings for The Qt Company's Qt\napplication framework.  The bindings are implemented as a set of Python modules\nand contain over 1,000 classes. PyQt6 supports Qt6 and runs on Windows (Intel and ARM), macOS (Intel and Apple\nSilicon) and Linux (Intel and ARM). PyQt5 supports Qt5 and runs on Windows (Intel), macOS (Intel and Apple\nSilicon), Android, iOS and Linux (Intel). PyQt4 supports Qt v4 but both are no longer supported and no new releases will\nbe made. License PyQt is dual licensed on all supported platforms under the GNU GPL v3 and the\nRiverbank Commercial License.  Unlike Qt, PyQt is not available under the LGPL.\nYou can purchase the commercial version of PyQt here .  More\ninformation about licensing can be found in the License\nFAQ . PyQt does not include a copy of Qt.  You must obtain a correctly licensed copy\nof Qt yourself.  However, binary wheels of the GPL version of PyQt6 and PyQt5\nare provided and these include a copy of the corresponding LGPL version of Qt. PyQt Components A description of the components of PyQt5 can be found in the PyQt5 Reference\nGuide . A description of the components of PyQt4 can be found in the PyQt4 Reference\nGuide . Why PyQt? PyQt brings together the Qt C++ cross-platform application framework and the\ncross-platform interpreted language Python . Qt is more than a GUI toolkit.  It includes abstractions of network sockets,\nthreads, Unicode, regular expressions, SQL databases, SVG, OpenGL, XML, a fully\nfunctional web browser, a help system, a multimedia framework, as well as a\nrich collection of GUI widgets. Qt classes employ a signal/slot mechanism for communicating between objects\nthat is type safe but loosely coupled making it easy to create re-usable\nsoftware components. Qt also includes Qt Designer, a graphical user interface designer.  PyQt is\nable to generate Python code from Qt Designer.  It is also possible to add new\nGUI controls written in Python to Qt Designer. Python is a simple but powerful object-orientated language.  Its simplicity\nmakes it easy to learn, but its power means that large and complex applications\ncan be created.  Its interpreted nature means that Python programmers are very\nproductive because there is no edit/compile/link/run development cycle. Much of Python's power comes from its comprehensive set of extension modules\nproviding a wide variety of functions including HTTP servers, XML parsers,\ndatabase access, data compression tools and, of course, graphical user\ninterfaces.  Extension modules are usually implemented in either Python, C or\nC++.  Using tools such as SIP it is\nrelatively straight forward to create an extension module that encapsulates an\nexisting C or C++ library.  Used in this way, Python can then become the glue\nto create new applications from established libraries. PyQt combines all the advantages of Qt and Python.  A programmer has all the\npower of Qt, but is able to exploit it with the simplicity of Python. Recent News PyQt-builder 1.18.1 Released PyQt v6.8.1 Released SIP v6.10.0 Released PyQt-builder 1.18.0 Released PyQt-builder 1.17.2 Released Downloads PyQt PyQt-3D PyQt-Charts PyQt-DataVisualization PyQt-Graphs PyQt-NetworkAuth PyQt-Purchasing PyQt-WebEngine SIP MetaSIP PyQt-builder pyqtdeploy QScintilla Documentation PyQt6 PyQt5 SIP MetaSIP PyQt-builder pyqtdeploy QScintilla PyQt4"
  },
  "http://brochure.getpython.info/": {
    "url": "http://brochure.getpython.info/",
    "content": "Get the Python Brochure Vol.1 as download! \u2014 Skip to content. | Skip to navigation Personal tools Log in Search Site only in current section Advanced Search\u2026 Navigation Home Learn more News Stories You\nare here: Home Info Get the Python Brochure Vol.1 as download! by Armin C. Stross-Radschinski \u2014 last modified Jan 30, 2019 01:34 PM The very successful printed version is finally out of stock since 2018. The first run of the printed edition was successfully released in 2014 at the\u00a0PyCon\u00a0in Montreal. After that we distributed this excellent showcase of Python to major computing conferences around the world. We were proud to offer to ship the second print run until end of 2016. We have send all our copies to your local events and shows around Python over the whole world. Since then it is still a growing technology that powers the web and science & engineering in both education and production. Get the PDF file as download! You can download the Python brochure as the latest updated screen resolution PDF suitable for electronic distribution and is well suited for low resolution printing on A4 as a A5 folded brochure booklet. The original printed issue was 32 pages, A4, full-color. Quick Read of License and redistribution rules of this PDF: You are free to redistribute this PDF to your peers and local community, but please share unchanged copies if possible. See why in the license text on p.30 . All the text and most images are CC3.0 BY-SA except some images and brands mentioned in the legal text on p.30. Update your local PDF files if you are using a version older than the current Release 107 \u2013 Thank you. Get the PDF file Let's make Python strengths and quality more visible for new audiences! The Python Software Foundation (PSF) has collected success stories and case studies over the last two years and we've created a beautiful, professional quality printed brochure to promote the usage of Python to audiences which we are currently not reaching well. We cover business, science, industry, education, media, government, public sector and charity stories. Our target groups are CIOs and chief developers, scientists and programmers, university lecturers, teachers and students, customers, clients, managers and employees. We are out of stock after 10,000 printed copies distributed worldwide in the last years. Until a new edition is planned, you can still get the PDF file as download . We thank all our Sponsors who make this finally happen! Discover the Brochure News Newsletter #9:  PSF Python Brochure: Get your free copy at PyCon 2015 Apr 09, 2015 Newsletter #8: PSF Python Brochure \"sold out\" - help us kick start the second print run ! Feb 04, 2015 Newsletter #7: The Python Brochure is out \u2013 Get your copy in Montreal! Apr 10, 2014 Newsletter #6: PSF Python Brochure \u2013 Last call for Ad Sponsors Feb 11, 2014 Newsletter #5 \u2013 Python Brochure available as PDF preview. Last chance to order your ad! Mar 15, 2013 More news\u2026 Keep Informed RSS news feed Twitter @pythonbrochure or subscribe to our email newsletter Python Software Foundation Foundation at Python.org Currently available Releases PSF Python Brochure Vol. I final Download Pre Release Media PyCon US 2011 Flyer PyCon US 2012 Teaser Booklet Success Stories Listing on python.org Example: ILM Resources pythonology.org Keep Informed RSS news feed Follow us on Twitter @pythonbrochure Feedburner Powered by Plone & Python Site Map Accessibility Contact Imprint"
  },
  "https://wiki.qt.io/PySide": {
    "url": "https://wiki.qt.io/PySide",
    "content": "Qt for Python - Qt Wiki Qt for Python From Qt Wiki (Redirected from PySide ) Jump to navigation Jump to search En Ar Bg De El Es Fa Fi Fr Hi Hu It Ja Kn Ko Ms Nl Pl Pt Ru Sq Th Tr Uk Zh Contents 1 Qt for Python 1.1 What does it look like? 1.2 Python compatibility matrix 2 Getting Started 3 Community 4 Development Status 5 Contributing to the Qt for Python Wiki Qt for Python Qt for Python official logo. The Qt for Python project aims to provide a complete port of the PySide module to Qt. The development started on GitHub in May 2015. The project managed to port PySide to Qt 5.3, 5.4 & 5.5. During April 2016 The Qt Company decided to properly support the port (see details ). The module was released mid June 2018 as a Technical Preview (supporting Qt 5.11),\nand it was officially released without the Technical Preview tag, in December 2018 for Qt 5.12.\nIn December 2020, the module was released for Qt6, which is the latest available version, which has the following differences: It doesn't support Python 2.7, Dropped support for Python 3.5, keeping 3.6+ only until PySide 6.3 PySide 6.4 is the first version that supports Python 3.7+ This wiki page tracks the progress of the Qt for Python project development and provides further information concerning the effort. Qt for Python is available under LGPLv3 / GPLv2 and commercial license for the following platforms: Linux macOS Windows i386 amd64 arm64 32bit 64bit Apple Silicon 32bit 64bit Python 3.7+ \u2738 \u205c \u2738 \u29bf \u2738 \u2726 \u205c Partially supported via cross compilation \u2738 No Qt Support https://doc.qt.io/qt-6/supported-platforms.html \u2606 Not supported / No packages \u29bf Supported from 6.2.2 / Can be built from source \u2726: 5.14 is the first version to support Python 3.8, but Python 3.8.0 will not work on Windows. Please use Python 3.8.1 or greater. Please notice that iOS, and WebAssembly are not supported yet. Get PySide6 via pip by running: pip install pyside6 What does it look like? Code Application import sys from PySide6.QtCore import Qt from PySide6.QtWidgets import QApplication , QLabel if __name__ == \"__main__\" : app = QApplication ( sys . argv ) label = QLabel ( \"Hello World\" , alignment = Qt . Alignment . AlignCenter ) label . show () sys . exit ( app . exec ()) More examples can be found in the project's repository inside the examples directory. Python compatibility matrix 2.7 3.5 3.6 3.7 3.8 3.9 3.10 3.11 3.12 3.13 3.14 5.15.0 o o o o o x x x x x x 5.15.1-7 o o o o o o x x x x x 5.15.8 o o o o o o o x x x x 5.15.9-10 x o o o o o o x x x x 5.15.11-15 x x o o o o o o x x x 6.0.x x x o o o o x x x x x 6.1.x x x o o o o x x x x x 6.2.x x x o o o o o x x x x 6.3.x x x o o o o o x x x x 6.4.x x x x o o o o o x x x 6.5.x x x x o o o o o x x x 6.6.x x x x x o o o o o x x 6.7.x x x x x x o o o o x x 6.8.x x x x x x o o o o o x 6.9.x x x x x x o o o o x x o Free Threaded Python is not fully supported. Getting Started Refer to the official documentation over the wiki for guides on getting started, tutorials, and more!. Getting started | wiki : download, build and install instructions. Porting docs | wiki : Porting an existing Qt/C++ application to Qt/Python the porting process. Tutorials | wiki : get started developing PySide applications. Shiboken | wiki : general information about the Python binding generator. Development: Getting started : guidelines to start contributing to the project. Considerations and known issues Reporting Bugs : report any issue related PySide6 or Shiboken6. Git repository (Code review) (dev branch is the branch currently worked on for PySide6) and PySide6 open patches Community Official Mailing list Qt Forum: Qt for Python Subcategory Have an idea? share it with us! The following chat platforms are connected via a bridge, so independent of the one you join, you will get the messages from the other ones. Official IRC channel on Libera.chat #qt-pyside Gitter: gitter.im/PySide/pyside2 (even if the url contains 'pyside2' it includes 'pyside6' discussion as well) Matrix/Riot: #qt-pyside:kde.org Telegram Group: Qt for Python Development Status Development Notes by date : the summary of the development progress. Qt for Python Development Progress Notes The most current view of the progress can be found in Jira: Unresolved issues and All issues (including resolved) . The second link is useful to monitor the progress of the backlog. The best way to achieve this is to sort the list by the \"Updated\" column. Larger backlog/feature items are filed as \"User Stories\" in Jira. Missing PySide6 bindings : the list of the current missing bindings. Contributing to the Qt for Python Wiki This Wiki is a community area where you can easily contribute, and which may contain rapidly changing information.\nPlease put any wiki pages related to Qt for Python into the \"QtForPython\" category by adding the following text to the top of the page:\n\n[[Category:Qt for Python]] When creating a new wiki page, please start the name with the prefix \"Qt_for_Python/\", so all the wiki page names will have the same structure and breadcrumbs are generated for easier navigation. Retrieved from \" https://wiki.qt.io/index.php?title=Qt_for_Python&oldid=44018 \" Category : Qt for Python Navigation menu Personal tools Sign in Namespaces Page Discussion English Views Read View source View history More Search Navigation Main page Recent changes Random page Help about MediaWiki Tools What links here Related changes Special pages Printable version Permanent link Page information This page was last edited on 19 March 2025, at 11:38. Privacy policy About Qt Wiki Disclaimers"
  },
  "http://ipython.org": {
    "url": "http://ipython.org",
    "content": "Jupyter and the future of IPython \u2014 IPython Install \u00b7 Documentation \u00b7 Project \u00b7 Jupyter \u00b7 News \u00b7 Cite \u00b7 Donate \u00b7 Books Notebook Viewer Share your notebooks Community Stack Overflow File a bug Reddit IPython provides a rich architecture for interactive computing with: A powerful interactive shell. A kernel for Jupyter . Support for interactive data visualization and use of GUI toolkits . Flexible, embeddable interpreters to load into your own projects. Easy to use, high performance tools for parallel computing . To get started with IPython in the Jupyter Notebook, see our official example\ncollection .  Our notebook gallery is an excellent way to see the many\nthings you can do with IPython while learning about a variety of topics, from\nbasic programming to advanced statistics or quantum mechanics. To learn more about IPython, you can download our talks and presentations , or read\nour extensive documentation .  IPython is open source\n(BSD license), and is used by a range of other projects ; add your project to that\nlist if it uses IPython as a library, and please don\u2019t forget to cite the\nproject . IPython supports Python 2.7 and 3.3 or newer. Our older 1.x series supports\nPython 2.6 and 3.2. Jupyter and the future of IPython \u00b6 IPython is a growing project, with increasingly language-agnostic components.\nIPython 3.x was the last monolithic release of IPython,\ncontaining the notebook server, qtconsole, etc.\nAs of IPython 4.0, the language-agnostic parts of the project:\nthe notebook format, message protocol, qtconsole, notebook web application, etc.\nhave moved to new projects under the name Jupyter .\nIPython itself is focused on interactive Python,\npart of which is providing a Python kernel for Jupyter. Announcements \u00b6 IPython tends to be released on the last Friday of each month, this section updated rarely. Please have a look at the release history on PyPI . IPython 7.12.0 : Released on Jan 31st 2020. IPython 7.11.0 and 7.11.1 : Released on Dec 27, 2019 and Jan 1st 2020 IPython 7.10.0 and 7.10.1 : Released on Nov 27, 2019 and Dec 1st 2019 IPython 7.9.0 : Released on Oct 25, 2019 IPython 7.8.0 : Released on Aug 30, 2019 IPython 7.7.0 : Released on Jul 26, 2019 IPython 7.6.0 and 7.6.1 : Released on June 28th, and July 3rd 2019. IPython 7.5 : fixes to issues brought by 7.4, documentation changes and other minor updates (April 25, 2019) IPython 7.4 : improvements to the completion system and miscellaneous fixes (March 21, 2019) IPython 7.3 : several bugfixes, minor improvements and Python 3.8 support (February 18, 2019) IPython 7.2 : minor bugfixes, improvements, and new configuration options\n(November 29, 2018) IPython 7.1 : fixes to new features, internal refactoring,\nand fixes for regressions (October 27, 2018) IPython 7.0 : major new features (September 27th, 2018).\nSee the release notes for more information about what\u2019s new. IPython 6.5 : minor bugfixes and Python 3.7 compatibility (July 28, 2018) IPython 5.8 : minor bugfixes (July 28, 2018) IPython 6.4 and IPython 5.7 : minor bugfixes (May 10, 2018) IPython 6.3 and IPython 5.6 : new features and bugfixes\n(April 2, 2018) IPython 6.0 : This release, the first to require Python 3, integrates the\nJedi library for completion. See the release notes for more information about what\u2019s new. JupyterCon 2017 : The first Jupyter Community Conference will take place\nin New York City on August 23-25 2017, along with a satellite training\nprogram on August 22-23. The Project Jupyter team has partnered with O\u2019Reilly\nMedia for this event; for more details, including submitting a talk, see the\nJupyterCon website . IPython 5.0 : The release of IPython 5.0 brings a major revision of the\nterminal interface, including syntax highlighting as you type and better\nmultiline editing, thanks to the prompt_toolkit library. See the release notes for more about the new features. Book : Cyrille Rossant has published the second edition of the IPython minibook: Learning IPython for Interactive Computing and Data Visualization ,\nfor which Damian Avila was a technical\nreviewer. We thank Packt Publishing for donating a portion of the proceeds\nfrom this book to support IPython\u2019s development. O\u2019Reilly Book : Mining the Social Web is an open source data science project and book that features nearly 130 examples with IPython Notebook and a\nVagrant-powered virtual machine environment. You can preview all of the\nexample notebooks from its GitHub repository on IPython\u2019s Notebook Viewer here . More news\u2026 Citing IPython \u00b6 Several of the authors of IPython are connected with academic and scientific\nresearch, so it is important for us to be able to show the impact of our work\nin other projects and fields. If IPython contributes to a project that leads to a scientific publication,\nplease acknowledge this fact by citing the project. You can use this ready-made citation entry . \u00a9 Copyright the IPython development team. Python is trademark of the Python Software Foundation.\n      Created using Sphinx 7.4.7."
  },
  "http://trac.edgewall.org/": {
    "url": "http://trac.edgewall.org/",
    "content": "The Trac Project Edgewall Software Home Trac Trac Hacks Genshi Babel Bitten Home Download Documentation Mailing Lists License FAQ Search: Login Preferences Help/Guide About Trac Wiki Timeline Roadmap Browse Source View Tickets New Ticket Search wiki: WikiStart Context Navigation Start Page Index History Welcome to the Trac Open Source Project Try out our demos! for Trac\u00a01.4 or Trac\u00a01.6 (latest stable) (demo available soon) Trac is an enhanced wiki and issue tracking system for software development projects.\nTrac uses a minimalistic approach to web-based software project management.\nOur mission is to help developers write great software while staying out of\nthe way. Trac should impose as little as possible on a team's established\ndevelopment process and policies. It provides an interface to \u200b Subversion and \u200b Git (or other version control systems ), an integrated Wiki and convenient reporting facilities. Trac allows wiki markup in issue descriptions and commit messages, creating \nlinks and seamless references between bugs, tasks, changesets, files and wiki pages.  \nA timeline shows all current and past project events in order, \nmaking the acquisition of an overview of the project and tracking progress very easy.\nThe roadmap shows the road ahead, listing the upcoming milestones. Get started with the software! TracGuide , TracFaq , Trac\u00a01.6 , Trac\u00a01.4 , PluginList , CookBook Watch it evolve ChangeLog , RoadMap , Trac 1.7.x , SeaChange Communicate MailingList , IrcChannel , TracIdeas Get involved TracProject , HowToContribute , TracTeam , TracDev For a complete list of available wiki pages, see the TitleIndex . About This Site This is the TracWiki , editable by its users. This \u200b is a feature . However the site you are currently visiting tracks the actual development of the Trac project, so please don't make edits here on trac.edgewall.org simply for the sake of testing Trac . Instead, if you want to test out some of the features in Trac, please use the demo sites (see list of demos at top of page). Trac Users Are you curious who is using Trac, or would like to list your own name, visit the TracUsers page. See also what others have to say AboutTrac Last modified 17 months ago Last modified on Oct 30, 2023, 10:30:22 PM Note: See TracWiki for help on using the wiki. Download in other formats: Plain Text Powered by Trac 1.4.3 By Edgewall Software . Visit the Trac open source project at https://trac.edgewall.org/ info@edgewall.com Copyright \u00a9 2003-2024 Edgewall Software. All rights reserved."
  },
  "https://docs.python.org": {
    "url": "https://docs.python.org",
    "content": "3.13.2 Documentation Theme Auto Light Dark Download Download these documents Docs by version Python 3.14 (in development) Python 3.13 (stable) Python 3.12 (stable) Python 3.11 (security-fixes) Python 3.10 (security-fixes) Python 3.9 (security-fixes) Python 3.8 (EOL) Python 3.7 (EOL) Python 3.6 (EOL) Python 3.5 (EOL) Python 3.4 (EOL) Python 3.3 (EOL) Python 3.2 (EOL) Python 3.1 (EOL) Python 3.0 (EOL) Python 2.7 (EOL) Python 2.6 (EOL) All versions Other resources PEP Index Beginner's Guide Book List Audio/Visual Talks Python Developer\u00e2\u0080\u0099s Guide Navigation index modules | Python \u00bb 3.13.2 Documentation \u00bb | Theme Auto Light Dark | Python 3.13.2 documentation Welcome! This is the official documentation for Python 3.13.2. Documentation sections: What's new in Python 3.13? Or all \"What's new\" documents since Python 2.0 Tutorial Start here: a tour of Python's syntax and features Library reference Standard library and builtins Language reference Syntax and language elements Python setup and usage How to install, configure, and use Python Python HOWTOs In-depth topic manuals Installing Python modules Third-party modules and PyPI.org Distributing Python modules Publishing modules for use by other people Extending and embedding For C/C++ programmers Python's C API C API reference FAQs Frequently asked questions (with answers!) Deprecations Deprecated functionality Indices, glossary, and search: Global module index All modules and libraries General index All functions, classes, and terms Glossary Terms explained Search page Search this documentation Complete table of contents Lists all sections and subsections Project information: Reporting issues Contributing to Docs Download the documentation History and license of Python Copyright About the documentation Download Download these documents Docs by version Python 3.14 (in development) Python 3.13 (stable) Python 3.12 (stable) Python 3.11 (security-fixes) Python 3.10 (security-fixes) Python 3.9 (security-fixes) Python 3.8 (EOL) Python 3.7 (EOL) Python 3.6 (EOL) Python 3.5 (EOL) Python 3.4 (EOL) Python 3.3 (EOL) Python 3.2 (EOL) Python 3.1 (EOL) Python 3.0 (EOL) Python 2.7 (EOL) Python 2.6 (EOL) All versions Other resources PEP Index Beginner's Guide Book List Audio/Visual Talks Python Developer\u00e2\u0080\u0099s Guide \u00c2\u00ab Navigation index modules | Python \u00bb 3.13.2 Documentation \u00bb | Theme Auto Light Dark | \u00a9 Copyright 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See History and License for more information. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Apr 01, 2025 (14:46 UTC). Found a bug ? Created using Sphinx 8.2.3."
  },
  "https://www.openstack.org": {
    "url": "https://www.openstack.org",
    "content": "Open Source Cloud Computing Infrastructure - OpenStack An OpenInfra Foundation Project The Most Widely Deployed Open Source Cloud Software in the World Deployed by thousands. Proven production at scale. OpenStack is a set of software components that provide common services for cloud infrastructure. BROWSE OPENSTACK COMPONENTS OpenStack is developed by the community. For the community. Learn how to contribute \u2b95 OpenInfra Foundation Board Announces Intent to Join the Linux Foundation Together, the Linux Foundation and the OpenInfra Foundation will unite their growing, vibrant, global ecosystems to empower users and developers with trusted open source solutions. Learn More Cloud Infrastructure for Virtual Machines, Bare Metal, and Containers Openstack controls large pools of compute, storage, and networking resources, all managed through APIs or a dashboard. Beyond standard infrastructure-as-a-service functionality, additional components provide orchestration, fault management and service management amongst other services to ensure high availability of user applications. READ MORE On-Premises Host your cloud infrastructure internally or find an OpenStack partner in the Marketplace Public Cloud Leverage one of the 180+ OpenStack powered public cloud data centers At the Edge Telecoms and retailers rely on OpenStack for their distributed systems Latest Release: OpenStack Dalmatian LATEST RELEASE: Dalmatian UNDER DEVELOPMENT: EPOXY Marketplace Spotlight The OpenStack Marketplace is filled with experts working across industries, use cases, and regions to help your organization achieve your goals. CT Cloud Platform provides stable, scalable cloud service based on OpenStack, combined with telecom features and enhanced end-user service delivery. CT Cloud Platform is focused on Cloud+Network Integration technology for large scale cloud. LEARN MORE OpenInfra Foundation Member Spotlight Ericsson is a platinum member of the OpenStack Foundation with dedicated core members and contributors covering upstream development, bug fixing and documentation tasks. The main focus areas are OpenStack Compute, Placement and Neutron. Ericsson enables communications service providers to capture the full value of connectivity. The company\u2019s portfolio spans Networks, Digital Services, Managed Services, and Emerging Business and is designed to help our customers go digital, increase efficiency and find new revenue streams. Ericsson\u2019s investments in innovation have delivered the benefits of telephony and mobile broadband to billions of people around the world. The Ericsson stock is listed on Nasdaq Stockholm and on Nasdaq New York. LEARN MORE The World Runs on OpenStack OpenStack is trusted to manage 40 Million+ cores around the world, across dozens of industries. Blizzard Entertainment Video game developer, Blizzard Entertainment, implements OpenStack autoscaling to support running video games, like best-selling game Overwatch, in the cloud. WATCH VIDEO Walmart Walmart is the largest company in the world with 11,000 stores and over 80 million monthly website visitors. To manage e-commerce, including peak shopping times like Black Friday, Walmart relies on its OpenStack cloud with over 170,000 cores in more than 30 regions. READ MORE China Mobile China Mobile\u2019s telecom network has more than 800 million subscribers and 3 million base stations. China Mobile is now building up the biggest NFV network based on OpenStack with more than 50,000 servers in the network. Read More SEE MORE CASE STUDIES OpenStack is a top - level open infrastructure project supported by the OpenInfra Foundation Subscribe to News About OpenStack Stay up to date on OpenStack and the Open Infrastructure community. SUBMIT OpenStack Projects Security Software Blog News Community User Groups Events Jobs Companies Contribute Documentation OpenStack Manuals Getting Started API Documentation Wiki Branding & Legal Legal Docs Logos & Guidelines Trademark Policy Privacy Policy OpenStack CLA Stay In Touch The OpenStack project is provided under the Apache 2.0 license. The project is supported by the OpenInfra Foundation . openstack.org is powered by VEXXHOST ."
  },
  "https://mail.python.org/mailman/listinfo/python-dev": {
    "url": "https://mail.python.org/mailman/listinfo/python-dev",
    "content": "Mailman 3 \nInfo | python-dev@python.org - python.org Toggle navigation Postorius Sign In Sign Up Lists Archives Sign In Sign Up Python-Dev python-dev@python.org Summary Python core developers NOTE: The python-dev mailing list has been archived and is no longer accepting new postings. The discussions around the core Python development have moved on to our Discourse forum server: Core Development category Do not post general Python questions to this list.  For help with Python please see the Python help page . On this list the key Python developers discuss the future of the language and its implementation.  Topics include Python design issues, release mechanics, and maintenance of existing releases. More information on Python's development process can be found in the Python Developer's Guide . This is a fairly high volume mailing list so even the digests can result in substantial amounts of email occasionally.  Consider using Gmane . To contact the list owners, use the following email address: python-dev-owner@python.org Archives Archives Subscription / Unsubscription To subscribe or unsubscribe from this list, please sign in first.\n        If you have not previously signed in, you may need to set up an account\n        with the appropriate email address. Sign In Postorius Documentation \u2022 GNU Mailman \u2022\n                    Postorius Version 1.3.13\n                    \n                        \u2022\n                        Happy Mailman Day!"
  },
  "https://twitter.com/ThePSF": {
    "url": "https://twitter.com/ThePSF",
    "content": ""
  },
  "https://devguide.python.org/": {
    "url": "https://devguide.python.org/",
    "content": "Python Developer\u2019s Guide Contents Menu Expand Light mode Dark mode Auto light/dark, in light mode Auto light/dark, in dark mode Hide navigation sidebar Hide table of contents sidebar Skip to content Toggle site navigation sidebar Python Developer's Guide Toggle Light / Dark / Auto color theme Toggle table of contents sidebar Python Developer's Guide Getting started Toggle navigation of Getting started Setup and building Fixing \u201ceasy\u201d issues (and beyond) Git bootcamp and cheat sheet Lifecycle of a pull request Where to get help Generative AI Development workflow Toggle navigation of Development workflow Following Python\u2019s development Development cycle Adding to the stdlib Standard library extension modules Changing Python\u2019s C API Changing the Python language Changing CPython\u2019s grammar Porting to a new platform Software Bill-of-Materials (SBOM) Python Security Response Team (PSRT) Issues and triaging Toggle navigation of Issues and triaging Issue tracker Triaging an issue GitHub labels GitHub issues for BPO users Triage Team Documentation Toggle navigation of Documentation Getting started Helping with documentation Style guide reStructuredText markup Translating Helping with the Developer\u2019s Guide Testing and buildbots Toggle navigation of Testing and buildbots Running and writing tests Silence warnings from the test suite Increase test coverage Working with buildbots New buildbot workers Development tools Toggle navigation of Development tools Argument Clinic GDB support Dynamic analysis with Clang Tools for tracking compiler warnings Core developers Toggle navigation of Core developers Responsibilities Accepting pull requests Experts index Developer log Motivations and affiliations How to become a core developer Memorialization CPython\u2019s internals Toggle navigation of CPython\u2019s internals CPython source code Guide to the parser Compiler design The bytecode interpreter Garbage collector design Status of Python versions Python Contributor\u2019s Guide (draft) Toggle navigation of Python Contributor\u2019s Guide (draft) [Plan for the Contributor\u2019s Guide] Introduction The CPython project Toggle navigation of The CPython project Code of Conduct Roles Governance Generative AI GitHub Directory structure Communication channels Outreach Issues and triaging Toggle navigation of Issues and triaging Issue tracker Triaging an issue GitHub labels Reviewing Triage Team Documentation contributions Toggle navigation of Documentation contributions Getting started Helping with documentation Style guide reStructuredText markup Pull request lifecycle Translating Helping with the Developer\u2019s Guide Code contributions Toggle navigation of Code contributions Setup and building Git tips Pull request lifecycle Development workflow Toggle navigation of Development workflow Following Python\u2019s development Development cycle Adding to the stdlib Standard library extension modules Changing Python\u2019s C API Changing the Python language Changing CPython\u2019s grammar Porting to a new platform Software Bill-of-Materials (SBOM) Python Security Response Team (PSRT) Testing and buildbots Toggle navigation of Testing and buildbots Running and writing tests Silence warnings from the test suite Increase test coverage Working with buildbots New buildbot workers Development tools Toggle navigation of Development tools Argument Clinic GDB support Dynamic analysis with Clang Tools for tracking compiler warnings Core team Toggle navigation of Core team Responsibilities Accepting pull requests Experts index Developer log Motivations and affiliations How to join the core team Accessibility, design, and user success Security and infrastructure contributions Workflows Toggle navigation of Workflows Install Git Get the source code Install Dependencies Compile and build Regenerating auto-created files Install Git Using GitHub Codespaces Back to top View this page Edit this page Toggle Light / Dark / Auto color theme Toggle table of contents sidebar Python Developer\u2019s Guide \u00b6 This guide is a comprehensive resource for contributing to Python \u2013 for both new and experienced contributors. It is maintained by the same\ncommunity that maintains Python.  We welcome your contributions to Python! Quick reference \u00b6 Here are the basic steps needed to get set up and contribute a pull request.\nThis is meant as a checklist, once you know the basics. For complete\ninstructions please see the setup guide . Install and set up Git and other dependencies\n(see the Git Setup page for detailed information). Fork the CPython repository to your GitHub account and get the source code using: git clone https://github.com/<your_username>/cpython cd cpython Build Python: Unix ./configure --with-pydebug && make -j macOS ./configure --with-pydebug && make -j Windows PCbuild\\build.bat -e -d See also more detailed instructions , how to install and build dependencies ,\nand the platform-specific pages for Unix , macOS , and Windows . Run the tests : Unix ./python -m test -j3 macOS ./python.exe -m test -j3 Note: Most macOS systems use ./python.exe in order to avoid filename conflicts with\nthe Python directory. Windows .\\python.bat -m test -j3 Create a new branch where your work for the issue will go, for example: git checkout -b fix-issue-12345 main If an issue does not already exist, please create it .  Trivial issues (for example, typo fixes) do\nnot require any issue to be created. Once you fixed the issue, run the tests, and the patchcheck: Unix make patchcheck macOS make patchcheck Windows .\\python.bat Tools\\patchcheck\\patchcheck.py If everything is ok, commit. Push the branch on your fork on GitHub and create a pull request .  Include the issue number using gh-NNNN in the\npull request description.  For example: gh-12345: Fix some bug in spam module Add a News entry into the Misc/NEWS.d directory as individual file. The\nnews entry can be created by using blurb-it ,\nor the blurb tool and its blurb add command. Please read more about blurb in its repository . Note First time contributors will need to sign the Contributor Licensing\nAgreement (CLA) as described in the Licensing section of\nthis guide. Quick links \u00b6 Here are some links that you probably will reference frequently while\ncontributing to Python: Issue tracker Buildbot status Where to get help PEPs (Python Enhancement Proposals) Git bootcamp and cheat sheet Contributing \u00b6 We encourage everyone to contribute to Python and that\u2019s why we have put up this\ndeveloper\u2019s guide.  If you still have questions after reviewing the material in\nthis guide, then the Core Python Mentorship group is available to help guide new\ncontributors through the process. A number of individuals from the Python community have contributed to a series\nof excellent guides at Open Source Guides . Core developers and contributors alike will find the following guides useful: How to Contribute to Open Source Building Welcoming Communities Guide for contributing to Python: Contributors Documentarians Triagers Core Developers Setup and building Helping with documentation Issue tracker Responsibilities Where to get help Getting started Triaging an issue Developer log Lifecycle of a pull request Style guide Helping triage issues Accepting pull requests Running and writing tests reStructuredText primer Experts index Development cycle Fixing \u201ceasy\u201d issues (and beyond) Translating GitHub labels Motivations and affiliations Following Python\u2019s development Helping with the Developer\u2019s Guide GitHub issues for BPO users Experts index Git bootcamp and cheat sheet Triage Team Development cycle We recommend that the documents in this guide be read as needed. You\ncan stop where you feel comfortable and begin contributing immediately without\nreading and understanding these documents all at once.  If you do choose to skip\naround within the documentation, be aware that it is written assuming preceding\ndocumentation has been read so you may find it necessary to backtrack to fill in\nmissing concepts and terminology. Proposing changes to Python itself \u00b6 Improving Python\u2019s code, documentation and tests are ongoing tasks that are\nnever going to be \u201cfinished\u201d, as Python operates as part of an ever-evolving\nsystem of technology.  An even more challenging ongoing task than these\nnecessary maintenance activities is finding ways to make Python, in the form of\nthe standard library and the language definition, an even better tool in a\ndeveloper\u2019s toolkit. While these kinds of change are much rarer than those described above, they do\nhappen and that process is also described as part of this guide: Adding to the stdlib Changing the Python language Other interpreter implementations \u00b6 This guide is specifically for contributing to the Python reference interpreter,\nalso known as CPython (while most of the standard library is written in Python,\nthe interpreter core is written in C and integrates most easily with the C and\nC++ ecosystems). There are other Python implementations, each with a different focus.  Like\nCPython, they always have more things they would like to do than they have\ndevelopers to work on them.  Some major examples that may be of interest are: PyPy : A Python interpreter focused on high speed (JIT-compiled) operation\non major platforms Jython : A Python interpreter focused on good integration with the Java\nVirtual Machine (JVM) environment IronPython : A Python interpreter focused on good integration with the\nCommon Language Runtime (CLR) provided by .NET and Mono Stackless : A Python interpreter focused on providing lightweight\nmicrothreads while remaining largely compatible with CPython specific\nextension modules MicroPython : A tiny Python interpreter with small subset of the Python\nstandard library that is optimised to run on microcontrollers and in\nconstrained environments. CircuitPython : A fork of MicroPython designed to simplify experimenting\nand learning to code on low-cost microcontroller boards. Key resources \u00b6 Coding style guides PEP 7 (Style Guide for C Code) PEP 8 (Style Guide for Python Code) Issue tracker Experts index Buildbot status Source code Browse online Snapshot of the *main* branch PEPs (Python Enhancement Proposals) Where to get help Developer log Additional resources \u00b6 Anyone can clone the sources for this guide.  See Helping with the Developer\u2019s Guide . Help with \u2026 CPython source code Changing CPython\u2019s grammar Guide to the parser Compiler design Garbage collector design Tool support GDB support Dynamic analysis with Clang Various tools with configuration files as found in the Misc directory Information about editors and their configurations can be found in the wiki python.org maintenance Search this guide Code of conduct \u00b6 Please note that all interactions on Python Software Foundation -supported\ninfrastructure is covered by the PSF Code of Conduct ,\nwhich includes all infrastructure used in the development of Python itself\n(for example, mailing lists, issue trackers, GitHub, etc.).\nIn general this means everyone is expected to be open, considerate, and\nrespectful of others no matter what their position is within the project. Status of Python branches \u00b6 Moved to Status of Python versions Full table of contents \u00b6 Getting started Setup and building Install Git Get the source code Compile and build Install dependencies Regenerate configure Regenerate the ABI dump Troubleshoot the build Editors and tools Directory structure Contribute using GitHub Codespaces Fixing \u201ceasy\u201d issues (and beyond) Git bootcamp and cheat sheet Forking CPython GitHub repository Cloning a forked CPython repository Configure the remotes Listing the remote repositories Setting up your name and email address Enabling autocrlf on Windows Creating and switching branches Deleting branches Renaming branch Staging and committing files Reverting changes Stashing changes Comparing changes Pushing changes Creating a pull request Linking to issues and pull requests Updating your CPython fork Applying a patch to Git Checking out others\u2019 pull requests Accepting and merging a pull request Cancelling an automatic merge Backporting merged changes Editing a pull request prior to merging GitHub CLI Git worktree Lifecycle of a pull request Introduction Quick guide Step-by-step guide Making good PRs Copyrights patchcheck Making good commits Licensing Submitting Converting an existing patch from b.p.o to GitHub Reviewing Keeping continuous integration green Update branch button Committing/rejecting Crediting Where to get help Discourse Ask #python-dev Core mentorship File a bug Generative AI Acceptable uses Unacceptable uses Development workflow Following Python\u2019s development Standards of behaviour in these communication channels Mailing lists Discourse (discuss.python.org web forum) Discord (private chat server) IRC Blogs Setting expectations for open source participation Additional repositories Development cycle Branches Stages Repository administration Governance Adding to the stdlib Adding to a pre-existing module Adding a new module Adding a new environment variable Standard library extension modules Classifying extension modules Adding an extension module to CPython Changing Python\u2019s C API The internal API Public C API Unstable C API Limited API Changing the Python language What qualifies Suggesting new features and language changes PEP process Changing CPython\u2019s grammar Porting to a new platform Software Bill-of-Materials (SBOM) Updating a dependency Adding a new dependency Removing a dependency Python Security Response Team (PSRT) Vulnerability report triage Coordinating a vulnerability report Template responses Issues and triaging Issue tracker Using the issue tracker Disagreement with a resolution on the issue tracker Triaging an issue Checklist for triaging Helping triage issues GitHub labels Type labels Component labels OS labels Topic labels Version labels Other labels Labels specific to PRs GitHub issues for BPO users How to format my comments nicely? How to attach files to an issue? How to link to file paths in the repository when writing comments? How to do advanced searches? Where is the \u201cnosy list\u201d? How to add issue dependencies? What on earth is a \u201cmannequin\u201d? Where did the \u201cresolution\u201d field go? Where did the \u201clow\u201d, \u201chigh\u201d, and \u201ccritical\u201d priorities go? How to find a random issue? Where are regression labels? Triage Team Becoming a member of the Python triage team Documentation Getting started Introduction Building the documentation Helping with documentation Python documentation Helping with documentation issues Proofreading Style guide Footnotes Capitalization Specific words Use simple language Di\u00e1taxis Links Affirmative tone Author attribution Pronunciation of dunder names Economy of expression Security considerations (and other concerns) Code examples Code equivalents Audience Function signatures reStructuredText markup Quick reference reStructuredText primer Typographic conventions Additional markup constructs Translating Starting a new translation PEP 545 summary How to get help Translation FAQ Helping with the Developer\u2019s Guide Developer\u2019s Guide workflow Testing and buildbots Running and writing tests Running Writing Benchmarks Silence warnings from the test suite Increase test coverage Common gotchas Measuring coverage Filing the issue Measuring coverage of C code with gcov and lcov Working with buildbots In case of trouble Buildbot failures on pull requests Checking results of automatic builds Stability Flags-dependent failures Ordering-dependent failures Transient failures New buildbot workers Preparing for buildbot worker setup Setting up the buildbot worker Buildbot worker operation Required ports Required resources Security considerations Development tools Argument Clinic Background Reference Tutorial How-to guides GDB support Page moved CPython tips Dynamic analysis with Clang What is Clang? What are sanitizers? Clang/LLVM setup Python build setup Analyzing the output Tools for tracking compiler warnings What to do if a warning check fails GitHub CI Updating the warning ignore file Core developers Responsibilities Communication channels and bug notifications Sign a contributor agreement Pull request merging Expectations Accepting pull requests Assessing a pull request Updating NEWS and What\u2019s New in Python Working with Git Experts index Stdlib Tools Platforms Miscellaneous Documentation translations Developer log Procedure for granting or dropping access Motivations and affiliations Published entries Goals of this page Limitations on scope How to become a core developer What it takes Gaining commit privileges Poll template Memorialization Rationale The process CPython\u2019s internals CPython source code Source code layout Additional references Guide to the parser Compiler design The bytecode interpreter Garbage collector design Status of Python versions Supported versions Unsupported versions Full chart Status key Python Contributor\u2019s Guide (draft) Using this guide Contents [Plan for the Contributor\u2019s Guide] Introduction The CPython project Issues and triaging Documentation contributions Code contributions Core team Accessibility, design, and user success Security and infrastructure contributions Workflows Next Getting started Copyright \u00a9 2011 Python Software Foundation Made with Sphinx and @pradyunsg 's Furo On this page Python Developer\u2019s Guide Quick reference Quick links Contributing Proposing changes to Python itself Other interpreter implementations Key resources Additional resources Code of conduct Status of Python branches Full table of contents"
  },
  "https://www.python.org/psf/": {
    "url": "https://www.python.org/psf/",
    "content": "Python Software Foundation Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse The Python Software Foundation is an organization devoted to advancing open source technology related to the Python programming language. Join us in Pittsburgh, PA starting May 14, 2025. Grab your ticket today before we sell out! REGISTER FOR PYCON US! We support the Python Community through... Grants In 2024, the PSF awarded $655,000 USD to 257 groups or individuals in 61 countries around the world. Infrastructure We support and maintain python.org , The Python Package Index , Python Documentation ,\r\n          and many other services the Python Community relies on. PyCon US We produce and underwrite the PyCon US Conference ,\r\n          the largest annual gathering for the Python community.\r\n         Support from sponsors, attendees, PyLadies, and CPython enabled us to award more than $384,000 USD in travel grants to 254 attendees for PyCon US 2025. Mastodon Become a Member Help the PSF promote, protect, and advance the Python programming language and community! Membership FAQ Donate Assist the foundation's goals with a donation. The PSF is a recognized 501(c)(3) non-profit organization. How to Contribute Volunteer Learn how you can help the PSF and the greater Python community! How to Volunteer Sponsors Without our sponsors we wouldn't be able to help the Python community grow and prosper. Sponsorship Possibilities PSF Grants Program The Python Software Foundation welcomes grant proposals for projects related to the development of Python, Python-related technology, and educational resources. Proposal Guidelines, FAQ and Examples PSF News PSF Distinguished Service Award Granted to Thomas Wouters PSF Distinguished Service Award Granted to Van Lindberg PSF Distinguished Service Award Granted to Ewa Jodlowska Announcing Python Software Foundation Fellow Members for Q4 2024! \ud83c\udf89 Where is the PSF? 2025 Edition PSF Newsletter: Awards, Grants, & PyCon US 2025! Powering Python together in 2025, thanks to our community! PSF Grants: Program & Charter Updates (TLDR) PSF Grants: Program & Charter Updates (Part 1) PSF Grants: Program & Charter Updates (Part 2) \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice"
  },
  "http://wiki.python.org/moin/Languages": {
    "url": "http://wiki.python.org/moin/Languages",
    "content": "Languages - Python Wiki Search: Languages Languages FrontPage RecentChanges FindPage HelpContents Languages Page Immutable Page Comments Info Attachments More Actions: Raw Text Print View Delete Cache ------------------------ Check Spelling Like Pages Local Site Map ------------------------ Rename Page Delete Page ------------------------ ------------------------ Remove Spam Revert to this revision ------------------------ SlideShow User Login Attempt to have languages and links listed in the native tongue of the user. 2009-09-01 This page's links go to the various languages' pages, most of which have been copied from the other set of language pages, with a few updates. Ideally, all the pages should be like the Polish or Turkish pages - all native language, only the necessary English. There are some ground rules, some are laid down by the site admins, some are my suggestions: Pages must be named in ASCII and English ( PolishLanguage ) Pages must have an explanation in English at the top (Links to Python information in <language X>) (my suggestion) We probably want to limit invites to edit the pages to people we know well, or Pythonistas with a track record.  Hopefully, this is inclusive enough without opening the site up to a spam flood and vandalismfest. Where these pages really need help: check links, remove broken ones. add new links that are quality Python information and active. some care for languages that have next to nothing, but do have people in the Python community - even a link to the Wikipedia page for Python, in that language, is a start (Some are pretty complete and of high quality - the Russian language Wikipedia page for Python, for instance, packs a lot in). Languages AfrikaansLanguage Afrikaans AlbanianLanguage Shqip AmharicLanguage \u12a0\u121b\u122d\u129b ArabicLanguage \u0627\u0644\u0639\u0631\u0628\u064a\u0629 ArmenianLanguage \u0540\u0561\u0575\u0565\u0580\u0565\u0576 AssameseLanguage \u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09be AzerbaijaniLanguage Az\u0259rbaycan dili BelarusianLanguage \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u043c\u043e\u0432\u0430 BengaliLanguage \u09ac\u09be\u0982\u09b2\u09be BodoLanguage \u092c\u0921\u093c\u094b BosnianLanguage bosanski BulgarianLanguage \u0431\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 \u0435\u0437\u0438\u043a BurmeseLanguage \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c CatalanLanguage catal\u00e0 ChineseLanguage \u4e2d\u6587 CroatianLanguage hrvatski CzechLanguage \u010de\u0161tina DanishLanguage dansk DogriLanguage \u0921\u094b\u0917\u0930\u0940 Devanagari script DutchLanguage Nederlands EsperantoLanguage Esperanto EstonianLanguage eesti keel FinnishLanguage suomi FrenchLanguage fran\u00e7ais GeorgianLanguage \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 \u10d4\u10dc\u10d0 GermanLanguage Deutsch GreekLanguage \u039d\u03ad\u03b1 \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac GujaratiLanguage \u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 HausaLanguage Hausa HebrewLanguage \u05e2\u05b4\u05d1\u05b0\u05e8\u05b4\u05d9\u05ea HindiLanguage \u0939\u093f\u0928\u094d\u0926\u0940 HungarianLanguage magyar nyelv IndonesianLanguage Bahasa Indonesia IcelandicLanguage \u00edslenska IgboLanguage As\u1ee5s\u1ee5 Igbo ItalianLanguage italiano JapaneseLanguage \u65e5\u672c\u8a9e KannadaLanguage \u0c95\u0ca8\u0ccd\u0ca8\u0ca1 KashmiriLanguage \u0915\u0949\u0936\u0941\u0930 (Koshur) KazakhLanguage \u049a\u0430\u0437\u0430\u049b \u0442\u0456\u043b\u0456 KhmerLanguage \u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a KonkaniLanguage \u0915\u094b\u0902\u0915\u0923\u0940 Devangari script KoreanLanguage \ud55c\uad6d\uc5b4/\uc870\uc120\ub9d0 LaoLanguage \u0e9e\u0eb2\u0eaa\u0eb2\u0ea5\u0eb2\u0ea7 LatvianLanguage latvie\u0161u valoda LithuanianLanguage lietuvi\u0173 kalba MalayLanguage Bahasa Melayu MalayalamLanguage \u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 MarathiLanguage \u092e\u0930\u093e\u0920\u0940 MongolianLanguage \u041c\u043e\u043d\u0433\u043e\u043b \u0445\u044d\u043b NepaliLanguage \u0928\u0947\u092a\u093e\u0932\u0940 NorwegianLanguage norsk OriyaLanguage \u0b13\u0b21\u0b3c\u0b3f\u0b06 OromoLanguage Afaan Oromoo PersianLanguage \u0641\u0627\u0631\u0633\u06cc PolishLanguage j\u0119zyk polski PortugueseLanguage portugu\u00eas PunjabiLanguage \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 WesternPunjabiLanguage \u067e\u0646\u062c\u0627\u0628\u06cc RomanianLanguage limba rom\u00e2n\u0103 RussianLanguage \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a SanskritLanguage \u0938\u0902\u0938\u094d\u0915\u0943\u0924 SlovakLanguage slovensk\u00fd jazyk SloveneLanguage sloven\u0161\u010dina SerbianLanguage \u0421\u0440\u043f\u0441\u043a\u0438 SinhalaLanguage \u0dc3\u0dd2\u0d82\u0dc4\u0dbd SpanishLanguage espa\u00f1ol SwahiliLanguage Kiswahili SwedishLanguage svenska TagalogLanguage Wikang Tagalog TamilLanguage \u0ba4\u0bae\u0bbf\u0bb4 TeluguLanguage \u0c24\u0c46\u0c32\u0c41\u0c17\u0c41 ThaiLanguage \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22 TigrinyaLanguage \u1275\u130d\u122d\u129b TurkishLanguage T\u00fcrk\u00e7e UkranianLanguage \u0443\u043a\u0440\u0430\u0457\u0301\u043d\u0441\u044c\u043a\u0430 \u043c\u043e\u0301\u0432\u0430 UrduLanguage \u0627\u064f\u0631\u062f\u0648\u064f UzbekLanguage O\u2018zbek tili VietnameseLanguage ti\u1ebfng Vi\u1ec7t XhosaLanguage isiXhosa ZuluLanguage isiZulu CategoryLanguage CategoryUnicode CategoryLanguage Languages  (last edited 2023-08-06 11:31:05 by MarcAndreLemburg ) MoinMoin Powered Python Powered GPL licensed Valid HTML 4.01 Unable to edit the page? See the FrontPage for instructions."
  },
  "http://pyfound.blogspot.com/": {
    "url": "http://pyfound.blogspot.com/",
    "content": "Python Software Foundation News News from the Python Software Foundation Wednesday, March 12, 2025 PSF Distinguished Service Award Granted to Thomas Wouters Thomas Wouters, a longtime member of the PSF Board, has been recognized with the PSF\u2019s Distinguished Service Award. Over the last 25 years, Thomas has been a steady, welcoming presence in the Python community, serving in countless critical roles\u2014often behind the scenes. Thomas has served three separate terms on the PSF Board (2001\u20132004, 2017\u20132019, and 2020\u20132023), including his final year as Board Chair. He even stepped in as General Manager for six months, leading our staff during the search for a new Executive Director. On top of that, he served five years on the Steering Council, helping guide key technical decisions for Python itself, and is the Release Manager for both Python 3.12 and 3.13. The PSF\u2019s Distinguished Service Award ( DSA ) is granted to individuals who make sustained exemplary contributions to the Python community. Each award is voted on by the PSF Board and they are looking for people whose impact has positively and significantly shaped the Python world. Thomas\u2019 work with the Python community very much exemplifies the ethos of \u201cbuild the community you want to see.\u201d After receiving the award Thomas shared, \"I'm incredibly proud of what we, as a community, have created and continue to create in the PSF: a caring, diverse, inclusive and considerate environment, and a stable foundation for everyone everywhere in the Python community to thrive and prosper.\" Whether it was keeping meetings running smoothly, handling critical admin tasks, stepping up wherever needed, or acting as a historian of the PSF and Python\u2019s evolution, Thomas has done it all\u2014and with unmatched dedication. Curious about previous recipients of the DSA or wondering how to nominate someone? Check out the PSF\u2019s Distinguished Service Awards page . The PSF also bestows Community Service Awards to recognize outstanding community members\u2013 if you\u2019d like to learn more about CSAs and how they differ from DSAs, check out our Service Awards given by the PSF: what are they and how they differ blog post . Posted by Marie Nordin at 3/12/2025 11:32:00 AM Tuesday, March 11, 2025 PSF Distinguished Service Award Granted to Van Lindberg Van Lindberg, a longtime member of the PSF Board, has been recognized with the PSF\u2019s Distinguished Service Award. Van was the co-chair and then Chair of PyCon from 2008-2012, served on the PSF Board for over a decade (2012\u20132023), including four years as Chair (2012\u20132016) and seven years as PSF General Counsel from 2016-2023. Throughout his time with us, Van was our go-to expert for all things legal, bringing invaluable insights from the broader open-source world to help the PSF grow and stay ahead of the curve. During his time on the board, Van was instrumental in establishing the PSF as a professional organization able to support the worldwide Python community. The PSF\u2019s Distinguished Service Award ( DSA ) is granted to individuals who make sustained exemplary contributions to the Python community. Each award is voted on by the PSF Board and they are looking for people whose impact has positively and significantly shaped the Python world. Van\u2019s work with the Python community very much exemplifies the ethos of \u201cbuild the community you want to see.\u201d After receiving the award, Van shared, \u201cI am deeply honored to receive the DSA. The kindness and support of this community are truly exceptional, and I am grateful for every moment I've been able to spend contributing alongside so many excellent people.\u201d From licensing and hiring to fundraising, Van was there every step of the way as the PSF experienced phenomenal growth. His deep understanding of open-source communities\u2014paired with his legal expertise\u2014helped the Foundation navigate challenges and embrace opportunities to better serve the global Python community. Curious about previous recipients of the DSA or wondering how to nominate someone? Check out the PSF\u2019s Distinguished Service Awards page . The PSF also bestows Community Service Awards to recognize outstanding community members\u2013 if you\u2019d like to learn more about CSAs and how they differ from DSAs, check out our Service Awards given by the PSF: what are they and how they differ blog post . Posted by Marie Nordin at 3/11/2025 11:53:00 AM Older Posts Home Subscribe to: Posts (Atom) Mission The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Python Software Foundation Grants Program Membership Awards Meeting Minutes PSF Sponsors A big thank you to the above PSF sponsors for supporting our mission! Blog Archive \u25bc 2025 (6) \u25bc March (4) PSF Distinguished Service Award Granted to Thomas ... PSF Distinguished Service Award Granted to Van Lin... PSF Distinguished Service Award Granted to Ewa Jod... Announcing Python Software Foundation Fellow Membe... \u25ba February (1) \u25ba January (1) \u25ba 2024 (58) \u25ba December (6) \u25ba November (5) \u25ba October (3) \u25ba September (2) \u25ba August (4) \u25ba July (7) \u25ba June (16) \u25ba May (4) \u25ba April (2) \u25ba March (2) \u25ba February (3) \u25ba January (4) \u25ba 2023 (37) \u25ba December (1) \u25ba November (3) \u25ba October (3) \u25ba September (2) \u25ba August (3) \u25ba June (5) \u25ba May (12) \u25ba April (2) \u25ba March (1) \u25ba February (3) \u25ba January (2) \u25ba 2022 (35) \u25ba December (2) \u25ba November (3) \u25ba October (2) \u25ba July (3) \u25ba June (6) \u25ba May (12) \u25ba April (2) \u25ba March (3) \u25ba February (1) \u25ba January (1) \u25ba 2021 (42) \u25ba December (3) \u25ba November (4) \u25ba October (3) \u25ba September (2) \u25ba August (1) \u25ba July (2) \u25ba June (4) \u25ba May (12) \u25ba April (5) \u25ba March (1) \u25ba February (4) \u25ba January (1) \u25ba 2020 (51) \u25ba December (8) \u25ba November (3) \u25ba October (3) \u25ba September (4) \u25ba July (4) \u25ba June (2) \u25ba May (10) \u25ba April (11) \u25ba March (4) \u25ba January (2) \u25ba 2019 (45) \u25ba December (3) \u25ba November (3) \u25ba October (3) \u25ba September (4) \u25ba August (3) \u25ba July (3) \u25ba June (5) \u25ba May (11) \u25ba April (1) \u25ba March (2) \u25ba February (5) \u25ba January (2) \u25ba 2018 (31) \u25ba December (5) \u25ba November (1) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (3) \u25ba June (3) \u25ba May (5) \u25ba April (2) \u25ba March (2) \u25ba February (1) \u25ba January (2) \u25ba 2017 (32) \u25ba December (3) \u25ba November (2) \u25ba October (4) \u25ba September (6) \u25ba August (2) \u25ba July (2) \u25ba May (2) \u25ba April (3) \u25ba March (2) \u25ba February (2) \u25ba January (4) \u25ba 2016 (27) \u25ba December (2) \u25ba October (2) \u25ba August (4) \u25ba July (1) \u25ba June (3) \u25ba May (6) \u25ba April (4) \u25ba March (2) \u25ba January (3) \u25ba 2015 (67) \u25ba December (2) \u25ba November (4) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (4) \u25ba June (6) \u25ba May (4) \u25ba April (13) \u25ba March (14) \u25ba February (9) \u25ba January (4) \u25ba 2014 (14) \u25ba October (1) \u25ba September (1) \u25ba August (2) \u25ba July (1) \u25ba May (1) \u25ba April (1) \u25ba March (2) \u25ba February (3) \u25ba January (2) \u25ba 2013 (18) \u25ba November (1) \u25ba September (2) \u25ba August (1) \u25ba July (1) \u25ba June (1) \u25ba April (1) \u25ba March (5) \u25ba February (3) \u25ba January (3) \u25ba 2012 (21) \u25ba December (3) \u25ba November (2) \u25ba October (2) \u25ba September (1) \u25ba August (1) \u25ba July (1) \u25ba June (2) \u25ba May (4) \u25ba April (1) \u25ba March (1) \u25ba January (3) \u25ba 2011 (55) \u25ba December (2) \u25ba November (1) \u25ba October (7) \u25ba September (5) \u25ba August (2) \u25ba July (1) \u25ba June (3) \u25ba May (8) \u25ba April (8) \u25ba March (13) \u25ba February (2) \u25ba January (3) \u25ba 2010 (35) \u25ba December (4) \u25ba November (1) \u25ba October (3) \u25ba September (2) \u25ba August (1) \u25ba July (8) \u25ba June (6) \u25ba May (2) \u25ba April (4) \u25ba March (2) \u25ba January (2) \u25ba 2009 (21) \u25ba December (1) \u25ba October (1) \u25ba September (6) \u25ba August (4) \u25ba July (4) \u25ba June (1) \u25ba May (2) \u25ba April (1) \u25ba February (1) \u25ba 2008 (23) \u25ba December (1) \u25ba November (1) \u25ba October (1) \u25ba August (3) \u25ba July (1) \u25ba May (3) \u25ba April (1) \u25ba March (5) \u25ba February (4) \u25ba January (3) \u25ba 2007 (26) \u25ba December (3) \u25ba November (2) \u25ba October (6) \u25ba September (1) \u25ba August (1) \u25ba July (1) \u25ba June (2) \u25ba May (1) \u25ba April (1) \u25ba March (2) \u25ba February (3) \u25ba January (3) \u25ba 2006 (39) \u25ba December (3) \u25ba November (4) \u25ba October (5) \u25ba September (4) \u25ba August (4) \u25ba July (3) \u25ba May (7) \u25ba April (6) \u25ba March (3) Powered by Blogger ."
  },
  "https://us.pycon.org/2025/about/pycon/": {
    "url": "https://us.pycon.org/2025/about/pycon/",
    "content": "What is PyCon US?\n            \n            \n            \n            - PyCon US 2025 Skip to content Skip to navigation Skip to footer About What is PyCon US? Health & Safety Guidelines Python Software Foundation Code of Conduct Diversity Support Sponsor Why Sponsor? Sponsors Speaking Proposal Guidelines Proposing a Talk Proposing a Tutorial Proposing a Charla Proposing a Poster Proposal Mentorship Schedule Tutorials (Wed. and Thurs.) Sponsor Presentations (Thursday) Talks (Friday - Sunday) Posters (Sunday) Keynote Speakers Attend Registration Information Travel Grants Travel Grants FAQ International Travel Expo Hall Community Booths Startup Row Venue Hotels Traveling to Pittsburgh Public Transit in Pittsburgh Local Recommendations Events Newcomer Orientation Opening Reception Job Fair & Community Showcase Maintainers Summit Typing Summit WebAssembly Summit Education Summit Language Summit Mentored Sprints for Diverse Beginners PyLadies Auction PyLadies Luncheon Open Spaces Lightning Talks Hatchery Program Development Sprints Search Log in Sign Up What is PyCon US? We are so excited to welcome our community back to the David L. Lawrence Convention Center in Pittsburgh, Pennsylvania for PyCon US 2025! What happens at PyCon US? At PyCon US 2025, you will find an amazing program filled with pre-conference tutorials and sponsor presentations, 90+ of our community\u2019s best talks, which includes our Charlas track, brilliant keynote speakers, posters on display, a lively Expo Hall filled with our incredible Sponsors\u2019 booths, and our famed lightning talks on each main conference day. Following the conference days, there are 4 days of sprints that are free to all attendees and offer an opportunity for anyone to collaborate and contribute to a project even if it is their first time. PyCon US offers a whole host of events such as the Job Fair, Summits, Open Spaces, and PyLadies Auction, and don\u2019t forget about the \u2018hallway\u2019 track, which brings together Python users from around the world. PyCon US 2025 Dates: Tutorials - May 14-15, 2025 Sponsor Presentations - May 15, 2025 Opening Reception - May 15, 2025 Main Conference - May 16-18, 2025 Job Fair - May 18, 2025 Sprints - May 19-May 22, 2025 Register for PyCon US Today! Who attends PyCon US? PyCon US attracts a unique audience of Python users and community members, from beginners just learning the language to the leading developers in the field to community organizers to the contributors who guide the development of the language itself. Check out our 2024 recap to learn about who attended the last PyCon US. Every year, we hear from sponsors and other attendees that the people they meet at PyCon US are the most engaged conference audience they\u2019ve encountered, that they have conversations there they don\u2019t have anywhere else, and that without exaggeration the course of their lives have been changed by encounters at the event. PyCon US is a diverse conference dedicated to providing an enjoyable experience to everyone. Help us ensure this by following our Code of Conduct . Who makes PyCon US possible? PyCon US is the largest and longest-running annual gathering for the community using and developing the open-source Python programming language. It is produced and underwritten by the Python Software Foundation , the 501(c)(3) nonprofit organization dedicated to advancing and promoting Python and its community. Through PyCon US, the PSF advances its mission of growing the international community of Python programmers. PyCon US is run by the PSF, and the revenue generated by PyCon US is essential to our continued community support and operations. Because the PSF is a nonprofit, we keep PyCon US registration costs much lower than comparable technology conferences. Our goal is for PyCon US to remain accessible to the widest group possible. The PSF also develops the software that runs PyCon US and makes it available under a liberal open source license. As a nonprofit organization, the PSF depends on our generous Sponsors and donors to make PyCon US and the rest of our work supporting the Python ecosystem possible. Learn more about sponsoring the PSF and PyCon US here and apply to Sponsor today , or donate directly to the PSF. We can\u2019t wait to celebrate PyCon US with you, see you in Pittsburgh! Contacts Elaine Wong , Conference Chair Jon Banafato , Conference Co-Chair Olivia Sauls , Program Director - olivia@python.org Loren Crary , Sponsorships - sponsors@python.org About Pittsburgh, PA Visit https://www.visitpittsburgh.com/ and the PyCon US Blog for more information about Pittsburgh and all it has to offer! The PyCon US 2025 conference in Pittsburgh, Pennsylvania, USA is a production of the Python Software Foundation . This site is built using Django and Wagtail . PyCon US 2025 illustration and design by Malek Jerbi and Hamza Haj Taieb , Coordinated by Georgi K Site design implemented by YupGup . Need help? Check out our Support page to find the correct person to contact. Privacy Notice \u00a9 Python Software Foundation Search Search ESC"
  },
  "https://wiki.python.org/moin/": {
    "url": "https://wiki.python.org/moin/",
    "content": "FrontPage - Python Wiki Search: FrontPage FrontPage FrontPage RecentChanges FindPage HelpContents Page Immutable Page Comments Info Attachments More Actions: Raw Text Print View Delete Cache ------------------------ Check Spelling Like Pages Local Site Map ------------------------ Rename Page Delete Page ------------------------ ------------------------ Remove Spam Revert to this revision ------------------------ SlideShow User Login The Python Wiki Welcome to the Python Wiki, a user-editable compendium of knowledge based around the Python programming language. Some pages are protected against casual editing - see WikiEditingGuidelines for more information about editing content. Python is a great object-oriented, interpreted, and interactive programming language. It is often compared (favorably of course ) to Lisp, Tcl, Perl, Ruby, C#, Visual Basic, Visual Fox Pro, Scheme or Java... and it's much more fun. Python combines remarkable power with very clear syntax. It has modules, classes, exceptions, very high level dynamic data types, and dynamic typing. There are interfaces to many system calls and libraries, as well as to various windowing systems . New built-in modules are easily written in C or C++ (or other languages, depending on the chosen implementation ). Python is also usable as an extension language for applications written in other languages that need easy-to-use scripting or automation interfaces. Getting Started Events and Community Software Core Development Using and Editing the Wiki Getting Started Beginners Guide Documentation Links to tutorials, courses and resources Learning materials, topic guides and links to central resources Beginner Errors Python Books Some common pitfalls of beginners Books about Python plus reviews Asking for Help Python Audio Materials Questions asked by beginners, answered here A mixture of introductory and topical material Languages Python Implementations Resources written in languages other than English Different software which runs programs in the Python language See also the documentation category for all known documentation-related pages. Events, Courses, Conferences, Community Python Conferences - information about the Python conference scene Local User Groups - find a Python group near you Python Training - Python training courses Python Events - event listing for conferences, training courses and more Python Event Calendars - calendars for Python conferences and user groups Participating in the Community - where people using and producing Python get together Python Software Foundation - show your support by joining the Foundation behind Python Find a job where you can use Python - Python job boards around the world Python Software Python Projects Development Tools Information on finding software projects written in Python, including... Managing your code more effectively Applications Python Editors Ready-to-run applications which use Python Editing your code more effectively Useful Modules Publishing Python Modules Some building blocks for your own projects (including frameworks for database, GUI, Web programming) How to make others aware of your own works Python Core Development Tools The Python Web Site Bug Tracker Maintaining the official Python online resources Roundup and the code review services used by the Python project Package Index Other Resources The infrastructure behind Python package hosting A list of all development process-related resources on this Wiki Using this Wiki This Wiki is a community place to gather and organize all things about Python. Feel free to exercise your editorial skills and expertise to make it a useful knowledge base and up-to-date reference on all Python-related topics. There are some guidelines describing the policies and rules governing this Wiki and how you can most effectively contribute to it. A list of site improvements describes various tasks where your help would be appreciated. To keep up with changes on this site, check RecentChanges frequently or follow it using RSS: RSS feed . Creating a Wiki account In order to sign up for a wiki account, please go to the Create new account form, enter your account name (using the format FirstnameLastname to avoid issues - please don't use spaces in the name) and provide a password, plus email address (for password recovery). Editing pages Since spamming and vandalism on this wiki had reached a level that required constant intervention, unfamiliar users are no longer allowed to edit pages. However all you need to do is introduce yourself to the wiki admin group to become an editor. If you want to edit a page and have just signed up, or find that you can no longer edit a page that you could edit before, please write to the pydotorg-www mailing list describing what you would like to edit, and we'll add you to the EditorsGroup . Please include your account name (wiki name) in this message. Sorry for any inconvenience, but we want to keep this wiki a useful tool for the community, while at the same time preventing the wiki admins from burning out cleaning up junk. Reporting problems In case of emergency, please contact the python.org maintainers , or if experiencing difficulties, contact the pydotorg-www mailing list to say \"help\". Wiki Attack in January 2013 The wiki was subject to an attack on January 5 2013. Since it was not clear whether user account data was stolen, all passwords were subsequently reset, so you will have to use the password recovery function to get a new password. See the wiki attack description page for more details. If you find problems, please report them to the pydotorg-www mailing list <pydotorg-www@python.org> . HTTPS access to the Wiki We have enabled HTTPS access to the wiki to further enhance security and avoid having to send clear text passwords over the network in order to log in to the wikis. If you have not been using HTTPS links to the wiki login page , please be advised that your password may have been sniffed on the network at e.g. a conference. It is best to change it and stop using HTTP links to the wiki login page. FrontPage  (last edited 2018-09-16 15:22:36 by SteveHolden ) MoinMoin Powered Python Powered GPL licensed Valid HTML 4.01 Unable to edit the page? See the FrontPage for instructions."
  },
  "http://flask.pocoo.org/": {
    "url": "http://flask.pocoo.org/",
    "content": "Welcome to Flask \u2014 Flask Documentation (3.1.x) Navigation index modules | next | Flask Documentation (3.1.x) \u00bb Welcome to Flask Welcome to Flask \u00b6 Welcome to Flask\u2019s documentation. Flask is a lightweight WSGI web application framework.\nIt is designed to make getting started quick and easy, with the ability to scale up to\ncomplex applications. Get started with Installation and then get an overview with the Quickstart . There is also a\nmore detailed Tutorial that shows how to create a small but\ncomplete application with Flask. Common patterns are described in the Patterns for Flask section. The rest of the docs describe each\ncomponent of Flask in detail, with a full reference in the API section. Flask depends on the Werkzeug WSGI toolkit, the Jinja template engine, and the Click CLI toolkit. Be sure to check their documentation as well as Flask\u2019s when\nlooking for information. User\u2019s Guide \u00b6 Flask provides configuration and conventions, with sensible defaults, to get started.\nThis section of the documentation explains the different parts of the Flask framework\nand how they can be used, customized, and extended. Beyond Flask itself, look for\ncommunity-maintained extensions to add even more functionality. Installation Python Version Dependencies Virtual environments Install Flask Quickstart A Minimal Application Debug Mode HTML Escaping Routing Static Files Rendering Templates Accessing Request Data Redirects and Errors About Responses Sessions Message Flashing Logging Hooking in WSGI Middleware Using Flask Extensions Deploying to a Web Server Tutorial Project Layout Application Setup Define and Access the Database Blueprints and Views Templates Static Files Blog Blueprint Make the Project Installable Test Coverage Deploy to Production Keep Developing! Templates Jinja Setup Standard Context Controlling Autoescaping Registering Filters Context Processors Streaming Testing Flask Applications Identifying Tests Fixtures Sending Requests with the Test Client Following Redirects Accessing and Modifying the Session Running Commands with the CLI Runner Tests that depend on an Active Context Handling Application Errors Error Logging Tools Error Handlers Custom Error Pages Blueprint Error Handlers Returning API Errors as JSON Logging Debugging Debugging Application Errors In Production The Built-In Debugger External Debuggers Logging Basic Configuration Email Errors to Admins Injecting Request Information Other Libraries Configuration Handling Configuration Basics Debug Mode Builtin Configuration Values Configuring from Python Files Configuring from Data Files Configuring from Environment Variables Configuration Best Practices Development / Production Instance Folders Signals Core Signals Subscribing to Signals Creating Signals Sending Signals Signals and Flask\u2019s Request Context Decorator Based Signal Subscriptions Class-based Views Basic Reusable View URL Variables View Lifetime and self View Decorators Method Hints Method Dispatching and APIs Application Structure and Lifecycle Application Setup Serving the Application How a Request is Handled The Application Context Purpose of the Context Lifetime of the Context Manually Push a Context Storing Data Events and Signals The Request Context Purpose of the Context Lifetime of the Context Manually Push a Context How the Context Works Callbacks and Errors Notes On Proxies Modular Applications with Blueprints Why Blueprints? The Concept of Blueprints My First Blueprint Registering Blueprints Nesting Blueprints Blueprint Resources Building URLs Blueprint Error Handlers Extensions Finding Extensions Using Extensions Building Extensions Command Line Interface Application Discovery Run the Development Server Open a Shell Environment Variables From dotenv Environment Variables From virtualenv Custom Commands Plugins Custom Scripts PyCharm Integration Development Server Command Line In Code Working with the Shell Command Line Interface Creating a Request Context Firing Before/After Request Further Improving the Shell Experience Patterns for Flask Large Applications as Packages Application Factories Application Dispatching Using URL Processors Using SQLite 3 with Flask SQLAlchemy in Flask Uploading Files Caching View Decorators Form Validation with WTForms Template Inheritance Message Flashing JavaScript, fetch , and JSON Lazily Loading Views MongoDB with MongoEngine Adding a favicon Streaming Contents Deferred Request Callbacks Adding HTTP Method Overrides Request Content Checksums Background Tasks with Celery Subclassing Flask Single-Page Applications Security Considerations Resource Use Cross-Site Scripting (XSS) Cross-Site Request Forgery (CSRF) JSON Security Security Headers Copy/Paste to Terminal Deploying to Production Self-Hosted Options Hosting Platforms Using async and await Performance Background tasks When to use Quart instead Extensions Other event loops API Reference \u00b6 If you are looking for information on a specific function, class or\nmethod, this part of the documentation is for you. API Application Object Blueprint Objects Incoming Request Data Response Objects Sessions Session Interface Test Client Test CLI Runner Application Globals Useful Functions and Classes Message Flashing JSON Support Template Rendering Configuration Stream Helpers Useful Internals Signals Class-Based Views URL Route Registrations View Function Options Command Line Interface Additional Notes \u00b6 Design Decisions in Flask The Explicit Application Object The Routing System One Template Engine What does \u201cmicro\u201d mean? Thread Locals Async/await and ASGI support What Flask is, What Flask is Not Flask Extension Development Naming The Extension Class and Initialization Adding Behavior Configuration Techniques Data During a Request Views and Models Recommended Extension Guidelines Contributing BSD-3-Clause License Changes Version 3.1.1 Version 3.1.0 Version 3.0.3 Version 3.0.2 Version 3.0.1 Version 3.0.0 Version 2.3.3 Version 2.3.2 Version 2.3.1 Version 2.3.0 Version 2.2.5 Version 2.2.4 Version 2.2.3 Version 2.2.2 Version 2.2.1 Version 2.2.0 Version 2.1.3 Version 2.1.2 Version 2.1.1 Version 2.1.0 Version 2.0.3 Version 2.0.2 Version 2.0.1 Version 2.0.0 Version 1.1.4 Version 1.1.3 Version 1.1.2 Version 1.1.1 Version 1.1.0 Version 1.0.4 Version 1.0.3 Version 1.0.2 Version 1.0.1 Version 1.0 Version 0.12.5 Version 0.12.4 Version 0.12.3 Version 0.12.2 Version 0.12.1 Version 0.12 Version 0.11.1 Version 0.11 Version 0.10.1 Version 0.10 Version 0.9 Version 0.8.1 Version 0.8 Version 0.7.2 Version 0.7.1 Version 0.7 Version 0.6.1 Version 0.6 Version 0.5.2 Version 0.5.1 Version 0.5 Version 0.4 Version 0.3.1 Version 0.3 Version 0.2 Version 0.1 Project Links Donate PyPI Releases Source Code Issue Tracker Chat Contents Welcome to Flask User\u2019s Guide API Reference Additional Notes Quick search \u00a9 Copyright 2010 Pallets.\n      Created using Sphinx 8.2.3."
  },
  "https://kivy.org/": {
    "url": "https://kivy.org/",
    "content": "Kivy: Cross-platform Python Framework for GUI apps Development Docs Gallery About Sponsor Us Blog Kivy 2.3.1 has been released! LEARN MORE Kivy: The Open Source Python App Development Framework. Build and distribute beautiful Python cross-platform GUI apps with ease. Kivy runs on Android, iOS, Linux, macOS and Windows. MIT License 17.0K Stars Get started! Kivy has been built to be easy to use , cross-platform and fast . With a single codebase , you will be able to deploy apps on Windows , Linux , macOS , iOS and Android . Business Friendly Kivy is released under the MIT License , is 100% free to use, and is professionally developed, backed and\n          maintained. Companies and individuals are using Kivy for their\n          projects every day . Kivy is kept open source thanks to its contributors and backers . {{organizations.length}} organizations are supporting Kivy : {{ organization.account.name }} {{organization.tier.name}} ${{organization.totalDonations.value}} Amount contributed See all the {{organizations.length}} organizations supporting Kivy on OpenCollective {{individuals.length}} individuals are supporting Kivy See all the {{individuals.length}} individuals supporting Kivy on OpenCollective Start supporting Kivy from $5 Kivy is a free and open source software and is maintained by the\n                    community . Sometimes, a small contribution, could help to keep the wheel spinning flawlessly. Support Kivy as a Backer (Starts from $5/mo) Support Kivy as a Sponsor (Starts from $100/mo) Need help? The Kivy community will love \u2764\ufe0f to help. Join us on Discord Join us on kivy-users group Source\n                code hosted on Github Contact us"
  },
  "https://pyfound.blogspot.com/2025/03/announcing-python-software-foundation.html": {
    "url": "https://pyfound.blogspot.com/2025/03/announcing-python-software-foundation.html",
    "content": "Python Software Foundation News: Announcing Python Software Foundation Fellow Members for Q4 2024! \ud83c\udf89 News from the Python Software Foundation Tuesday, March 04, 2025 Announcing Python Software Foundation Fellow Members for Q4 2024! \ud83c\udf89 The PSF is pleased to announce its fourth batch of PSF Fellows for 2024 ! Let us welcome the new PSF Fellows for Q4 ! The following people continue to do amazing things for the Python community: Jimena Escobar Berm\u00fadez Thank you for your continued contributions. We have added you to our Fellows Roster . The above members help support the Python ecosystem by being phenomenal leaders, sustaining the growth of the Python scientific community, maintaining virtual Python communities, maintaining Python libraries, creating educational material, organizing Python events and conferences, starting Python communities in local regions, and overall being great mentors in our community. Each of them continues to help make Python more accessible around the world. To learn more about the new Fellow members, check out their links above. Let's continue recognizing Pythonistas all over the world for their impact on our community. The criteria for Fellow members is available online: https://www.python.org/psf/fellows/ . If you would like to nominate someone to be a PSF Fellow, please send a description of their Python accomplishments and their email address to psf-fellow at python.org. Quarter 1 nominations are currently in review. We are accepting nominations for Quarter 2 of 2025 until 11:59 p.m. UTC, May 20 Are you a PSF Fellow and want to help the Work Group review nominations? Contact us at psf-fellow at python.org. Posted by Marie Nordin at 3/04/2025 06:40:00 AM Newer Post Older Post Home Mission The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Python Software Foundation Grants Program Membership Awards Meeting Minutes PSF Sponsors A big thank you to the above PSF sponsors for supporting our mission! Blog Archive \u25bc 2025 (6) \u25bc March (4) PSF Distinguished Service Award Granted to Thomas ... PSF Distinguished Service Award Granted to Van Lin... PSF Distinguished Service Award Granted to Ewa Jod... Announcing Python Software Foundation Fellow Membe... \u25ba February (1) \u25ba January (1) \u25ba 2024 (58) \u25ba December (6) \u25ba November (5) \u25ba October (3) \u25ba September (2) \u25ba August (4) \u25ba July (7) \u25ba June (16) \u25ba May (4) \u25ba April (2) \u25ba March (2) \u25ba February (3) \u25ba January (4) \u25ba 2023 (37) \u25ba December (1) \u25ba November (3) \u25ba October (3) \u25ba September (2) \u25ba August (3) \u25ba June (5) \u25ba May (12) \u25ba April (2) \u25ba March (1) \u25ba February (3) \u25ba January (2) \u25ba 2022 (35) \u25ba December (2) \u25ba November (3) \u25ba October (2) \u25ba July (3) \u25ba June (6) \u25ba May (12) \u25ba April (2) \u25ba March (3) \u25ba February (1) \u25ba January (1) \u25ba 2021 (42) \u25ba December (3) \u25ba November (4) \u25ba October (3) \u25ba September (2) \u25ba August (1) \u25ba July (2) \u25ba June (4) \u25ba May (12) \u25ba April (5) \u25ba March (1) \u25ba February (4) \u25ba January (1) \u25ba 2020 (51) \u25ba December (8) \u25ba November (3) \u25ba October (3) \u25ba September (4) \u25ba July (4) \u25ba June (2) \u25ba May (10) \u25ba April (11) \u25ba March (4) \u25ba January (2) \u25ba 2019 (45) \u25ba December (3) \u25ba November (3) \u25ba October (3) \u25ba September (4) \u25ba August (3) \u25ba July (3) \u25ba June (5) \u25ba May (11) \u25ba April (1) \u25ba March (2) \u25ba February (5) \u25ba January (2) \u25ba 2018 (31) \u25ba December (5) \u25ba November (1) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (3) \u25ba June (3) \u25ba May (5) \u25ba April (2) \u25ba March (2) \u25ba February (1) \u25ba January (2) \u25ba 2017 (32) \u25ba December (3) \u25ba November (2) \u25ba October (4) \u25ba September (6) \u25ba August (2) \u25ba July (2) \u25ba May (2) \u25ba April (3) \u25ba March (2) \u25ba February (2) \u25ba January (4) \u25ba 2016 (27) \u25ba December (2) \u25ba October (2) \u25ba August (4) \u25ba July (1) \u25ba June (3) \u25ba May (6) \u25ba April (4) \u25ba March (2) \u25ba January (3) \u25ba 2015 (67) \u25ba December (2) \u25ba November (4) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (4) \u25ba June (6) \u25ba May (4) \u25ba April (13) \u25ba March (14) \u25ba February (9) \u25ba January (4) \u25ba 2014 (14) \u25ba October (1) \u25ba September (1) \u25ba August (2) \u25ba July (1) \u25ba May (1) \u25ba April (1) \u25ba March (2) \u25ba February (3) \u25ba January (2) \u25ba 2013 (18) \u25ba November (1) \u25ba September (2) \u25ba August (1) \u25ba July (1) \u25ba June (1) \u25ba April (1) \u25ba March (5) \u25ba February (3) \u25ba January (3) \u25ba 2012 (21) \u25ba December (3) \u25ba November (2) \u25ba October (2) \u25ba September (1) \u25ba August (1) \u25ba July (1) \u25ba June (2) \u25ba May (4) \u25ba April (1) \u25ba March (1) \u25ba January (3) \u25ba 2011 (55) \u25ba December (2) \u25ba November (1) \u25ba October (7) \u25ba September (5) \u25ba August (2) \u25ba July (1) \u25ba June (3) \u25ba May (8) \u25ba April (8) \u25ba March (13) \u25ba February (2) \u25ba January (3) \u25ba 2010 (35) \u25ba December (4) \u25ba November (1) \u25ba October (3) \u25ba September (2) \u25ba August (1) \u25ba July (8) \u25ba June (6) \u25ba May (2) \u25ba April (4) \u25ba March (2) \u25ba January (2) \u25ba 2009 (21) \u25ba December (1) \u25ba October (1) \u25ba September (6) \u25ba August (4) \u25ba July (4) \u25ba June (1) \u25ba May (2) \u25ba April (1) \u25ba February (1) \u25ba 2008 (23) \u25ba December (1) \u25ba November (1) \u25ba October (1) \u25ba August (3) \u25ba July (1) \u25ba May (3) \u25ba April (1) \u25ba March (5) \u25ba February (4) \u25ba January (3) \u25ba 2007 (26) \u25ba December (3) \u25ba November (2) \u25ba October (6) \u25ba September (1) \u25ba August (1) \u25ba July (1) \u25ba June (2) \u25ba May (1) \u25ba April (1) \u25ba March (2) \u25ba February (3) \u25ba January (3) \u25ba 2006 (39) \u25ba December (3) \u25ba November (4) \u25ba October (5) \u25ba September (4) \u25ba August (4) \u25ba July (3) \u25ba May (7) \u25ba April (6) \u25ba March (3) Powered by Blogger ."
  },
  "http://docs.python.org/3/tutorial/introduction.html#using-python-as-a-calculator": {
    "url": "http://docs.python.org/3/tutorial/introduction.html#using-python-as-a-calculator",
    "content": "3. An Informal Introduction to Python \u2014 Python 3.13.2 documentation Theme Auto Light Dark Table of Contents 3. An Informal Introduction to Python 3.1. Using Python as a Calculator 3.1.1. Numbers 3.1.2. Text 3.1.3. Lists 3.2. First Steps Towards Programming Previous topic 2. Using the Python Interpreter Next topic 4. More Control Flow Tools This Page Report a Bug Show Source Navigation index modules | next | previous | Python \u00bb 3.13.2 Documentation \u00bb The Python Tutorial \u00bb 3. An Informal Introduction to Python | Theme Auto Light Dark | 3. An Informal Introduction to Python \u00c2\u00b6 In the following examples, input and output are distinguished by the presence or\nabsence of prompts ( >>> and \u00e2\u0080\u00a6 ): to repeat the example, you must type\neverything after the prompt, when the prompt appears; lines that do not begin\nwith a prompt are output from the interpreter. Note that a secondary prompt on a\nline by itself in an example means you must type a blank line; this is used to\nend a multi-line command. You can toggle the display of prompts and output by clicking on >>> in the upper-right corner of an example box.  If you hide the prompts\nand output for an example, then you can easily copy and paste the input\nlines into your interpreter. Many of the examples in this manual, even those entered at the interactive\nprompt, include comments.  Comments in Python start with the hash character, # , and extend to the end of the physical line.  A comment may appear at the\nstart of a line or following whitespace or code, but not within a string\nliteral.  A hash character within a string literal is just a hash character.\nSince comments are to clarify code and are not interpreted by Python, they may\nbe omitted when typing in examples. Some examples: # this is the first comment spam = 1 # and this is the second comment # ... and now a third! text = \"# This is not a comment because it's inside quotes.\" 3.1. Using Python as a Calculator \u00c2\u00b6 Let\u00e2\u0080\u0099s try some simple Python commands.  Start the interpreter and wait for the\nprimary prompt, >>> .  (It shouldn\u00e2\u0080\u0099t take long.) 3.1.1. Numbers \u00c2\u00b6 The interpreter acts as a simple calculator: you can type an expression at it\nand it will write the value.  Expression syntax is straightforward: the\noperators + , - , * and / can be used to perform\narithmetic; parentheses ( () ) can be used for grouping.\nFor example: >>> 2 + 2 4 >>> 50 - 5 * 6 20 >>> ( 50 - 5 * 6 ) / 4 5.0 >>> 8 / 5 # division always returns a floating-point number 1.6 The integer numbers (e.g. 2 , 4 , 20 ) have type int ,\nthe ones with a fractional part (e.g. 5.0 , 1.6 ) have type float .  We will see more about numeric types later in the tutorial. Division ( / ) always returns a float.  To do floor division and\nget an integer result you can use the // operator; to calculate\nthe remainder you can use % : >>> 17 / 3 # classic division returns a float 5.666666666666667 >>> >>> 17 // 3 # floor division discards the fractional part 5 >>> 17 % 3 # the % operator returns the remainder of the division 2 >>> 5 * 3 + 2 # floored quotient * divisor + remainder 17 With Python, it is possible to use the ** operator to calculate powers [ 1 ] : >>> 5 ** 2 # 5 squared 25 >>> 2 ** 7 # 2 to the power of 7 128 The equal sign ( = ) is used to assign a value to a variable. Afterwards, no\nresult is displayed before the next interactive prompt: >>> width = 20 >>> height = 5 * 9 >>> width * height 900 If a variable is not \u00e2\u0080\u009cdefined\u00e2\u0080\u009d (assigned a value), trying to use it will\ngive you an error: >>> n # try to access an undefined variable Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> NameError : name 'n' is not defined There is full support for floating point; operators with mixed type operands\nconvert the integer operand to floating point: >>> 4 * 3.75 - 1 14.0 In interactive mode, the last printed expression is assigned to the variable _ .  This means that when you are using Python as a desk calculator, it is\nsomewhat easier to continue calculations, for example: >>> tax = 12.5 / 100 >>> price = 100.50 >>> price * tax 12.5625 >>> price + _ 113.0625 >>> round ( _ , 2 ) 113.06 This variable should be treated as read-only by the user.  Don\u00e2\u0080\u0099t explicitly\nassign a value to it \u00e2\u0080\u0094 you would create an independent local variable with the\nsame name masking the built-in variable with its magic behavior. In addition to int and float , Python supports other types of\nnumbers, such as Decimal and Fraction .\nPython also has built-in support for complex numbers ,\nand uses the j or J suffix to indicate the imaginary part\n(e.g. 3+5j ). 3.1.2. Text \u00c2\u00b6 Python can manipulate text (represented by type str , so-called\n\u00e2\u0080\u009cstrings\u00e2\u0080\u009d) as well as numbers.  This includes characters \u00e2\u0080\u009c ! \u00e2\u0080\u009d, words\n\u00e2\u0080\u009c rabbit \u00e2\u0080\u009d, names \u00e2\u0080\u009c Paris \u00e2\u0080\u009d, sentences \u00e2\u0080\u009c Got your back. \u00e2\u0080\u009d, etc.\n\u00e2\u0080\u009c Yay! :) \u00e2\u0080\u009d. They can be enclosed in single quotes ( '...' ) or double\nquotes ( \"...\" ) with the same result [ 2 ] . >>> 'spam eggs' # single quotes 'spam eggs' >>> \"Paris rabbit got your back :)! Yay!\" # double quotes 'Paris rabbit got your back :)! Yay!' >>> '1975' # digits and numerals enclosed in quotes are also strings '1975' To quote a quote, we need to \u00e2\u0080\u009cescape\u00e2\u0080\u009d it, by preceding it with \\ .\nAlternatively, we can use the other type of quotation marks: >>> 'doesn \\' t' # use \\' to escape the single quote... \"doesn't\" >>> \"doesn't\" # ...or use double quotes instead \"doesn't\" >>> '\"Yes,\" they said.' '\"Yes,\" they said.' >>> \" \\\" Yes, \\\" they said.\" '\"Yes,\" they said.' >>> '\"Isn \\' t,\" they said.' '\"Isn\\'t,\" they said.' In the Python shell, the string definition and output string can look\ndifferent.  The print() function produces a more readable output, by\nomitting the enclosing quotes and by printing escaped and special characters: >>> s = 'First line. \\n Second line.' # \\n means newline >>> s # without print(), special characters are included in the string 'First line.\\nSecond line.' >>> print ( s ) # with print(), special characters are interpreted, so \\n produces new line First line. Second line. If you don\u00e2\u0080\u0099t want characters prefaced by \\ to be interpreted as\nspecial characters, you can use raw strings by adding an r before\nthe first quote: >>> print ( 'C:\\some \\n ame' ) # here \\n means newline! C:\\some ame >>> print ( r 'C:\\some\\name' ) # note the r before the quote C:\\some\\name There is one subtle aspect to raw strings: a raw string may not end in\nan odd number of \\ characters; see the FAQ entry for more information\nand workarounds. String literals can span multiple lines.  One way is using triple-quotes: \"\"\"...\"\"\" or '''...''' .  End-of-line characters are automatically\nincluded in the string, but it\u00e2\u0080\u0099s possible to prevent this by adding a \\ at\nthe end of the line.  In the following example, the initial newline is not\nincluded: >>> print ( \"\"\" \\ ... Usage: thingy [OPTIONS] ... -h                        Display this usage message ... -H hostname               Hostname to connect to ... \"\"\" ) Usage: thingy [OPTIONS] -h                        Display this usage message -H hostname               Hostname to connect to >>> Strings can be concatenated (glued together) with the + operator, and\nrepeated with * : >>> # 3 times 'un', followed by 'ium' >>> 3 * 'un' + 'ium' 'unununium' Two or more string literals (i.e. the ones enclosed between quotes) next\nto each other are automatically concatenated. >>> 'Py' 'thon' 'Python' This feature is particularly useful when you want to break long strings: >>> text = ( 'Put several strings within parentheses ' ... 'to have them joined together.' ) >>> text 'Put several strings within parentheses to have them joined together.' This only works with two literals though, not with variables or expressions: >>> prefix = 'Py' >>> prefix 'thon' # can't concatenate a variable and a string literal File \"<stdin>\" , line 1 prefix 'thon' ^^^^^^ SyntaxError : invalid syntax >>> ( 'un' * 3 ) 'ium' File \"<stdin>\" , line 1 ( 'un' * 3 ) 'ium' ^^^^^ SyntaxError : invalid syntax If you want to concatenate variables or a variable and a literal, use + : >>> prefix + 'thon' 'Python' Strings can be indexed (subscripted), with the first character having index 0.\nThere is no separate character type; a character is simply a string of size\none: >>> word = 'Python' >>> word [ 0 ] # character in position 0 'P' >>> word [ 5 ] # character in position 5 'n' Indices may also be negative numbers, to start counting from the right: >>> word [ - 1 ] # last character 'n' >>> word [ - 2 ] # second-last character 'o' >>> word [ - 6 ] 'P' Note that since -0 is the same as 0, negative indices start from -1. In addition to indexing, slicing is also supported.  While indexing is used\nto obtain individual characters, slicing allows you to obtain a substring: >>> word [ 0 : 2 ] # characters from position 0 (included) to 2 (excluded) 'Py' >>> word [ 2 : 5 ] # characters from position 2 (included) to 5 (excluded) 'tho' Slice indices have useful defaults; an omitted first index defaults to zero, an\nomitted second index defaults to the size of the string being sliced. >>> word [: 2 ] # character from the beginning to position 2 (excluded) 'Py' >>> word [ 4 :] # characters from position 4 (included) to the end 'on' >>> word [ - 2 :] # characters from the second-last (included) to the end 'on' Note how the start is always included, and the end always excluded.  This\nmakes sure that s[:i] + s[i:] is always equal to s : >>> word [: 2 ] + word [ 2 :] 'Python' >>> word [: 4 ] + word [ 4 :] 'Python' One way to remember how slices work is to think of the indices as pointing between characters, with the left edge of the first character numbered 0.\nThen the right edge of the last character of a string of n characters has\nindex n , for example: +---+---+---+---+---+---+ | P | y | t | h | o | n | +---+---+---+---+---+---+ 0 1 2 3 4 5 6 - 6 - 5 - 4 - 3 - 2 - 1 The first row of numbers gives the position of the indices 0\u00e2\u0080\u00a66 in the string;\nthe second row gives the corresponding negative indices. The slice from i to j consists of all characters between the edges labeled i and j ,\nrespectively. For non-negative indices, the length of a slice is the difference of the\nindices, if both are within bounds.  For example, the length of word[1:3] is\n2. Attempting to use an index that is too large will result in an error: >>> word [ 42 ] # the word only has 6 characters Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> IndexError : string index out of range However, out of range slice indexes are handled gracefully when used for\nslicing: >>> word [ 4 : 42 ] 'on' >>> word [ 42 :] '' Python strings cannot be changed \u00e2\u0080\u0094 they are immutable .\nTherefore, assigning to an indexed position in the string results in an error: >>> word [ 0 ] = 'J' Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'str' object does not support item assignment >>> word [ 2 :] = 'py' Traceback (most recent call last): File \"<stdin>\" , line 1 , in <module> TypeError : 'str' object does not support item assignment If you need a different string, you should create a new one: >>> 'J' + word [ 1 :] 'Jython' >>> word [: 2 ] + 'py' 'Pypy' The built-in function len() returns the length of a string: >>> s = 'supercalifragilisticexpialidocious' >>> len ( s ) 34 See also Text Sequence Type \u00e2\u0080\u0094 str Strings are examples of sequence types , and support the common\noperations supported by such types. String Methods Strings support a large number of methods for\nbasic transformations and searching. f-strings String literals that have embedded expressions. Format String Syntax Information about string formatting with str.format() . printf-style String Formatting The old formatting operations invoked when strings are\nthe left operand of the % operator are described in more detail here. 3.1.3. Lists \u00c2\u00b6 Python knows a number of compound data types, used to group together other\nvalues.  The most versatile is the list , which can be written as a list of\ncomma-separated values (items) between square brackets.  Lists might contain\nitems of different types, but usually the items all have the same type. >>> squares = [ 1 , 4 , 9 , 16 , 25 ] >>> squares [1, 4, 9, 16, 25] Like strings (and all other built-in sequence types), lists can be\nindexed and sliced: >>> squares [ 0 ] # indexing returns the item 1 >>> squares [ - 1 ] 25 >>> squares [ - 3 :] # slicing returns a new list [9, 16, 25] Lists also support operations like concatenation: >>> squares + [ 36 , 49 , 64 , 81 , 100 ] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] Unlike strings, which are immutable , lists are a mutable type, i.e. it is possible to change their content: >>> cubes = [ 1 , 8 , 27 , 65 , 125 ] # something's wrong here >>> 4 ** 3 # the cube of 4 is 64, not 65! 64 >>> cubes [ 3 ] = 64 # replace the wrong value >>> cubes [1, 8, 27, 64, 125] You can also add new items at the end of the list, by using\nthe list.append() method (we will see more about methods later): >>> cubes . append ( 216 ) # add the cube of 6 >>> cubes . append ( 7 ** 3 ) # and the cube of 7 >>> cubes [1, 8, 27, 64, 125, 216, 343] Simple assignment in Python never copies data. When you assign a list\nto a variable, the variable refers to the existing list .\nAny changes you make to the list through one variable will be seen\nthrough all other variables that refer to it.: >>> rgb = [ \"Red\" , \"Green\" , \"Blue\" ] >>> rgba = rgb >>> id ( rgb ) == id ( rgba ) # they reference the same object True >>> rgba . append ( \"Alph\" ) >>> rgb [\"Red\", \"Green\", \"Blue\", \"Alph\"] All slice operations return a new list containing the requested elements.  This\nmeans that the following slice returns a shallow copy of the list: >>> correct_rgba = rgba [:] >>> correct_rgba [ - 1 ] = \"Alpha\" >>> correct_rgba [\"Red\", \"Green\", \"Blue\", \"Alpha\"] >>> rgba [\"Red\", \"Green\", \"Blue\", \"Alph\"] Assignment to slices is also possible, and this can even change the size of the\nlist or clear it entirely: >>> letters = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' ] >>> letters ['a', 'b', 'c', 'd', 'e', 'f', 'g'] >>> # replace some values >>> letters [ 2 : 5 ] = [ 'C' , 'D' , 'E' ] >>> letters ['a', 'b', 'C', 'D', 'E', 'f', 'g'] >>> # now remove them >>> letters [ 2 : 5 ] = [] >>> letters ['a', 'b', 'f', 'g'] >>> # clear the list by replacing all the elements with an empty list >>> letters [:] = [] >>> letters [] The built-in function len() also applies to lists: >>> letters = [ 'a' , 'b' , 'c' , 'd' ] >>> len ( letters ) 4 It is possible to nest lists (create lists containing other lists), for\nexample: >>> a = [ 'a' , 'b' , 'c' ] >>> n = [ 1 , 2 , 3 ] >>> x = [ a , n ] >>> x [['a', 'b', 'c'], [1, 2, 3]] >>> x [ 0 ] ['a', 'b', 'c'] >>> x [ 0 ][ 1 ] 'b' 3.2. First Steps Towards Programming \u00c2\u00b6 Of course, we can use Python for more complicated tasks than adding two and two\ntogether.  For instance, we can write an initial sub-sequence of the Fibonacci series as follows: >>> # Fibonacci series: >>> # the sum of two elements defines the next >>> a , b = 0 , 1 >>> while a < 10 : ... print ( a ) ... a , b = b , a + b ... 0 1 1 2 3 5 8 This example introduces several new features. The first line contains a multiple assignment : the variables a and b simultaneously get the new values 0 and 1.  On the last line this is used again,\ndemonstrating that the expressions on the right-hand side are all evaluated\nfirst before any of the assignments take place.  The right-hand side expressions\nare evaluated  from the left to the right. The while loop executes as long as the condition (here: a < 10 )\nremains true.  In Python, like in C, any non-zero integer value is true; zero is\nfalse.  The condition may also be a string or list value, in fact any sequence;\nanything with a non-zero length is true, empty sequences are false.  The test\nused in the example is a simple comparison.  The standard comparison operators\nare written the same as in C: < (less than), > (greater than), == (equal to), <= (less than or equal to), >= (greater than or equal to)\nand != (not equal to). The body of the loop is indented : indentation is Python\u00e2\u0080\u0099s way of grouping\nstatements.  At the interactive prompt, you have to type a tab or space(s) for\neach indented line.  In practice you will prepare more complicated input\nfor Python with a text editor; all decent text editors have an auto-indent\nfacility.  When a compound statement is entered interactively, it must be\nfollowed by a blank line to indicate completion (since the parser cannot\nguess when you have typed the last line).  Note that each line within a basic\nblock must be indented by the same amount. The print() function writes the value of the argument(s) it is given.\nIt differs from just writing the expression you want to write (as we did\nearlier in the calculator examples) in the way it handles multiple arguments,\nfloating-point quantities, and strings.  Strings are printed without quotes,\nand a space is inserted between items, so you can format things nicely, like\nthis: >>> i = 256 * 256 >>> print ( 'The value of i is' , i ) The value of i is 65536 The keyword argument end can be used to avoid the newline after the output,\nor end the output with a different string: >>> a , b = 0 , 1 >>> while a < 1000 : ... print ( a , end = ',' ) ... a , b = b , a + b ... 0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987, Footnotes [ 1 ] Since ** has higher precedence than - , -3**2 will be\ninterpreted as -(3**2) and thus result in -9 .  To avoid this\nand get 9 , you can use (-3)**2 . [ 2 ] Unlike other languages, special characters such as \\n have the\nsame meaning with both single ( '...' ) and double ( \"...\" ) quotes.\nThe only difference between the two is that within single quotes you don\u00e2\u0080\u0099t\nneed to escape \" (but you have to escape \\' ) and vice versa. Table of Contents 3. An Informal Introduction to Python 3.1. Using Python as a Calculator 3.1.1. Numbers 3.1.2. Text 3.1.3. Lists 3.2. First Steps Towards Programming Previous topic 2. Using the Python Interpreter Next topic 4. More Control Flow Tools This Page Report a Bug Show Source \u00c2\u00ab Navigation index modules | next | previous | Python \u00bb 3.13.2 Documentation \u00bb The Python Tutorial \u00bb 3. An Informal Introduction to Python | Theme Auto Light Dark | \u00a9 Copyright 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See History and License for more information. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Apr 01, 2025 (14:46 UTC). Found a bug ? Created using Sphinx 8.2.3."
  },
  "http://pandas.pydata.org/": {
    "url": "http://pandas.pydata.org/",
    "content": "pandas - Python Data Analysis Library About us About pandas Project roadmap Governance Team Sponsors Citing and logo Getting started Documentation Community Blog Ask a question (StackOverflow) Code of conduct Ecosystem Benchmarks Contribute pandas pandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the Python programming language. Install pandas now! Getting started Install pandas Getting started Try pandas online Documentation User guide API reference Contributing to pandas Release notes Community About pandas Ask a question Ecosystem With the support of: The full list of companies supporting pandas is available in the sponsors page . Latest version: 2.2.3 What's new in 2.2.3 Release date: Sep 20, 2024 Documentation (web) Download source code Follow us Recommended books Previous versions 2.1.4 (Dec 08, 2023) changelog | docs | code 2.0.3 (Jun 28, 2023) changelog | docs | code 1.5.3 (Jan 19, 2023) changelog | docs | code 1.4.4 (Aug 31, 2022) changelog | docs | code Show more 1.3.5 (Dec 12, 2021) changelog | docs | code \u00a9 2025 pandas via NumFOCUS, Inc. Hosted by OVHcloud ."
  },
  "http://www.ansible.com": {
    "url": "http://www.ansible.com",
    "content": "Ansible Collaborative Documentation Project documentation Ansible Automation Platform documentation Galaxy Forum Resources How Ansible works Ansible ecosystem Frequently asked questions Events Ansible community training Contact us Ansible Automation Platform Ansible Collaborative A gathering space to build automation skills and success Welcome to the Ansible\u00ae Collaborative, a destination for Ansible users, customers, partners, and vendors to learn and share automation content. Join the Ansible forum What is Ansible? No matter your role, or your automation goals, Ansible can help you connect teams and deliver efficiencies. Ansible is an open source IT automation engine that automates provisioning, configuration management, application deployment, orchestration, and many other IT processes. It is free to use, and the project benefits from the experience and intelligence of its thousands of contributors. Red Hat\u00ae Ansible Automation Platform combines more than a dozen upstream projects into a unified, security-hardened enterprise platform for mission-critical automation. It builds on the foundation of the open source project to create an end-to-end automation experience for cross-functional teams. How Ansible works Automate Policy as Code for consistency and compliance Ansible\u2019s automated Policy as Code capabilities will help you automate compliance and policy enforcement across the full operational life cycle that now includes AI\u2014from creating automation to managing IT processes at scale. Join the Ansible Policy as Code advocacy group to learn best practices, share your ideas with others, and help to shape this technology as it develops. Customers Partners Learn Ansible skills Documentation Introduction to Ansible Start automating with Ansible Create a playbook Explore Ansible concepts Build an inventory Interactive labs Writing first Ansible playbook Intro to Ansible automation controller Get started with ansible-navigator Get started with ansible-builder Get started with Event-Driven Ansible and Ansible rulebooks Explore Red Hat Ansible Automation Platform learning materials and tools Ready to move from patchwork to platform? You already know the benefits of upstream Ansible tools. But if your organization is ready to take automation to the next level, it's time to consider Red Hat Ansible Automation Platform. It delivers more capabilities-like event-driven automation and generative AI-that reduce manual effort and increase efficiency, as well as enhanced security and end-to-end technical support. Get the details Ansible collections With Ansible Galaxy, you can jump-start your automation with pre-packaged roles and collections. Use this content in Ansible Playbooks to automate your work faster and improve productivity. Featured collections middleware_automation Build, deploy, and manage multi-cloud application infrastructure at scale by automating Kafka, WildFly, Infinispan, Keyclock and more with the Ansible Middleware Collections. Learn more kubernetes.core Automate the provisioning and maintenance of Kubernetes and OpenShift clusters as well as the management of applications with the kubernetes.core Collection. Learn more community.vmware Manage all your VMWare infrastructure, including vSphere, the Datacenters, Clusters and your Virtual Machines with the Ansible community.vmware Collection. Learn more Explore all collections on Ansible Galaxy Automation adoption Expanding automation in your organization requires expertise in both technology and culture. Red Hat excels in creating and supporting successful communities, and we can help you build yours. Learn how to build a CoE Ansible ecosystem The projects in the Ansible collaborative let you expand automation to an unlimited set of use cases. Ansible Core Learn about the Ansible programming language, automation tooling, and architectural framework. Read the docs Event-Driven Ansible Subscribe to event sources to scale automation and deliver more efficient IT operations. Read the docs Developer tools Use tooling to develop and test Ansible content for consistent, trusted automation. Read the docs View all projects \u00a9 2025 Red\u00a0Hat, Inc. About\u00a0Red\u00a0Hat Privacy statement Terms\u00a0of\u00a0use All\u00a0policies\u00a0and\u00a0guidelines Digital accessibility Sponsored by"
  },
  "http://wiki.python.org/moin/TkInter": {
    "url": "http://wiki.python.org/moin/TkInter",
    "content": "TkInter - Python Wiki Search: TkInter TkInter FrontPage RecentChanges FindPage HelpContents TkInter Page Immutable Page Comments Info Attachments More Actions: Raw Text Print View Delete Cache ------------------------ Check Spelling Like Pages Local Site Map ------------------------ Rename Page Delete Page ------------------------ ------------------------ Remove Spam Revert to this revision ------------------------ SlideShow User Login Tkinter is Python's de-facto standard GUI (Graphical User Interface) package. It is a thin object-oriented layer on top of Tcl/Tk . Tkinter is not the only GuiProgramming toolkit for Python. It is however the most commonly used one. CameronLaird calls the yearly decision to keep TkInter \"one of the minor traditions of the Python world.\" Tkinter Documentation Python and Tkinter Programming by John Grayson (see also GuiBooks ). This book just recently came back into print on demand, see the publisher's website . Python GUI with Tkinter is a complete tutorial that covers all the widgets for the Tkinter library, complete with examples. Tkinter ttk Extension Tutorial covers the new widgets and features brought by the ttk module into Tkinter. (ttk is an extension and submodule included within Tkinter) Thinking in Tkinter is an introduction to some basic Tkinter programming concepts. TkDocs Tutorial , official Tkinter documentation that covers Python 3+ and Tk8.5, with easy to follow examples. Graphical User Interfaces with Tk , a chapter from the Python Documentation . Online Tcl/Tk Manual Pages - the official man pages at the Tcl Developer Xchange. Tips for Python/Tk by Andreas Balogh (about useful documentation, GUI builders and tips using Grid and HList widgets). The New Mexico Institute of Mining and Technology created its own Tkinter manual. It is available in HTML and PDF . The Tkinter Life Preserver , by Matt Conway is still useful, though way out of date. It's the only document that explains how to read the Tcl/Tk manuals and translate the information there to Tkinter calls. HTML version , converted by Ken Manheimer. The source: when all else fails: Read The Source, Luke! Demo/tkinter/ in the Python source distribution. This contains many helpful examples, including updated versions of Matt Conway's examples. Lib/lib-tk/Tkinter.py in any Python distribution. Other prominent Tcl/Tk sites: Tcl Developer Xchange Tcl project at SourceForge Tcl foundry at SourceForge Other Tcl/Tk related links: Simple toolsuite to create Tkinter GUIs on the fly from JSON files Tkinter Extensions Pmw ( http://pmw.sourceforge.net ) Tix ( http://www.python.org/doc/current/lib/module-Tix.html ) TkZinc ( http://www.tkzinc.org ) Tkinter3000 ( http://tkinter.effbot.org ) How Tkinter can exploit Tcl/Tk extensions Comments MythDebunking : TkInter is ugly on Windows ( http://wiki.tcl.tk/8646 ) Checking your Tkinter support A good way to systematically check whether your Tkinter support is working is the following. Enter an interactive Python interpreter in a shell on an X console. Step 1 - can _tkinter be imported? Try the following command at the Python prompt: >>>\u00a0import\u00a0_tkinter\u00a0#\u00a0with\u00a0underscore,\u00a0and\u00a0lowercase\u00a0't' If it works, go to step 2. If it fails with \"No module named _tkinter\", your Python configuration needs to be modified to include this module (which is an extension module implemented in C). Do **not** edit Modules/Setup (it is out of date). You may have to install Tcl and Tk (when using RPM, install the -devel RPMs as well) and/or edit the setup.py script to point to the right locations where Tcl/Tk is installed. If you install Tcl/Tk in the default locations, simply rerunning \"make\" should build the _tkinter extension. If it fails with an error from the dynamic linker, see above (for Unix, check for a header/library file mismatch; for Windows, check that the TCL/TK DLLs can be found). Step 2 - can Tkinter be imported? Try the correct command for your version at the Python prompt: >>>\u00a0import\u00a0Tkinter\u00a0#\u00a0no\u00a0underscore,\u00a0uppercase\u00a0'T'\u00a0for\u00a0versions\u00a0prior\u00a0to\u00a0V3.0 >>>\u00a0import\u00a0tkinter\u00a0#\u00a0no\u00a0underscore,\u00a0lowercase\u00a0't'\u00a0for\u00a0V3.0\u00a0and\u00a0later If it works, go to step 3. If it fails with \"No module named Tkinter\", your Python configuration need to be changed to include the directory that contains Tkinter.py in its default module search path. You have probably forgotten to define TKPATH in the Modules/Setup file. A temporary workaround would be to find that directory and add it to your PYTHONPATH environment variable. It is the subdirectory named \"lib-tk\" of the Python library directory (when using Python 1.4 or before, it is named \"tkinter\"). Step 3 - does Tkinter work? Try the correct command for your Python version at the Python prompt: >>>\u00a0Tkinter._test()\u00a0#\u00a0note\u00a0underscore\u00a0in\u00a0_test\u00a0and\u00a0uppercase\u00a0'T'\u00a0for\u00a0versions\u00a0prior\u00a0to\u00a0V3.0 >>>\u00a0tkinter._test()\u00a0#\u00a0note\u00a0underscore\u00a0in\u00a0_test\u00a0and\u00a0lowercase\u00a0'T'\u00a0for\u00a0V3.0\u00a0and\u00a0later This should pop up a small window with two buttons. Clicking the \"Quit\" button makes it go away and the command return. If this works, you're all set. (When running this test on Windows, from Python run in a MS-DOS console, the new window somehow often pops up *under* the console window. This can also occur when using iTerm on Mac OS X. Move it aside or locate the Tk window in the Taskbar / Dock.) If this doesn't work, study the error message you get; if you can't see how to fix the problem, ask for help . CategoryPyGUI TkInter  (last edited 2022-02-08 22:05:48 by martinmiller ) MoinMoin Powered Python Powered GPL licensed Valid HTML 4.01 Unable to edit the page? See the FrontPage for instructions."
  },
  "https://github.com/python/cpython/issues": {
    "url": "https://github.com/python/cpython/issues",
    "content": "GitHub \u00b7 Where software is built Skip to content Navigation Menu Toggle navigation Sign in Product GitHub Copilot Write better code with AI GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert python / cpython Public Notifications You must be signed in to change notification settings Fork 31.5k Star 66.1k Code Issues 5k+ Pull requests 1.8k Actions Projects 28 Security Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights Preview Issues Search Issues is : issue state : open is:issue state:open Clear filter Search Labels Milestones New issue Search results Open Closed Mulitthreaded scaling regression in 3.13.1t 3.13 bugs and security fixes bugs and security fixes performance Performance or resource usage Performance or resource usage topic-free-threading type-bug An unexpected behavior, bug, or error An unexpected behavior, bug, or error Status: Open. # 131988 In python/cpython; \u00b7 colesbury opened on Apr 1, 2025 Compilation on Windows fails with assert in generated_cases.c.h type-bug An unexpected behavior, bug, or error An unexpected behavior, bug, or error Status: Open. # 131987 In python/cpython; \u00b7 sergey-miryanov opened on Apr 1, 2025 Add an abc.Function ABC for function-like objects type-feature A feature request or enhancement A feature request or enhancement Status: Open. # 131983 In python/cpython; \u00b7 scoder opened on Apr 1, 2025 Time for Python 4.0 type-feature A feature request or enhancement A feature request or enhancement Status: Open. # 131980 In python/cpython; \u00b7 Eclips4 opened on Apr 1, 2025 ctypes.Pointer.get_contents doesn't hold the object's lock for long enough topic-ctypes topic-free-threading type-bug An unexpected behavior, bug, or error An unexpected behavior, bug, or error Status: Open. # 131974 In python/cpython; \u00b7 ZeroIntensity opened on Apr 1, 2025 New REPL dosen't remove line continuations upon terminal resizing 3.13 bugs and security fixes bugs and security fixes 3.14 new features, bugs and security fixes new features, bugs and security fixes stdlib Python modules in the Lib dir Python modules in the Lib dir topic-repl Related to the interactive shell Related to the interactive shell type-bug An unexpected behavior, bug, or error An unexpected behavior, bug, or error Status: Open. # 131973 In python/cpython; \u00b7 Yzi-Li opened on Apr 1, 2025 New REPL sometimes incrementally indents traceback lines 3.13 bugs and security fixes bugs and security fixes 3.14 new features, bugs and security fixes new features, bugs and security fixes stdlib Python modules in the Lib dir Python modules in the Lib dir topic-repl Related to the interactive shell Related to the interactive shell type-bug An unexpected behavior, bug, or error An unexpected behavior, bug, or error Status: Open. # 131968 In python/cpython; \u00b7 picnixz opened on Apr 1, 2025 colorization in cli json tool stdlib Python modules in the Lib dir Python modules in the Lib dir type-feature A feature request or enhancement A feature request or enhancement Status: Open. # 131952 In python/cpython; \u00b7 raztd opened on Mar 31, 2025 Performance loss for str.rstrip() for 3.13+ 3.13 bugs and security fixes bugs and security fixes 3.14 new features, bugs and security fixes new features, bugs and security fixes interpreter-core (Objects, Python, Grammar, and Parser dirs) (Objects, Python, Grammar, and Parser dirs) pending The issue will be closed if no feedback is provided The issue will be closed if no feedback is provided performance Performance or resource usage Performance or resource usage type-bug An unexpected behavior, bug, or error An unexpected behavior, bug, or error Status: Open. # 131947 In python/cpython; \u00b7 Alaeddine22 opened on Mar 31, 2025 Use the Python-specific Py_DEBUG macro rather than _DEBUG in Windows-related C code extension-modules C modules in the Modules dir C modules in the Modules dir interpreter-core (Objects, Python, Grammar, and Parser dirs) (Objects, Python, Grammar, and Parser dirs) OS-windows type-feature A feature request or enhancement A feature request or enhancement Status: Open. # 131942 In python/cpython; \u00b7 XuehaiPan opened on Mar 31, 2025 Update Element.remove exception message when an element is not found extension-modules C modules in the Modules dir C modules in the Modules dir topic-XML type-feature A feature request or enhancement A feature request or enhancement Status: Open. # 131938 In python/cpython; \u00b7 picnixz opened on Mar 31, 2025 3.14 regression: Union[int, str] is Union[int, str] does not hold 3.14 new features, bugs and security fixes new features, bugs and security fixes interpreter-core (Objects, Python, Grammar, and Parser dirs) (Objects, Python, Grammar, and Parser dirs) stdlib Python modules in the Lib dir Python modules in the Lib dir topic-typing type-bug An unexpected behavior, bug, or error An unexpected behavior, bug, or error Status: Open. # 131933 In python/cpython; \u00b7 hroncok opened on Mar 31, 2025 Footer \u00a9 2025 GitHub,\u00a0Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can\u2019t perform that action at this time."
  },
  "https://xon.sh": {
    "url": "https://xon.sh",
    "content": "The Xonsh Shell \u2014 Python-powered shell. Python shell. Python in the shell. Shell in Python. Shell and Python. Python and shell. Home What is Xonsh? Features Install Xontribs Talks Docs Github Donate XONSH is a Python-powered shell Xonsh is a modern, full-featured and cross-platform python shell.  The language is a superset of Python 3.6+ with additional shell primitives that you are used to from Bash and IPython.\n                                It works on all major systems including Linux, OSX, and Windows. Xonsh is meant for the daily use of experts and novices. Install Docs Github Donate What is Xonsh? The xonsh as a python shell lets you easily mix Python and shell commands in a powerful and simplified approach to the command line. Xonsh is the Shell The xonsh language has shell primitives that you are used to from Bash. Read more \u2192 cd /home cat /etc/passwd | grep root ls -la Xonsh is Python The xonsh language is a superset of Python 3.6+ and you can run Python code and import modules. Read more \u2192 2 + 2 import json j = json.loads( '{\"Hello\": \"world!\", \"Answer\": 42}' ) print (j[ 'Answer' ]) Xonsh is the Shell in Python With xonsh you can combine Python with shell commands. Read more \u2192 len ( $(curl -L https://xon.sh) ) for filename in `.*` : print (filename) du -sh @(filename) Xonsh is Python in the Shell Prepare environment variables and arguments in Python and use them in shell commands. Read more \u2192 var = 'he' + 'llo' echo @(var) > /tmp/ @(var) echo @(i for i in range(42)) Xonsh Features Xonsh is a super-charged shell that enables you to work quickly and effectively! Some of the features that help set xonsh apart are: Combine shell commands with Python or vice versa. The language is a superset of Python 3.6+ with additional shell primitives that you are used to from Bash and IPython. Xontribs - the 3rd-party extension system. Xontributions, or xontribs, are a set of tools and conventions for extending the functionality of xonsh. Rich interface to discover history The xonsh shell creates history files with rich structure and metadata and an API for interacting with them. Powerful prompt customisation Customisable tab completion, key bindings, color styles are on board by default. Install Xonsh Xonsh can be installed and run with various package managers, by using appimage, or from a docker container. PyPi package Install the latest release : python -m pip install 'xonsh[full]' Learn more \u2192 Install as a core shell When using xonsh as a default shell (and we do!), it's important to ensure that it is installed\n                                        in a Python environment that is independent of changes from the system package manager.\n                                        If you are installing xonsh via your system package-manager, this is handled for you.\n                                        If you install xonsh outside of your system package manager, you can use xonsh-install for this. Conda package Install: conda config --add channels conda-forge\nconda install xonsh Learn more \u2192 Portable Linux AppImage AppImage is a format for distributing portable software on Linux without needing superuser permissions to install the application.\n                                        The xonsh AppImage file contains both xonsh and Python and allows xonsh to be run on any AppImage-supported Linux distribution without installation or root access. Download and run: wget https://github.com/xonsh/xonsh/releases/latest/download/xonsh-x86_64.AppImage\nchmod +x xonsh-x86_64.AppImage\n./xonsh-x86_64.AppImage Learn more \u2192 Docker container Xonsh publishes a handful of containers, primarily targeting CI and automation use cases. All of them are published on Docker Hub . Run the xonsh shell in a small size docker container: docker run -it --rm xonsh/xonsh:slim Platform package managers: brew, apt, pacman, dnf, guix Another way is to install xonsh from the package manager that is supplied by the operating system. This way is not recommended\n                                        because in operating systems without the rolling release concept the xonsh shell version may be very old ( check latest release ). OSX brew: brew install xonsh Debian/Ubuntu apt: apt install xonsh Arch Linux pacman: pacman -S xonsh Fedora dnf: dnf install xonsh GNU guix: guix install xonsh More installation methods \u2192 Xontribs Xontributions, or xontribs, are a set of tools and conventions for extending the functionality of xonsh. pipeliner Let your pipe lines from the standard output flow thru the Python code in the xonsh shell. output-search Get identifiers, paths, URLs and words from the previous command output and use them for the next command in the xonsh shell. back2dir Return to the most recently used directory when starting the xonsh shell. argcomplete Argcomplete support to tab completion of python and xonsh scripts in the xonsh shell. More xontribs \u2192 Talks about xonsh Some interesting publications around xonsh. 25 Aug, 2020 Xonsh in TOP10 trending projects We're listing down the top 10 trending open-source projects In Python on GitHub and the xonsh shell is one of these projects. 11 Jul, 2019 Xonsh on Scipy 2019 conference A. Scopatz and G. Forsyth gave a two hour presentation of xonsh. 01 Jun, 2016 Xonsh on PyCon 2016 The first big presentation of Xonsh from Anthony Scopatz! Xonsh Website Documentation Releases Source Code Docker Hub Donate Community Zulip Community Issue Tracker Discussions Mastodon Mailing List IRC , Gitter Xontribs Github xontribs Awesome xontribs Xontrib tutorial Xontrib template Open Source License Github Developer\u2019s Guide"
  },
  "http://www.scipy.org": {
    "url": "http://www.scipy.org",
    "content": "SciPy Install Documentation Community About Us Contribute SciPy Fundamental algorithms for scientific computing in Python Get started SciPy 1.15.2 released! 2025-02-16 Fundamental algorithms SciPy provides algorithms for optimization, integration, interpolation, eigenvalue problems, algebraic equations, differential equations, statistics and many other classes of problems. Broadly applicable The algorithms and data structures provided by SciPy are broadly applicable across domains. Foundational Extends NumPy providing additional tools for array computing and provides specialized data structures, such as sparse matrices and k-dimensional trees. Performant SciPy wraps highly-optimized implementations written in low-level languages like Fortran, C, and C++. Enjoy the flexibility of Python with the speed of compiled code. Easy to use SciPy\u2019s high level syntax makes it accessible and productive for programmers from any background or experience level. Open source Distributed under a liberal BSD license , SciPy is developed and maintained publicly on GitHub by a vibrant, responsive, and diverse community . Install Documentation Citing SciPy Roadmap About Us Community SciPy Conference Contribute Code of Conduct FAQ Terms of Use Privacy Press Kit Social Media \u00a9 2025 . All rights reserved."
  },
  "https://wiki.python.org/moin/BeginnersGuide": {
    "url": "https://wiki.python.org/moin/BeginnersGuide",
    "content": "BeginnersGuide - Python Wiki Search: BeginnersGuide BeginnersGuide FrontPage RecentChanges FindPage HelpContents BeginnersGuide Page Immutable Page Comments Info Attachments More Actions: Raw Text Print View Delete Cache ------------------------ Check Spelling Like Pages Local Site Map ------------------------ Rename Page Delete Page ------------------------ ------------------------ Remove Spam Revert to this revision ------------------------ SlideShow User Login Beginner's Guide to Python New to programming? Python is free and easy to learn if you know where to start! This guide will help you to get started quickly. Chinese Translation/\u4e2d\u6587\u7248\u5165\u95e8 New to Python? Read BeginnersGuide/Overview for a short explanation of what Python is. Getting Python Next, install the Python 3 interpreter on your computer. This is the program that reads Python programs and carries out their instructions; you need it before you can do any Python programming. Mac and Linux distributions may include an outdated version of Python (Python 2), but you should install an updated one (Python 3). See BeginnersGuide/Download for instructions to download the correct version of Python. There are also Python interpreter and IDE bundles available, such as Thonny . Other options can be found at IntegratedDevelopmentEnvironments . At some stage, you'll want to edit and save your program code. Take a look at HowToEditPythonCode for some advice and recommendations. Learning Python Next, read a tutorial and try some simple experiments with your new Python interpreter. If you have never programmed before, see BeginnersGuide/NonProgrammers for a list of suitable tutorials. If you have previous programming experience, consult BeginnersGuide/Programmers , which lists more advanced tutorials. If English isn't your first language, you might be more comfortable with a tutorial that's been translated into your language. Consult python.org's list of Non-English resources . Most tutorials assume you know how to run a program on your computer. If you are using Windows and need help with this, see How do I Run a Program Under Windows . Here are some sites that focus on beginners and offer in-browser coding: Please keep these links sorted alphabetically Beginners Python tutorial at Python Land (free) Cod\u00e9dex (non-free) Outdated, Python 2! * Codecademy Coding Bootcamps (non-free) DataCamp (non-free) Dataquest for Python for data science. (free) Genepy interactive exercises (free, open source, no ads) High School Technology Services for general Python (non-free) LabEx Python Hands-on Labs (freemium) Once you have read a tutorial, you can browse through Python's online documentation . It includes a tutorial that might come in handy, a Library Reference that lists all of the modules that come standard with Python, and the Language Reference for a complete (if rather dry) explanation of Python's syntax. When you are ready to write your first program, you will need a text editor or an IDE . If you don't want to use Thonny or something more advanced, then you can use IDLE , which is bundled with Python and supports extensions . This Python wiki also contains a page about Python One-Liners -- an obscure but interesting subculture in Python. Need Help? Need help with any of this? Read BeginnersGuide/Help for mailing lists and newsgroups. An interactive and free way to learn Python is to ask ChatGPT or another generative AI model for help. The Python code quality generated by AI agents has become pretty good. State-of-the-art AI models work especially well for small projects or code understanding questions. Most Python books will include an introduction to the language; see IntroductoryBooks for suggested titles. Consult BeginnersGuide/Examples for small programs and little snippets of code that can help you learn. Or, if you prefer to learn Python through listening to a lecture, you can attend a training course or even hire a trainer to come to your company. Consult the PythonEvents page to see if any training courses are scheduled in your area and the PythonTraining page for a list of trainers. Teachers can join the EDU-SIG , a mailing list for discussion of Python's use in teaching at any level ranging from K-12 up to university. Complete list of Beginner's Guide pages BeginnersGuide/ Download BeginnersGuide/ Examples BeginnersGuide/ Help BeginnersGuide/ Mathematics BeginnersGuide/ NonProgrammers BeginnersGuide/ NonProgrammersChinese BeginnersGuide/ Overview BeginnersGuide/ OverviewChinese BeginnersGuide/ Programmers BeginnersGuide/Programmers (Cpp2Python.pdf) BeginnersGuide/ Programmers/SimpleExamples Quiz and Exercises After Hours Programming - Python Quiz CheckIO - Online learning, testing and improving your python skills CS Circles - Online lessons and graded exercises Finxter - How good are your Python skills? Test and Training with a Daily Python Puzzle LabEx - 1000+ Python Interactive Challenges PyGUI - Collection of python quiz answers, Examples And GUI Tkinter Tutorials For Beginners Pythonspot - Python Quiz Python Challenge - A Python Quiz App on Android Platform Python Based AI and Prompt Engineering AI Engineering Academy - Become a Certified AI Engineer with OpenAI API, HuggingFace, and Llama Generative AI Tutorial - Generative AI Tutorial GitHub Prompt Engineering Guide - List of helpful resources Google Gemini (Python) - Python Library to access Google's Gemini Model OpenAI API (Python) - Quickstart to Access OpenAI's API (Python, Javascript, curl) Looking for a particular Python module or application? The first place to look is the Python Package Index . If you can't find anything relevant in the Package Index, try searching python.org - you can find anything mentioned on the Python site, in the FAQs , or in the newsgroup. More info: where to search . Next, try Google or another search engine of your choice. Searching for \"python\" and some relevant keywords will usually find something helpful. Finally, you can try posting a query to the comp.lang.python Usenet group. Python-Related Cheat Sheets Python: Collection of 11 Best Python Cheat Sheets NumPy : Collection of 10 Best NumPy Cheat Sheets Pandas: Collection of 7 Beautiful Pandas Cheat Sheets Machine Learning: Collection of 15 Machine Learning Cheat Sheets Want to contribute? Python is a product of the Python Software Foundation , a non-profit organization that holds the copyright. Donations to the PSF are tax-deductible in the USA, and you can donate via credit card or PayPal . To report a bug in the Python core, use the Python Bug Tracker . To contribute a bug fix or other patch to the Python core, read the Python Developer's Guide for more information about Python's development process. To contribute to the official Python documentation , join the Documentation SIG , write to docs@python.org , or use the Issue Tracker to contribute a documentation patch. To announce your module or application to the Python community, use comp.lang.python.announce . See the guide to Python mailing lists for more information. To propose changes to the Python core, post your thoughts to comp.lang.python . If you have an implementation, follow the Python Patch Guidelines . If you have a question are not sure where to report it, check out the WhereDoIReportThis? page. CategoryDocumentation BeginnersGuide  (last edited 2025-03-07 01:13:11 by MaciejOlko ) MoinMoin Powered Python Powered GPL licensed Valid HTML 4.01 Unable to edit the page? See the FrontPage for instructions."
  },
  "http://www.djangoproject.com/": {
    "url": "http://www.djangoproject.com/",
    "content": "The web framework for perfectionists with deadlines | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Django makes it easier to build better web apps more quickly and with less code. Get started with Django Meet Django Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source. Ridiculously fast. Django was designed to help developers take applications from concept to completion as quickly as possible. Reassuringly secure. Django takes security seriously and helps developers avoid many common security mistakes. Exceedingly scalable. Some of the busiest sites on the web leverage Django\u2019s ability to quickly and flexibly scale. Learn more about Django Join the Community Forum - Post a question Discord - Chat with us Back to Top Additional Information Additional Information Download latest release: 5.1.7 Django documentation Support Django! Chartwell Resource Group Ltd donated to the Django Software Foundation to support Django development. Donate today! Latest news Django 5.2 release candidate 1 released Today Django 5.2 release candidate 1, a preview/testing package for the upcoming Django 5.2 release, is available. Posted by Sarah Boyce on March 19, 2025 DSF member of the month - Cory Zue Cory Zue is the DSF member of the month for March 2025. Find out more about one of Django's long-standing Django developer. Posted by Sarah Abderemane on March 14, 2025 More news New to Django? Installation guide Write your first Django app Getting started with Django The power of Django Object-relational mapper Automatic admin interface Robust template system Quick internationalization Explore more features Get involved Ticket system Report bugs and make feature requests Development dashboard see what's currently being worked on Inside the Django community Get Help Django Discord Server Join the Django Discord Community Official Django Forum Join the community on the Django Forum. The Django Software Foundation About the Foundation Our non-profit supports the project Support Django Your contribution makes Django stronger Contact the Django Software Foundation More about the DSF Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://fosstodon.org/@ThePSF": {
    "url": "https://fosstodon.org/@ThePSF",
    "content": "Python Software Foundation (@ThePSF@fosstodon.org) - Fosstodon To use the Mastodon web application, please enable JavaScript. Alternatively, try one of the native apps for Mastodon for your platform."
  },
  "https://pyfound.blogspot.com/2025/03/dsa-van-lindberg.html": {
    "url": "https://pyfound.blogspot.com/2025/03/dsa-van-lindberg.html",
    "content": "Python Software Foundation News: PSF Distinguished Service Award Granted to Van Lindberg News from the Python Software Foundation Tuesday, March 11, 2025 PSF Distinguished Service Award Granted to Van Lindberg Van Lindberg, a longtime member of the PSF Board, has been recognized with the PSF\u2019s Distinguished Service Award. Van was the co-chair and then Chair of PyCon from 2008-2012, served on the PSF Board for over a decade (2012\u20132023), including four years as Chair (2012\u20132016) and seven years as PSF General Counsel from 2016-2023. Throughout his time with us, Van was our go-to expert for all things legal, bringing invaluable insights from the broader open-source world to help the PSF grow and stay ahead of the curve. During his time on the board, Van was instrumental in establishing the PSF as a professional organization able to support the worldwide Python community. The PSF\u2019s Distinguished Service Award ( DSA ) is granted to individuals who make sustained exemplary contributions to the Python community. Each award is voted on by the PSF Board and they are looking for people whose impact has positively and significantly shaped the Python world. Van\u2019s work with the Python community very much exemplifies the ethos of \u201cbuild the community you want to see.\u201d After receiving the award, Van shared, \u201cI am deeply honored to receive the DSA. The kindness and support of this community are truly exceptional, and I am grateful for every moment I've been able to spend contributing alongside so many excellent people.\u201d From licensing and hiring to fundraising, Van was there every step of the way as the PSF experienced phenomenal growth. His deep understanding of open-source communities\u2014paired with his legal expertise\u2014helped the Foundation navigate challenges and embrace opportunities to better serve the global Python community. Curious about previous recipients of the DSA or wondering how to nominate someone? Check out the PSF\u2019s Distinguished Service Awards page . The PSF also bestows Community Service Awards to recognize outstanding community members\u2013 if you\u2019d like to learn more about CSAs and how they differ from DSAs, check out our Service Awards given by the PSF: what are they and how they differ blog post . Posted by Marie Nordin at 3/11/2025 11:53:00 AM Newer Post Older Post Home Mission The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Python Software Foundation Grants Program Membership Awards Meeting Minutes PSF Sponsors A big thank you to the above PSF sponsors for supporting our mission! Blog Archive \u25bc 2025 (6) \u25bc March (4) PSF Distinguished Service Award Granted to Thomas ... PSF Distinguished Service Award Granted to Van Lin... PSF Distinguished Service Award Granted to Ewa Jod... Announcing Python Software Foundation Fellow Membe... \u25ba February (1) \u25ba January (1) \u25ba 2024 (58) \u25ba December (6) \u25ba November (5) \u25ba October (3) \u25ba September (2) \u25ba August (4) \u25ba July (7) \u25ba June (16) \u25ba May (4) \u25ba April (2) \u25ba March (2) \u25ba February (3) \u25ba January (4) \u25ba 2023 (37) \u25ba December (1) \u25ba November (3) \u25ba October (3) \u25ba September (2) \u25ba August (3) \u25ba June (5) \u25ba May (12) \u25ba April (2) \u25ba March (1) \u25ba February (3) \u25ba January (2) \u25ba 2022 (35) \u25ba December (2) \u25ba November (3) \u25ba October (2) \u25ba July (3) \u25ba June (6) \u25ba May (12) \u25ba April (2) \u25ba March (3) \u25ba February (1) \u25ba January (1) \u25ba 2021 (42) \u25ba December (3) \u25ba November (4) \u25ba October (3) \u25ba September (2) \u25ba August (1) \u25ba July (2) \u25ba June (4) \u25ba May (12) \u25ba April (5) \u25ba March (1) \u25ba February (4) \u25ba January (1) \u25ba 2020 (51) \u25ba December (8) \u25ba November (3) \u25ba October (3) \u25ba September (4) \u25ba July (4) \u25ba June (2) \u25ba May (10) \u25ba April (11) \u25ba March (4) \u25ba January (2) \u25ba 2019 (45) \u25ba December (3) \u25ba November (3) \u25ba October (3) \u25ba September (4) \u25ba August (3) \u25ba July (3) \u25ba June (5) \u25ba May (11) \u25ba April (1) \u25ba March (2) \u25ba February (5) \u25ba January (2) \u25ba 2018 (31) \u25ba December (5) \u25ba November (1) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (3) \u25ba June (3) \u25ba May (5) \u25ba April (2) \u25ba March (2) \u25ba February (1) \u25ba January (2) \u25ba 2017 (32) \u25ba December (3) \u25ba November (2) \u25ba October (4) \u25ba September (6) \u25ba August (2) \u25ba July (2) \u25ba May (2) \u25ba April (3) \u25ba March (2) \u25ba February (2) \u25ba January (4) \u25ba 2016 (27) \u25ba December (2) \u25ba October (2) \u25ba August (4) \u25ba July (1) \u25ba June (3) \u25ba May (6) \u25ba April (4) \u25ba March (2) \u25ba January (3) \u25ba 2015 (67) \u25ba December (2) \u25ba November (4) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (4) \u25ba June (6) \u25ba May (4) \u25ba April (13) \u25ba March (14) \u25ba February (9) \u25ba January (4) \u25ba 2014 (14) \u25ba October (1) \u25ba September (1) \u25ba August (2) \u25ba July (1) \u25ba May (1) \u25ba April (1) \u25ba March (2) \u25ba February (3) \u25ba January (2) \u25ba 2013 (18) \u25ba November (1) \u25ba September (2) \u25ba August (1) \u25ba July (1) \u25ba June (1) \u25ba April (1) \u25ba March (5) \u25ba February (3) \u25ba January (3) \u25ba 2012 (21) \u25ba December (3) \u25ba November (2) \u25ba October (2) \u25ba September (1) \u25ba August (1) \u25ba July (1) \u25ba June (2) \u25ba May (4) \u25ba April (1) \u25ba March (1) \u25ba January (3) \u25ba 2011 (55) \u25ba December (2) \u25ba November (1) \u25ba October (7) \u25ba September (5) \u25ba August (2) \u25ba July (1) \u25ba June (3) \u25ba May (8) \u25ba April (8) \u25ba March (13) \u25ba February (2) \u25ba January (3) \u25ba 2010 (35) \u25ba December (4) \u25ba November (1) \u25ba October (3) \u25ba September (2) \u25ba August (1) \u25ba July (8) \u25ba June (6) \u25ba May (2) \u25ba April (4) \u25ba March (2) \u25ba January (2) \u25ba 2009 (21) \u25ba December (1) \u25ba October (1) \u25ba September (6) \u25ba August (4) \u25ba July (4) \u25ba June (1) \u25ba May (2) \u25ba April (1) \u25ba February (1) \u25ba 2008 (23) \u25ba December (1) \u25ba November (1) \u25ba October (1) \u25ba August (3) \u25ba July (1) \u25ba May (3) \u25ba April (1) \u25ba March (5) \u25ba February (4) \u25ba January (3) \u25ba 2007 (26) \u25ba December (3) \u25ba November (2) \u25ba October (6) \u25ba September (1) \u25ba August (1) \u25ba July (1) \u25ba June (2) \u25ba May (1) \u25ba April (1) \u25ba March (2) \u25ba February (3) \u25ba January (3) \u25ba 2006 (39) \u25ba December (3) \u25ba November (4) \u25ba October (5) \u25ba September (4) \u25ba August (4) \u25ba July (3) \u25ba May (7) \u25ba April (6) \u25ba March (3) Powered by Blogger ."
  },
  "https://status.python.org/": {
    "url": "https://status.python.org/",
    "content": "Python Infrastructure Status Python Infrastructure x Get email notifications whenever Python Infrastructure creates , updates or resolves an incident. Email address: Enter OTP: Resend OTP in: seconds Didn't receive the OTP? Resend OTP By subscribing you agree to our Privacy Policy . This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply. Get text message notifications whenever Python Infrastructure creates or resolves an incident. Country code: Afghanistan (+93) Albania (+355) Algeria (+213) American Samoa (+1) Andorra (+376) Angola (+244) Anguilla (+1) Antigua and Barbuda (+1) Argentina (+54) Armenia (+374) Aruba (+297) Australia/Cocos/Christmas Island (+61) Austria (+43) Azerbaijan (+994) Bahamas (+1) Bahrain (+973) Bangladesh (+880) Barbados (+1) Belarus (+375) Belgium (+32) Belize (+501) Benin (+229) Bermuda (+1) Bolivia (+591) Bosnia and Herzegovina (+387) Botswana (+267) Brazil (+55) Brunei (+673) Bulgaria (+359) Burkina Faso (+226) Burundi (+257) Cambodia (+855) Cameroon (+237) Canada (+1) Cape Verde (+238) Cayman Islands (+1) Central Africa (+236) Chad (+235) Chile (+56) China (+86) Colombia (+57) Comoros (+269) Congo (+242) Congo, Dem Rep (+243) Costa Rica (+506) Croatia (+385) Cyprus (+357) Czech Republic (+420) Denmark (+45) Djibouti (+253) Dominica (+1) Dominican Republic (+1) Egypt (+20) El Salvador (+503) Equatorial Guinea (+240) Estonia (+372) Ethiopia (+251) Faroe Islands (+298) Fiji (+679) Finland/Aland Islands (+358) France (+33) French Guiana (+594) French Polynesia (+689) Gabon (+241) Gambia (+220) Georgia (+995) Germany (+49) Ghana (+233) Gibraltar (+350) Greece (+30) Greenland (+299) Grenada (+1) Guadeloupe (+590) Guam (+1) Guatemala (+502) Guinea (+224) Guyana (+592) Haiti (+509) Honduras (+504) Hong Kong (+852) Hungary (+36) Iceland (+354) India (+91) Indonesia (+62) Iraq (+964) Ireland (+353) Israel (+972) Italy (+39) Jamaica (+1) Japan (+81) Jordan (+962) Kenya (+254) Korea, Republic of (+82) Kosovo (+383) Kuwait (+965) Kyrgyzstan (+996) Laos (+856) Latvia (+371) Lebanon (+961) Lesotho (+266) Liberia (+231) Libya (+218) Liechtenstein (+423) Lithuania (+370) Luxembourg (+352) Macao (+853) Macedonia (+389) Madagascar (+261) Malawi (+265) Malaysia (+60) Maldives (+960) Mali (+223) Malta (+356) Martinique (+596) Mauritania (+222) Mauritius (+230) Mexico (+52) Monaco (+377) Mongolia (+976) Montenegro (+382) Montserrat (+1) Morocco/Western Sahara (+212) Mozambique (+258) Namibia (+264) Nepal (+977) Netherlands (+31) New Zealand (+64) Nicaragua (+505) Niger (+227) Nigeria (+234) Norway (+47) Oman (+968) Pakistan (+92) Palestinian Territory (+970) Panama (+507) Paraguay (+595) Peru (+51) Philippines (+63) Poland (+48) Portugal (+351) Puerto Rico (+1) Qatar (+974) Reunion/Mayotte (+262) Romania (+40) Russia/Kazakhstan (+7) Rwanda (+250) Samoa (+685) San Marino (+378) Saudi Arabia (+966) Senegal (+221) Serbia (+381) Seychelles (+248) Sierra Leone (+232) Singapore (+65) Slovakia (+421) Slovenia (+386) South Africa (+27) Spain (+34) Sri Lanka (+94) St Kitts and Nevis (+1) St Lucia (+1) St Vincent Grenadines (+1) Sudan (+249) Suriname (+597) Swaziland (+268) Sweden (+46) Switzerland (+41) Taiwan (+886) Tajikistan (+992) Tanzania (+255) Thailand (+66) Togo (+228) Tonga (+676) Trinidad and Tobago (+1) Tunisia (+216) Turkey (+90) Turks and Caicos Islands (+1) Uganda (+256) Ukraine (+380) United Arab Emirates (+971) United Kingdom (+44) United States (+1) Uruguay (+598) Uzbekistan (+998) Venezuela (+58) Vietnam (+84) Virgin Islands, British (+1) Virgin Islands, U.S. (+1) Yemen (+967) Zambia (+260) Zimbabwe (+263) Phone number: Change number Enter OTP: Resend OTP in: 30 seconds Didn't receive the OTP? Resend OTP Message and data rates may apply. By subscribing you agree to our Privacy Policy , the Atlassian Terms of Service , and the Atlassian Privacy Policy . This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply. Get incident updates and maintenance status messages in Slack. Subscribe via Slack By subscribing you acknowledge our Privacy Policy . In addition, you agree to the Atlassian Cloud Terms of Service and acknowledge Atlassian's Privacy Policy . Get webhook notifications whenever Python Infrastructure creates an incident, updates an incident, resolves an incident or changes a component status. Webhook URL: The URL we should send the webhooks to Email address: We'll send you email if your endpoint fails By subscribing you agree to our Privacy Policy . This site is protected by reCAPTCHA and the Google Privacy Policy and Terms of Service apply. Follow @PythonStatus or view our profile . Get the Atom Feed or RSS Feed . All Systems Operational Uptime over the past 90 days. View historical uptime. python.org ? Operational 90 days ago 99.99 % uptime Today python.org - CDN ? Operational 90 days ago 100.0 % uptime Today python.org - Backends ? Operational 90 days ago 99.99 % uptime Today python.org - Downloads Backends ? Operational 90 days ago 100.0 % uptime Today PyPI Operational 90 days ago 99.99 % uptime Today pypi.org - General Operational pypi.org - CDN ? Operational 90 days ago 100.0 % uptime Today pypi.org - Backends ? Operational 90 days ago 100.0 % uptime Today pypi.org - Email ? Operational files.pythonhosted.org - Files ? Operational 90 days ago 99.98 % uptime Today files.pythonhosted.org - Redirects ? Operational files.pythonhosted.org - Redirects Backends ? Operational PyPI Hosting Platforms Operational AWS elasticache-us-east-2 Operational AWS elb-us-east-2 Operational AWS ec2-us-east-2 Operational AWS rds-us-east-2 Operational Google Cloud Platform Google Cloud Storage Operational docs.python.org Operational docs.python.org - Backends ? Operational docs.python.org - CDN Operational bugs.python.org Operational wiki.python.org Operational mail.python.org Operational Message Handling Services Operational Mailing Lists and Archives - Mailman Operational Mailing Lists and Archives - Mailman 3 Operational psfmember.org Operational us.pycon.org Operational PyPy Operational speed.pypy.org Operational Content Delivery Network ? Operational Fastly Asia/Pacific (HK) Operational Fastly US East (IAD) Operational Fastly US East (MIA) Operational Fastly US Central (DEN) Operational Fastly US Central (DFW) Operational Fastly US West (SEA) Operational Fastly US West (SJC) Operational Fastly Europe (FRA) Operational Fastly Europe (AMS) Operational Fastly Europe (LHR) Operational Fastly Asia/Pacific (SYD) Operational Fastly Asia/Pacific (NZ) Operational Fastly Brisbane (BNE) Operational Fastly Dubai (FJR) Operational Fastly Melbourne (MEL) Operational Fastly Osaka (ITM) Operational Fastly Perth (PER) Operational Fastly Tokyo (HND) Operational Fastly Tokyo (TYO) Operational Fastly Wellington (WLG) Operational Fastly Dublin (DUB) Operational Fastly Copenhagen (CPH) Operational Fastly Frankfurt (HHN) Operational Fastly Helsinki (HEL) Operational Fastly London (LON) Operational Fastly Madrid (MAD) Operational Fastly Manchester (MAN) Operational Fastly Milan (MXP) Operational Fastly Oslo (OSL) Operational Fastly Buenos Aires (EZE) Operational Fastly Bogota (BOG) Operational Fastly Curitiba (CWB) Operational Fastly Rio de Janeiro (GIG) Operational Fastly Santiago (SCL) Operational Fastly Johannesburg (JNB) Operational Fastly Cape Town (CPT) Operational Fastly Vancouver (YVR) Operational Fastly Toronto (YYZ) Operational Fastly St. Louis (STL) Operational Fastly Palo Alto (PAO) Operational Fastly Newark (EWR) Operational Fastly New York (LGA) Operational Fastly Montreal (YUL) Operational Fastly Minneapolis (STP) Operational Fastly Minneapolis (MSP) Operational Fastly Los Angeles (BUR) Operational Fastly Kansas City (MCI) Operational Fastly Houston (IAH) Operational Fastly Dallas (DAL) Operational Fastly Columbus (CMH) Operational Fastly Chicago (CHI) Operational Fastly Boston (BOS) Operational Fastly Atlanta (PDK) Operational Fastly Atlanta (FTY) Operational Fastly Ashburn (WDC) Operational Fastly New Delhi (DEL) Operational Fastly Mumbai (BOM) Operational Fastly Chennai (MAA) Operational Fastly Vienna (VIE) Operational Fastly Stockholm (BMA) Operational Fastly Paris (CDG) Operational Fastly Purging Operational Fastly Tokyo (NRT) Operational Fastly Singapore (QPG) Operational Fastly Seoul (ICN) Operational Fastly Manila (MNL) Operational Fastly Kuala Lumpur (KUL) Operational Fastly Dubai (DXB) Operational Fastly Christchurch (CHC) Operational Fastly Adelaide (ADL) Operational Fastly Ghana (ACC) Operational Fastly S\u0101o Paulo (CGH) Operational Fastly Lima (LIM) Operational Fastly Fortaleza (FOR) Operational Fastly Seattle (BFI) Operational Fastly Portland (PDX) Operational Fastly Phoenix (PHX) Operational Fastly Los Angeles (LGB - LAX/SNA) Operational Fastly Honolulu (HNL) Operational Fastly Gainesville (GNV) Operational Fastly Detroit (DTW) Operational Fastly Columbus (LCK) Operational Fastly Calgary (YYC) Operational Fastly Atlanta (ATL) Operational Fastly Sydney (SYD) Operational Fastly Palo Alto (PAO) Operational Fastly Amsterdam (AMS) Operational Fastly Kolkata (CCU) Operational Fastly Hyderabad (HYD) Operational Fastly Palermo (PMO) Operational Fastly Sofia (SOF) Operational Fastly Rome (FCO) Operational Fastly Munich (MUC) Operational Fastly Milan (LIN) Operational Fastly Marseille (MRS) Operational Fastly Lisbon (LIS) Operational Fastly Brussels (BRU) Operational Operational Degraded Performance Partial Outage Major Outage Maintenance Major outage Partial outage No downtime recorded on this day. No data exists for this day. had a major outage. had a partial outage. Related No incidents or maintenance related to this downtime. System Metrics Month Week Day PyPI CDN Edge Errors ? Fetching PyPI Files CDN Edge Errors ? Fetching PyPI CDN Miss Times Fetching PyPI Files CDN Miss Times Fetching Past Incidents Apr 1 , 2025 No incidents reported today. Mar 31 , 2025 No incidents reported. Mar 30 , 2025 No incidents reported. Mar 29 , 2025 No incidents reported. Mar 28 , 2025 No incidents reported. Mar 27 , 2025 No incidents reported. Mar 26 , 2025 No incidents reported. Mar 25 , 2025 No incidents reported. Mar 24 , 2025 No incidents reported. Mar 23 , 2025 No incidents reported. Mar 22 , 2025 No incidents reported. Mar 21 , 2025 No incidents reported. Mar 20 , 2025 No incidents reported. Mar 19 , 2025 No incidents reported. Mar 18 , 2025 No incidents reported. \u2190 Incident History Powered by Atlassian Statuspage"
  },
  "https://pythoninsider.blogspot.com/2025/03/python-3140-alpha-6-is-out.html": {
    "url": "https://pythoninsider.blogspot.com/2025/03/python-3140-alpha-6-is-out.html",
    "content": "Python Insider: Python 3.14.0 alpha 6 is out Python core development news and information. Friday, March 14, 2025 Python 3.14.0 alpha 6 is out Here comes the penultimate alpha. https://www.python.org/downloads/release/python-3140a6/ This is an early developer preview of Python\n3.14 Major\nnew features of the 3.14 series, compared to 3.13 Python 3.14 is still in development. This release, 3.14.0a6, is the\nsixth of seven planned alpha releases. Alpha releases are intended to make it easier to test the current\nstate of new features and bug fixes and to test the release process. During the alpha phase, features may be added up until the start of\nthe beta phase (2025-05-06) and, if necessary, may be modified or\ndeleted up until the release candidate phase (2025-07-22). Please keep\nin mind that this is a preview release and its use is not recommended for production environments. Many new features for Python 3.14 are still being planned and\nwritten. Among the new major new features and changes so far: PEP 649 : deferred\nevaluation of annotations PEP 741 : Python\nconfiguration C API PEP 761 : Python 3.14\nand onwards no longer provides PGP signatures for release artifacts.\nInstead, Sigstore is recommended for verifiers. Improved\nerror messages A new\ntype of interpreter . For certain newer compilers, this interpreter\nprovides significantly better performance. Opt-in for now, requires\nbuilding from source. UUID\nversions 6-8 are now supported by the uuid module, and\ngeneration of versions 3-5 and 8 are up to 40% faster. Python removals and deprecations C API removals and deprecations (Hey, fellow core developer, if a feature\nyou find important is missing from this list, let Hugo\nknow.) The next pre-release of Python 3.14 will be the final alpha,\n3.14.0a7, currently scheduled for 2025-04-08. More resources Online\ndocumentation PEP 745 , 3.14\nRelease Schedule Report bugs at github.com/python/cpython/issues Help fund Python and\nits community And now for\nsomething completely different March 14 is celebrated as pi day , because 3.14 is an\napproximation of \u03c0. The day is observed by eating pies (savoury and/or\nsweet) and celebrating \u03c0. The first pi day was organised by physicist\nand tinkerer Larry Shaw of the San Francisco Exploratorium in 1988. It is also the International\nDay of Mathematics and Albert Einstein\u2019s birthday. Let\u2019s all eat\nsome pie, recite some \u03c0, install and test some py, and wish a happy\nbirthday to Albert, Loren and all the other pi day children! Enjoy the new release Thanks to all of the many volunteers who help make Python Development\nand these releases possible! Please consider supporting our efforts by\nvolunteering yourself or through organisation contributions to the Python Software\nFoundation . Regards from Helsinki as fresh snow falls, Your release team, Hugo van Kemenade @hugovk Ned Deily @nad Steve Dower @steve.dower \u0141ukasz Langa @ambv Posted by Hugo at 1:27\u202fPM Email This BlogThis! Share to X Share to Facebook Share to Pinterest Labels: releases Older Post Home Subscribe Subscribe to Python Insider via RSS , or Twitter Related Links python.org Python-Dev mailing list Python Developer's Guide Translations Chinese (Simplified) Chinese (Traditional) French German Japanese Korean Portuguese Romanian Russian Spanish Python-Dev Blogs Eli Bendersky Summary of reading: January - March 2025 19 hours ago PyPy Status Blog HPy kick-off sprint report 5 years ago Pumpichank Creating Python Snaps 9 years ago Tim Golden London Python Dojo December 2014 10 years ago R. David Murray Asyncio Implementation Overview 10 years ago The Voidspace Techie Blog unittest.mock and mock 1.0 alpha 1 13 years ago Tarek Ziad\u00e9 More privacy please 13 years ago Deep Thoughts by Raymond Hettinger Python\u2019s super() considered super! 13 years ago Jesse Noller Senthil Kumaran Brett Cannon Boredom & Laziness Brian Curtin Blog Archive \u25bc 2025 (4) \u25bc March (1) Python 3.14.0 alpha 6 is out \u25ba February (2) \u25ba January (1) \u25ba 2024 (22) \u25ba December (2) \u25ba November (1) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (1) \u25ba June (3) \u25ba May (1) \u25ba April (2) \u25ba March (2) \u25ba February (2) \u25ba January (1) \u25ba 2023 (18) \u25ba December (2) \u25ba November (1) \u25ba October (3) \u25ba September (2) \u25ba August (2) \u25ba July (1) \u25ba June (2) \u25ba May (1) \u25ba April (1) \u25ba March (1) \u25ba February (1) \u25ba January (1) \u25ba 2022 (23) \u25ba December (1) \u25ba November (1) \u25ba October (4) \u25ba September (2) \u25ba August (2) \u25ba July (2) \u25ba June (2) \u25ba May (3) \u25ba April (1) \u25ba March (3) \u25ba February (1) \u25ba January (1) \u25ba 2021 (24) \u25ba December (2) \u25ba November (2) \u25ba October (2) \u25ba September (2) \u25ba August (2) \u25ba July (1) \u25ba June (3) \u25ba May (1) \u25ba April (3) \u25ba March (1) \u25ba February (4) \u25ba January (1) \u25ba 2020 (32) \u25ba December (2) \u25ba November (2) \u25ba October (2) \u25ba September (3) \u25ba August (3) \u25ba July (4) \u25ba June (4) \u25ba May (2) \u25ba April (4) \u25ba March (3) \u25ba February (2) \u25ba January (1) \u25ba 2019 (36) \u25ba December (3) \u25ba November (1) \u25ba October (8) \u25ba September (1) \u25ba August (3) \u25ba July (5) \u25ba June (3) \u25ba May (2) \u25ba March (7) \u25ba February (3) \u25ba 2018 (24) \u25ba December (2) \u25ba October (2) \u25ba September (1) \u25ba August (1) \u25ba June (2) \u25ba May (3) \u25ba April (3) \u25ba March (5) \u25ba February (2) \u25ba January (3) \u25ba 2017 (17) \u25ba December (2) \u25ba October (2) \u25ba September (3) \u25ba August (2) \u25ba July (3) \u25ba June (1) \u25ba March (2) \u25ba January (2) \u25ba 2016 (18) \u25ba December (5) \u25ba November (1) \u25ba October (2) \u25ba September (2) \u25ba August (1) \u25ba July (1) \u25ba June (5) \u25ba May (1) \u25ba 2015 (14) \u25ba December (2) \u25ba November (1) \u25ba September (3) \u25ba August (1) \u25ba July (1) \u25ba June (1) \u25ba May (2) \u25ba March (2) \u25ba January (1) \u25ba 2014 (8) \u25ba December (1) \u25ba November (1) \u25ba May (1) \u25ba March (3) \u25ba February (2) \u25ba 2013 (5) \u25ba November (2) \u25ba October (1) \u25ba March (1) \u25ba February (1) \u25ba 2012 (9) \u25ba December (1) \u25ba November (1) \u25ba October (2) \u25ba August (1) \u25ba June (2) \u25ba May (1) \u25ba March (1) \u25ba 2011 (25) \u25ba August (2) \u25ba July (3) \u25ba June (1) \u25ba May (7) \u25ba April (7) \u25ba March (5) Contributors A.M. Kuchling Alfonso de la Guarda Anthony Scopatz Antoine P. Benjamin Peterson Brian Curtin Davidmh Donald Stufft Doug Hellmann Ee Durbin Ezio Melotti Georg Brandl Hugo Jesse Kelsey Hightower Larry Hastings Mathieu Leduc-Hamel Michael Markert Mike Driscoll Ned Deily Pablo Galindo Paul Moore Philip Jenvey Sumana Harihareswara Thomas Wouters Unknown Unknown \u0141ukasz Langa \u00c9ric Araujo e haypo tp Copyright Python Insider by the Python Core Developers is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License . Based on a work at blog.python.org . Powered by Blogger ."
  },
  "http://www.pylonsproject.org/": {
    "url": "http://www.pylonsproject.org/",
    "content": "Welcome to the Pylons Project Toggle navigation Pylons\u00a0Project Home Projects Community Support How to Participate How to Contribute Code Style / Standards Testing Guidelines Code of Conduct Sponsors About Pylons Project Pylons Framework (deprecated) Contact Artwork License Pylons Project We build Web Technologies for the Python community Our Projects AcidFS Filesystem interaction using transactions with ACID semantics. package \u2022 source \u2022 docs Deform An HTML form library. package \u2022 source \u2022 docs Pyramid The Start Small, Finish Big, Stay Finished Web Framework. package \u2022 source \u2022 docs \u2022 website SubstanceD An application server based on Pyramid. package \u2022 source \u2022 docs \u2022 website translationstring An internationalization library. package \u2022 source \u2022 docs Waitress WSGI server for Python 2/3 that runs on UNIX and Windows. package \u2022 source \u2022 docs Webob WSGI request/response library. package \u2022 source \u2022 docs \u2022 website WebTest Test a WSGI application without starting up an HTTP server. package \u2022 source \u2022 docs More Projects Pyramid The Start Small ,\n            Finish Big Stay Finished Web Framework Visit trypyramid.com to learn more about the Pyramid web framework, our most featured project. Pylons Project The Pylons Project is composed of a disparate group of project leaders with experience going back to the very start of Python web frameworks . Collectively , we have experience and humility gained by making (and surviving) every stupid decision that could be imagined. We aim to bring fresh ideas to classic web development problems . Rather than focusing on a single web framework, the Pylons Project develops a collection of related technologies. The first package from the Pylons Project was the Pyramid web framework. Other packages have been added to the collection over time, including higher-level components and applications. The project has become an ecosystem of well-tested , well-documented components which interoperate easily. Follow @PylonsProject \u00a9 Copyright 2008-2023, Agendaless Consulting Pylons Project | Build 5c2b2393c8115d207a2b6a8968ef76dd56048835 Sponsored by Linode"
  },
  "http://buildbot.net/": {
    "url": "http://buildbot.net/",
    "content": ""
  },
  "https://www.linkedin.com/company/python-software-foundation/": {
    "url": "https://www.linkedin.com/company/python-software-foundation/",
    "content": ""
  },
  "https://docs.python.org/3/license.html": {
    "url": "https://docs.python.org/3/license.html",
    "content": "History and License \u2014 Python 3.13.2 documentation Theme Auto Light Dark Table of Contents History and License History of the software Terms and conditions for accessing or otherwise using Python PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION Licenses and Acknowledgements for Incorporated Software Mersenne Twister Sockets Asynchronous socket services Cookie management Execution tracing UUencode and UUdecode functions XML Remote Procedure Calls test_epoll Select kqueue SipHash24 strtod and dtoa OpenSSL expat libffi zlib cfuhash libmpdec W3C C14N test suite mimalloc asyncio Global Unbounded Sequences (GUS) Previous topic Copyright This Page Report a Bug Show Source Navigation index modules | previous | Python \u00bb 3.13.2 Documentation \u00bb History and License | Theme Auto Light Dark | History and License \u00c2\u00b6 History of the software \u00c2\u00b6 Python was created in the early 1990s by Guido van Rossum at Stichting\nMathematisch Centrum (CWI, see https://www.cwi.nl ) in the Netherlands as a\nsuccessor of a language called ABC.  Guido remains Python\u00e2\u0080\u0099s principal author,\nalthough it includes many contributions from others. In 1995, Guido continued his work on Python at the Corporation for National\nResearch Initiatives (CNRI, see https://www.cnri.reston.va.us ) in Reston,\nVirginia where he released several versions of the software. In May 2000, Guido and the Python core development team moved to BeOpen.com to\nform the BeOpen PythonLabs team.  In October of the same year, the PythonLabs\nteam moved to Digital Creations, which became\nZope Corporation.  In 2001, the Python Software Foundation (PSF, see https://www.python.org/psf/ ) was formed, a non-profit organization created\nspecifically to own Python-related Intellectual Property.  Zope Corporation was a\nsponsoring member of the PSF. All Python releases are Open Source (see https://opensource.org for the Open\nSource Definition). Historically, most, but not all, Python releases have also\nbeen GPL-compatible; the table below summarizes the various releases. Release Derived from Year Owner GPL-compatible? (1) 0.9.0 thru 1.2 n/a 1991-1995 CWI yes 1.3 thru 1.5.2 1.2 1995-1999 CNRI yes 1.6 1.5.2 2000 CNRI no 2.0 1.6 2000 BeOpen.com no 1.6.1 1.6 2001 CNRI yes (2) 2.1 2.0+1.6.1 2001 PSF no 2.0.1 2.0+1.6.1 2001 PSF yes 2.1.1 2.1+2.0.1 2001 PSF yes 2.1.2 2.1.1 2002 PSF yes 2.1.3 2.1.2 2002 PSF yes 2.2 and above 2.1.1 2001-now PSF yes Note GPL-compatible doesn\u00e2\u0080\u0099t mean that we\u00e2\u0080\u0099re distributing Python under the GPL.\nAll Python licenses, unlike the GPL, let you distribute a modified version\nwithout making your changes open source. The GPL-compatible licenses make\nit possible to combine Python with other software that is released under\nthe GPL; the others don\u00e2\u0080\u0099t. According to Richard Stallman, 1.6.1 is not GPL-compatible, because its license\nhas a choice of law clause. According to CNRI, however, Stallman\u00e2\u0080\u0099s lawyer has\ntold CNRI\u00e2\u0080\u0099s lawyer that 1.6.1 is \u00e2\u0080\u009cnot incompatible\u00e2\u0080\u009d with the GPL. Thanks to the many outside volunteers who have worked under Guido\u00e2\u0080\u0099s direction to\nmake these releases possible. Terms and conditions for accessing or otherwise using Python \u00c2\u00b6 Python software and documentation are licensed under the\nPython Software Foundation License Version 2. Starting with Python 3.8.6, examples, recipes, and other code in\nthe documentation are dual licensed under the PSF License Version 2\nand the Zero-Clause BSD license . Some software incorporated into Python is under different licenses.\nThe licenses are listed with code falling under that license.\nSee Licenses and Acknowledgements for Incorporated Software for an incomplete list of these licenses. PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 \u00c2\u00b6 1. This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and\n   the Individual or Organization (\"Licensee\") accessing and otherwise using this\n   software (\"Python\") in source or binary form and its associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\n   grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\n   analyze, test, perform and/or display publicly, prepare derivative works,\n   distribute, and otherwise use Python alone or in any derivative\n   version, provided, however, that PSF's License Agreement and PSF's notice of\n   copyright, i.e., \"Copyright \u00c2\u00a9 2001-2024 Python Software Foundation; All Rights\n   Reserved\" are retained in Python alone or in any derivative version\n   prepared by Licensee.\n\n3. In the event Licensee prepares a derivative work that is based on or\n   incorporates Python or any part thereof, and wants to make the\n   derivative work available to others as provided herein, then Licensee hereby\n   agrees to include in any such work a brief summary of the changes made to Python.\n\n4. PSF is making Python available to Licensee on an \"AS IS\" basis.\n   PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF\n   EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\n   WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\n   USE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\n   FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\n   MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE\n   THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material breach of\n   its terms and conditions.\n\n7. Nothing in this License Agreement shall be deemed to create any relationship\n   of agency, partnership, or joint venture between PSF and Licensee.  This License\n   Agreement does not grant permission to use PSF trademarks or trade name in a\n   trademark sense to endorse or promote products or services of Licensee, or any\n   third party.\n\n8. By copying, installing or otherwise using Python, Licensee agrees\n   to be bound by the terms and conditions of this License Agreement. BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 \u00c2\u00b6 BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1 1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an office at\n   160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization\n   (\"Licensee\") accessing and otherwise using this software in source or binary\n   form and its associated documentation (\"the Software\").\n\n2. Subject to the terms and conditions of this BeOpen Python License Agreement,\n   BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license\n   to reproduce, analyze, test, perform and/or display publicly, prepare derivative\n   works, distribute, and otherwise use the Software alone or in any derivative\n   version, provided, however, that the BeOpen Python License is retained in the\n   Software, alone or in any derivative version prepared by Licensee.\n\n3. BeOpen is making the Software available to Licensee on an \"AS IS\" basis.\n   BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF\n   EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\n   WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\n   USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR\n   ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,\n   MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF\n   ADVISED OF THE POSSIBILITY THEREOF.\n\n5. This License Agreement will automatically terminate upon a material breach of\n   its terms and conditions.\n\n6. This License Agreement shall be governed by and interpreted in all respects\n   by the law of the State of California, excluding conflict of law provisions.\n   Nothing in this License Agreement shall be deemed to create any relationship of\n   agency, partnership, or joint venture between BeOpen and Licensee.  This License\n   Agreement does not grant permission to use BeOpen trademarks or trade names in a\n   trademark sense to endorse or promote products or services of Licensee, or any\n   third party.  As an exception, the \"BeOpen Python\" logos available at\n   http://www.pythonlabs.com/logos.html may be used according to the permissions\n   granted on that web page.\n\n7. By copying, installing or otherwise using the software, Licensee agrees to be\n   bound by the terms and conditions of this License Agreement. CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 \u00c2\u00b6 1. This LICENSE AGREEMENT is between the Corporation for National Research\n   Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191\n   (\"CNRI\"), and the Individual or Organization (\"Licensee\") accessing and\n   otherwise using Python 1.6.1 software in source or binary form and its\n   associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, CNRI hereby\n   grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\n   analyze, test, perform and/or display publicly, prepare derivative works,\n   distribute, and otherwise use Python 1.6.1 alone or in any derivative version,\n   provided, however, that CNRI's License Agreement and CNRI's notice of copyright,\n   i.e., \"Copyright \u00c2\u00a9 1995-2001 Corporation for National Research Initiatives; All\n   Rights Reserved\" are retained in Python 1.6.1 alone or in any derivative version\n   prepared by Licensee.  Alternately, in lieu of CNRI's License Agreement,\n   Licensee may substitute the following text (omitting the quotes): \"Python 1.6.1\n   is made available subject to the terms and conditions in CNRI's License\n   Agreement.  This Agreement together with Python 1.6.1 may be located on the\n   internet using the following unique, persistent identifier (known as a handle):\n   1895.22/1013.  This Agreement may also be obtained from a proxy server on the\n   internet using the following URL: http://hdl.handle.net/1895.22/1013\".\n\n3. In the event Licensee prepares a derivative work that is based on or\n   incorporates Python 1.6.1 or any part thereof, and wants to make the derivative\n   work available to others as provided herein, then Licensee hereby agrees to\n   include in any such work a brief summary of the changes made to Python 1.6.1.\n\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\" basis.  CNRI\n   MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF EXAMPLE,\n   BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY\n   OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF\n   PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR\n   ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\n   MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE\n   THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material breach of\n   its terms and conditions.\n\n7. This License Agreement shall be governed by the federal intellectual property\n   law of the United States, including without limitation the federal copyright\n   law, and, to the extent such U.S. federal law does not apply, by the law of the\n   Commonwealth of Virginia, excluding Virginia's conflict of law provisions.\n   Notwithstanding the foregoing, with regard to derivative works based on Python\n   1.6.1 that incorporate non-separable material that was previously distributed\n   under the GNU General Public License (GPL), the law of the Commonwealth of\n   Virginia shall govern this License Agreement only as to issues arising under or\n   with respect to Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in\n   this License Agreement shall be deemed to create any relationship of agency,\n   partnership, or joint venture between CNRI and Licensee.  This License Agreement\n   does not grant permission to use CNRI trademarks or trade name in a trademark\n   sense to endorse or promote products or services of Licensee, or any third\n   party.\n\n8. By clicking on the \"ACCEPT\" button where indicated, or by copying, installing\n   or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and\n   conditions of this License Agreement. CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 \u00c2\u00b6 Copyright \u00c2\u00a9 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The\nNetherlands.  All rights reserved.\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted, provided that\nthe above copyright notice appear in all copies and that both that copyright\nnotice and this permission notice appear in supporting documentation, and that\nthe name of Stichting Mathematisch Centrum or CWI not be used in advertising or\npublicity pertaining to distribution of the software without specific, written\nprior permission.\n\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO\nEVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE. ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION \u00c2\u00b6 Permission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE. Licenses and Acknowledgements for Incorporated Software \u00c2\u00b6 This section is an incomplete, but growing list of licenses and acknowledgements\nfor third-party software incorporated in the Python distribution. Mersenne Twister \u00c2\u00b6 The _random C extension underlying the random module\nincludes code based on a download from http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html . The following are\nthe verbatim comments from the original code: A C-program for MT19937, with initialization improved 2002/1/26.\nCoded by Takuji Nishimura and Makoto Matsumoto.\n\nBefore using, initialize the state by using init_genrand(seed)\nor init_by_array(init_key, key_length).\n\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n 3. The names of its contributors may not be used to endorse or promote\n    products derived from this software without specific prior written\n    permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nAny feedback is very welcome.\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\nemail: m-mat @ math.sci.hiroshima-u.ac.jp (remove space) Sockets \u00c2\u00b6 The socket module uses the functions, getaddrinfo() , and getnameinfo() , which are coded in separate source files from the WIDE\nProject, https://www.wide.ad.jp/ . Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. Neither the name of the project nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE. Asynchronous socket services \u00c2\u00b6 The test.support.asynchat and test.support.asyncore modules contain the following notice: Copyright 1996 by Sam Rushing\n\n                        All Rights Reserved\n\nPermission to use, copy, modify, and distribute this software and\nits documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of Sam\nRushing not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\n\nSAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN\nNO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. Cookie management \u00c2\u00b6 The http.cookies module contains the following notice: Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>\n\n               All Rights Reserved\n\nPermission to use, copy, modify, and distribute this software\nand its documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nTimothy O'Malley  not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\n\nTimothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR\nANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE. Execution tracing \u00c2\u00b6 The trace module contains the following notice: portions copyright 2001, Autonomous Zones Industries, Inc., all rights...\nerr...  reserved and offered to the public under the terms of the\nPython 2.2 license.\nAuthor: Zooko O'Whielacronx\nhttp://zooko.com/\nmailto:zooko@zooko.com\n\nCopyright 2000, Mojam Media, Inc., all rights reserved.\nAuthor: Skip Montanaro\n\nCopyright 1999, Bioreason, Inc., all rights reserved.\nAuthor: Andrew Dalke\n\nCopyright 1995-1997, Automatrix, Inc., all rights reserved.\nAuthor: Skip Montanaro\n\nCopyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.\n\n\nPermission to use, copy, modify, and distribute this Python software and\nits associated documentation for any purpose without fee is hereby\ngranted, provided that the above copyright notice appears in all copies,\nand that both that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of neither Automatrix,\nBioreason or Mojam Media be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior permission. UUencode and UUdecode functions \u00c2\u00b6 The uu codec contains the following notice: Copyright 1994 by Lance Ellinghouse\nCathedral City, California Republic, United States of America.\n                       All Rights Reserved\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Lance Ellinghouse\nnot be used in advertising or publicity pertaining to distribution\nof the software without specific, written prior permission.\nLANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nModified by Jack Jansen, CWI, July 1995:\n- Use binascii module to do the actual line-by-line conversion\n  between ascii and binary. This results in a 1000-fold speedup. The C\n  version is still 5 times faster, though.\n- Arguments more compliant with Python standard XML Remote Procedure Calls \u00c2\u00b6 The xmlrpc.client module contains the following notice: The XML-RPC client interface is\n\nCopyright (c) 1999-2002 by Secret Labs AB\nCopyright (c) 1999-2002 by Fredrik Lundh\n\nBy obtaining, using, and/or copying this software and/or its\nassociated documentation, you agree that you have read, understood,\nand will comply with the following terms and conditions:\n\nPermission to use, copy, modify, and distribute this software and\nits associated documentation for any purpose and without fee is\nhereby granted, provided that the above copyright notice appears in\nall copies, and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nSecret Labs AB or the author not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\n\nSECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\nTO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\nABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\nBE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\nDAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\nOF THIS SOFTWARE. test_epoll \u00c2\u00b6 The test.test_epoll module contains the following notice: Copyright (c) 2001-2006 Twisted Matrix Laboratories.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Select kqueue \u00c2\u00b6 The select module contains the following notice for the kqueue\ninterface: Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE. SipHash24 \u00c2\u00b6 The file Python/pyhash.c contains Marek Majkowski\u00e2\u0080\u0099 implementation of\nDan Bernstein\u00e2\u0080\u0099s SipHash24 algorithm. It contains the following note: <MIT License>\nCopyright (c) 2013  Marek Majkowski <marek@popcount.org>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n</MIT License>\n\nOriginal location:\n   https://github.com/majek/csiphash/\n\nSolution inspired by code from:\n   Samuel Neves (supercop/crypto_auth/siphash24/little)\n   djb (supercop/crypto_auth/siphash24/little2)\n   Jean-Philippe Aumasson (https://131002.net/siphash/siphash24.c) strtod and dtoa \u00c2\u00b6 The file Python/dtoa.c , which supplies C functions dtoa and\nstrtod for conversion of C doubles to and from strings, is derived\nfrom the file of the same name by David M. Gay, currently available\nfrom https://web.archive.org/web/20220517033456/http://www.netlib.org/fp/dtoa.c .\nThe original file, as retrieved on March 16, 2009, contains the following\ncopyright and licensing notice: /****************************************************************\n *\n * The author of this software is David M. Gay.\n *\n * Copyright (c) 1991, 2000, 2001 by Lucent Technologies.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose without fee is hereby granted, provided that this entire notice\n * is included in all copies of any software which is or includes a copy\n * or modification of this software and in all copies of the supporting\n * documentation for such software.\n *\n * THIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\n * WARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\n * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\n * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n *\n ***************************************************************/ OpenSSL \u00c2\u00b6 The modules hashlib , posix and ssl use\nthe OpenSSL library for added performance if made available by the\noperating system. Additionally, the Windows and macOS installers for\nPython may include a copy of the OpenSSL libraries, so we include a copy\nof the OpenSSL license here. For the OpenSSL 3.0 release,\nand later releases derived from that, the Apache License v2 applies: Apache License\n                        Version 2.0, January 2004\n                     https://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS expat \u00c2\u00b6 The pyexpat extension is built using an included copy of the expat\nsources unless the build is configured --with-system-expat : Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd\n                               and Clark Cooper\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. libffi \u00c2\u00b6 The _ctypes C extension underlying the ctypes module\nis built using an included copy of the libffi\nsources unless the build is configured --with-system-libffi : Copyright (c) 1996-2008  Red Hat, Inc and others.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE. zlib \u00c2\u00b6 The zlib extension is built using an included copy of the zlib\nsources if the zlib version found on the system is too old to be\nused for the build: Copyright (C) 1995-2011 Jean-loup Gailly and Mark Adler\n\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\n   claim that you wrote the original software. If you use this software\n   in a product, an acknowledgment in the product documentation would be\n   appreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source distribution.\n\nJean-loup Gailly        Mark Adler\njloup@gzip.org          madler@alumni.caltech.edu cfuhash \u00c2\u00b6 The implementation of the hash table used by the tracemalloc is based\non the cfuhash project: Copyright (c) 2005 Don Owens\nAll rights reserved.\n\nThis code is released under the BSD license:\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above\n    copyright notice, this list of conditions and the following\n    disclaimer in the documentation and/or other materials provided\n    with the distribution.\n\n  * Neither the name of the author nor the names of its\n    contributors may be used to endorse or promote products derived\n    from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE. libmpdec \u00c2\u00b6 The _decimal C extension underlying the decimal module\nis built using an included copy of the libmpdec\nlibrary unless the build is configured --with-system-libmpdec : Copyright (c) 2008-2020 Stefan Krah. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE. W3C C14N test suite \u00c2\u00b6 The C14N 2.0 test suite in the test package\n( Lib/test/xmltestdata/c14n-20/ ) was retrieved from the W3C website at https://www.w3.org/TR/xml-c14n2-testcases/ and is distributed under the\n3-clause BSD license: Copyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),\nAll Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n* Redistributions of works must retain the original copyright notice,\n  this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the original copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n* Neither the name of the W3C nor the names of its contributors may be\n  used to endorse or promote products derived from this work without\n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. mimalloc \u00c2\u00b6 MIT License: Copyright (c) 2018-2021 Microsoft Corporation, Daan Leijen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. asyncio \u00c2\u00b6 Parts of the asyncio module are incorporated from uvloop 0.16 ,\nwhich is distributed under the MIT license: Copyright (c) 2015-2021 MagicStack Inc.  http://magic.io\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Global Unbounded Sequences (GUS) \u00c2\u00b6 The file Python/qsbr.c is adapted from FreeBSD\u00e2\u0080\u0099s \u00e2\u0080\u009cGlobal Unbounded\nSequences\u00e2\u0080\u009d safe memory reclamation scheme in subr_smr.c .\nThe file is distributed under the 2-Clause BSD License: Copyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice unmodified, this list of conditions, and the following\n   disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Table of Contents History and License History of the software Terms and conditions for accessing or otherwise using Python PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION Licenses and Acknowledgements for Incorporated Software Mersenne Twister Sockets Asynchronous socket services Cookie management Execution tracing UUencode and UUdecode functions XML Remote Procedure Calls test_epoll Select kqueue SipHash24 strtod and dtoa OpenSSL expat libffi zlib cfuhash libmpdec W3C C14N test suite mimalloc asyncio Global Unbounded Sequences (GUS) Previous topic Copyright This Page Report a Bug Show Source \u00c2\u00ab Navigation index modules | previous | Python \u00bb 3.13.2 Documentation \u00bb History and License | Theme Auto Light Dark | \u00a9 Copyright 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See History and License for more information. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Apr 01, 2025 (14:46 UTC). Found a bug ? Created using Sphinx 8.2.3."
  },
  "http://bottlepy.org": {
    "url": "http://bottlepy.org",
    "content": "Bottle: Python Web Framework \u2014 Bottle 0.14-dev documentation Bottle: Python Web Framework \u00c2\u00b6 Bottle is a fast, simple and lightweight WSGI micro web-framework for Python . It is distributed as a single file module and has no dependencies other than the Python Standard Library . Routing: Requests to function-call mapping with support for clean and dynamic URLs. Templates: Fast and pythonic built-in template engine and support for mako , jinja2 and cheetah templates. Utilities: Convenient access to form data, file uploads, cookies, headers and other HTTP features. Server: Built-in HTTP development server and support for a wide range of WSGI capable HTTP server (e.g. gunicorn , paste or cheroot ). Example: \u00e2\u0080\u009cHello World\u00e2\u0080\u009d in a bottle from bottle import route , run , template @route ( '/hello/<name>' ) def index ( name ): return template ( '<b>Hello {{name}}</b>!' , name = name ) run ( host = 'localhost' , port = 8080 ) Run this script or paste it into a Python console, then point your browser to http://localhost:8080/hello/world . That\u00e2\u0080\u0099s it. Download and Install \u00c2\u00b6 Install the latest stable release with pip install bottle or download bottle.py (unstable) into your project directory. There are no hard [ 1 ] dependencies other than the Python standard library. Dead Snakes \u00c2\u00b6 Bottle up to version 0.12 supported an absurd range of Python versions, some of which reached their end-of-life well over a decade ago. Starting with Bottle 0.13 we ensure backwards compatibility with maintained versions of Python only. Outdated Python versions may still work, but are no longer tested for compatibility. If you are in the unfortunate position to have to rely on \u00e2\u0080\u009cdead snakes\u00e2\u0080\u009d for production, just stick with Bottle 0.12 (LTS) or whichever release of Bottle still supports it. Everyone else should upgrade regularly to benefit from new features and improvements. Python Support Matrix \u00c2\u00b6 Bottle Release Python 2 Python 3 0.12 2.5 - 2.7 3.2 - 3.12 0.13 2.7 >=3.8 [ 2 ] 0.14 (planned) dropped >=3.8 Documentation \u00c2\u00b6 Getting Started User\u00e2\u0080\u0099s Guide Installation Hello World! The Application Object Debug Mode Command Line Interface Request Routing Serving Assets Generating content Error handling Request Data Templates Structuring Applications Glossary API Reference Global functions Global decorators Request Context Helper Functions Exceptions The Bottle Class The Request Object The Response Object Data Structures Request routing Templating HTTP utilities Misc utilities Release Notes Release 0.14 (in development) Release 0.13 Release 0.12 Release 0.11 Release 0.10 Release 0.9 Release 0.8 F.A.Q. General questions Common errors and pitfalls Recieps for common tasks Advanced Topics Request Routing Rule Syntax Wildcard Filters Legacy Syntax Explicit routing configuration Configuration Configuration Basics Naming Convention Load configuration from a File Load configuration from a python module Loading configuration from a dict Listening to configuration changes Filters and other Meta Data API Documentation SimpleTemplate SimpleTemplate Syntax Template Functions SimpleTemplate API Deployment Scaling for Production Asynchronous Applications The Limits of Synchronous WSGI Greenlets to the rescue Event Callbacks Finally: WebSockets Plugins Using Plugins Plugin Basics Managing Plugins Configuring Plugins Writing Plugins Plugin API The Route Context Runtime optimizations Common patterns Plugin Example: SQLitePlugin 3rd Party Plugins Additional Notes ToDo Application Example Goals Prior to Starting \u00e2\u0080\u00a6 Writing a Web-Based ToDo Application with Bottle Deployment Final Words Complete Example Listing Development Developer Notes Get involved Get the Sources Releases and Updates Repository Structure Submitting Patches Contributors License \u00c2\u00b6 Code and documentation are available according to the MIT License: Copyright ( c ) 2009 - 2024 , Marcel Hellkamp . Permission is hereby granted , free of charge , to any person obtaining a copy of this software and associated documentation files ( the \"Software\" ), to deal in the Software without restriction , including without limitation the rights to use , copy , modify , merge , publish , distribute , sublicense , and / or sell copies of the Software , and to permit persons to whom the Software is furnished to do so , subject to the following conditions : The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software . THE SOFTWARE IS PROVIDED \"AS IS\" , WITHOUT WARRANTY OF ANY KIND , EXPRESS OR IMPLIED , INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY , FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT . IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM , DAMAGES OR OTHER LIABILITY , WHETHER IN AN ACTION OF CONTRACT , TORT OR OTHERWISE , ARISING FROM , OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE . The Bottle logo however is NOT covered by that license. It is allowed to\nuse the logo as a link to the bottle homepage or in direct context with\nthe unmodified library. In all other cases please ask first. Footnotes [ 1 ] Usage of the template or server adapter classes requires the corresponding template or server modules. [ 2 ] Bottle 0.13 technically still works with Python 3.6 and 3.7 but is not tested with those versions. Bottle is a fast, simple and lightweight WSGI micro web-framework for Python. Table of Contents Getting Started User\u00e2\u0080\u0099s Guide API Reference Release Notes F.A.Q. Advanced Topics Request Routing Configuration SimpleTemplate Deployment Asynchronous Applications Plugins Using Plugins Writing Plugins 3rd Party Plugins Additional Notes ToDo Application Example Development Developer Notes Contributors Releases This is the documentation for Bottle-0.14-dev , which is\n    not released yet. Bottle dev (next) Bottle 0.13 (stable) Bottle 0.12 (LTS) Links Documentation Python Package Index Sources at GitHub Mailing list Quick search \u00a9 Copyright 2009-2025, Marcel Hellkamp"
  },
  "http://www.wxpython.org/": {
    "url": "http://www.wxpython.org/",
    "content": "Welcome to wxPython! | wxPython Skip to main content Toggle navigation About Overview Screenshots License History News Downloads Documentation API Reference wxPython Wiki wxPython Bookshelf Presentations Full Changelog Project README Support Issue Tracker Discussion Site Mail Lists IRC Channel StackOverflow How to report issues Developers Contributor Guide Full Changelog wxPython-dev mail list Docs built daily Buildbot Blog wxForty-Two Blog About 42 Archive Tags Welcome to wxPython! This website is all about wxPython, the cross-platform GUI toolkit for the\nPython language. With wxPython software developers can create truly native user\ninterfaces for their Python applications, that run with little or no\nmodifications on Windows, Macs and Linux or other unix-like systems. Learn more Latest News wxPython 4.2.2 Released The wxPython Team 2024-09-11 00:00 wxPython 4.2.2 is now available at PyPI , with some additional files at Extras Changes in this release: This release was built using the wxWidgets' v3.2.6 release tag.  This is the first release built using GitHub infrastructure instead of the buildbots.  Please report any problems with the wheels. Fix some Python 3.12 compatibility issues (segfault on exit) by upgrading sip & waf Fix more float/int conversion issues in wx.lib classes (#2415, #2417, #2429, #2470, #2528, #2542) Add initialValue argument to wx.lib.DirBrowseButton (#2430) Fix wxImage.Clear() (#2433) Fix blurry text in AuiNotebook tab (#2360) Add support for frozen rows and columns to GridWithLabelRenderersMixin (#2436) demo: ShortcutEditor: Fix broken call GetMenuBar() (#2412) Add proper support for DataViewCheckIconTextRenderer (#2425) Remove legacy macOS logic, use wx.SystemSettings to select colors (#2018) Build: Use new tarfile.extractall() filter for safer tarfile extraction (#2443) Fix typo in wx.lib.agw.persist_handlers (#2469) Fix 'str' to 'wxString' converstation, when emoji is inside string (#2446) Use unwrap before isbuiltin check (#2487) Preserve pane icons when loading a perspective in agw.aui (#2494) wx.agw.aui: don't uninitialize the AuiManager if the window close event is vetoed (#2460) Pure python AUI: Make behavior in all platforms more equal (#2501) wx.agw.aui. Do layout as the last step after all pane infos have recomputed their best sizes (#2500) Fix additional SyntaxWarnings with Python 3.12 (#2502) Fix wx.lib.agw.ribbon.RibbonButtonBar DeleteButton function (#2511) UltimateListCtrl: Add support for ULC_AUTO_CHECK_PARENT (#2518) Remove dependency on distutils (#2519) Improve wx.lib.agw.FlatMenu memory usage (#2373) Support NumPy 2.0 (#2580, 2591) Fix EditLabel on CustomTreeCtrl doesn't automatically select the entire text (#2549) Fix Widgets placed in the UltimateListControl are drawn in the wrong location (#2410) Fix wx.lib.agw.aui sometimes shows \"ghost\" docking guide (#2364) Fix Thumbnailctrl SetSelection raises exception if it tries to scroll (#2345) wxPython 4.2.1 Released The wxPython Team 2023-06-07 00:00 \"Size matters not.\" (Yoda) wxPython 4.2.1 is now available at PyPI , with some additional files at Extras The biggest change in this release is the addition of Mac and Windows builds for both Python 3.11 and Python 3.12 (beta). In addition there have been some updates in the distro versions used for the Linux wheels available at the extras archive , including some with Python 3.11 builds. wxPython 4.2.0 Released The wxPython Team 2022-08-07 00:00 \"Rumors of my death are only slightly exaggerated\" wxPython 4.2.0 is now available at PyPI , with some additional files at Extras New and improved in this release: Yes, it's been a VERY long time since the last release. I'm not dead, just on\n  an extended break. It took me a while to get up to speed on a new day job, and\n  then there was a seemingly perpetual crunch-mode to get the product through a\n  couple release cycles. I can't say that things are fully back to normal yet,\n  but at least I now know what I'm doing. Mostly. <wink> This release is built using the wxWidgets' 3.2.0 release tag. Tweaked the build scripts a bit to ensure that on non-Windows platforms that\n  the compiler and flags used by default match those used by wxWidgets, (with\n  the flags needed by Python added on.) The compiler commands can be overridden\n  by setting CC and CXX in the environment if needed. #1247 On Windows the build code that locates and sets up the environment for the\n  MSVC compiler no longer relies on distutils code, but is now using more modern\n  code in setuptools instead. This enables much more compiler flexibility and\n  wxPython should now be buildable with Visual Studio versions from 2015 through\n  2022+. Switched to SIP 6 for generating the wrapper code. Rather than a standalone\n  executable, SIP is now a Python package that needs to be installed in the\n  Python environment used for the build. A dependency has been added to\n  requirements/devel.txt to help ensure that the correct version is installed.\n  The wx.siplib module code is no longer kept in the repository, but is\n  generated during the build. Changed wx.App.InitLocale to just do locale.setlocale(locale.LC_ALL, \"C\") to undo what Python (3.8+ on Windows) does. This lets wxWidgets start with an\n  uninitialized locale as it expects. #1637 Fixed issues related to time_t always being treated as a 32-bit value on\n  Windows. #1910 Added wx.FullScreenEvent and wx.EVT_FULLSCREEN. The legacy, OSX-Only wx.webkit module has been removed. Fix building wxPython with Python 3.10 on Windows #2016 Fix PyProgress on Windows by avoiding invalid sizer flags #1985 Fix 'More Grid Features' in demo Many of the widgets which deal with bitmaps have been changed to use a\n  wx.BitmapBundle object instead of wx.Bitmap. This is the mechanism which\n  wxWidgets has implemented for adapting to things like Hi-DPI displays.\n  Essentially you can load a list of bitmaps of different sizes (but similar or\n  scaled content) into a wx.BitmapBundle, and the widget can choose one based on\n  the display density. Existing code should be able to continue to pass a\n  wx.Bitmap to the widget constructor or to methods like SetBitmap, as wxPython\n  will automatically convert from a wx.Bitmap to a wx.BitmapBundle containing\n  the single image provided. Add support for new wx.grid event, EVT_GRID_ROW_MOVE Fix path issues in wx.lib.agw.multidirdialog #2120 Fix eventwatcher checkAll(check=False) #2139 Fix exception on grid labels click #1841 Fix a large number of Python 3.10 issues.  In Python 3.10, a change was\n  implemented where extension functions that take integer arguments will no\n  longer silently accept non-integer arguments (e.g., floats) that can only be\n  converted to integers with a loss of precision.  Fixed most of these issues\n  in the pure-Python classes and demos by explicitly converting the parameters\n  to int before passing them to wxWidgets.  There is loss of precision, but\n  this was happening before (automatically) anyway as most wxWidgets\n  DeviceContext functions operate using integers. Fix PlotCanvas point label drawing on Linux Fix GetPopupMenu override for wx.adv.TaskbarIcon #2067 Fix invisible text in lib.plot with dark theme Add new button type: ShowHideToggleButton.  Like a ToggleButton, but with an\n  associated \"menu\", a Window or Sizer which is shown/hidden when button is\n  toggled. Includes methods for setting active and inactive fore/background\n  colours. Fix unbinding of events in FIFO order #2027 Enable customization of layout of pdfviewer button panel Support newer PyMuPDF versions #2205 IntCtrl: Change default colour to wx.NullColour so the default color will be\n  used. #2215 Change PopupControl to respect all the parameters passed to its init method. #2218 Fixes in flatmenu.py Remove and DestroyItem #2219 Using the MinGW toolchain to build wxPython has been simplified a bit. #2211 More news Quick Links Hello World API Reference wxPython Wiki Report a Bug GitHub Repository Discuss wxPython More wx Goodies wxWidgets wxFormBuilder wxGlade Friends of wxPython wxWidgets Blog Mouse vs. Python Find My Electric Follow News feed Blog feed Tags Archive Contents \u00c2\u00a9 2025  The wxPython Team - Powered by Nikola , Python and Magic."
  },
  "https://blog.python.org": {
    "url": "https://blog.python.org",
    "content": "Python Insider Python core development news and information. Friday, March 14, 2025 Python 3.14.0 alpha 6 is out Here comes the penultimate alpha. https://www.python.org/downloads/release/python-3140a6/ This is an early developer preview of Python\n3.14 Major\nnew features of the 3.14 series, compared to 3.13 Python 3.14 is still in development. This release, 3.14.0a6, is the\nsixth of seven planned alpha releases. Alpha releases are intended to make it easier to test the current\nstate of new features and bug fixes and to test the release process. During the alpha phase, features may be added up until the start of\nthe beta phase (2025-05-06) and, if necessary, may be modified or\ndeleted up until the release candidate phase (2025-07-22). Please keep\nin mind that this is a preview release and its use is not recommended for production environments. Many new features for Python 3.14 are still being planned and\nwritten. Among the new major new features and changes so far: PEP 649 : deferred\nevaluation of annotations PEP 741 : Python\nconfiguration C API PEP 761 : Python 3.14\nand onwards no longer provides PGP signatures for release artifacts.\nInstead, Sigstore is recommended for verifiers. Improved\nerror messages A new\ntype of interpreter . For certain newer compilers, this interpreter\nprovides significantly better performance. Opt-in for now, requires\nbuilding from source. UUID\nversions 6-8 are now supported by the uuid module, and\ngeneration of versions 3-5 and 8 are up to 40% faster. Python removals and deprecations C API removals and deprecations (Hey, fellow core developer, if a feature\nyou find important is missing from this list, let Hugo\nknow.) The next pre-release of Python 3.14 will be the final alpha,\n3.14.0a7, currently scheduled for 2025-04-08. More resources Online\ndocumentation PEP 745 , 3.14\nRelease Schedule Report bugs at github.com/python/cpython/issues Help fund Python and\nits community And now for\nsomething completely different March 14 is celebrated as pi day , because 3.14 is an\napproximation of \u03c0. The day is observed by eating pies (savoury and/or\nsweet) and celebrating \u03c0. The first pi day was organised by physicist\nand tinkerer Larry Shaw of the San Francisco Exploratorium in 1988. It is also the International\nDay of Mathematics and Albert Einstein\u2019s birthday. Let\u2019s all eat\nsome pie, recite some \u03c0, install and test some py, and wish a happy\nbirthday to Albert, Loren and all the other pi day children! Enjoy the new release Thanks to all of the many volunteers who help make Python Development\nand these releases possible! Please consider supporting our efforts by\nvolunteering yourself or through organisation contributions to the Python Software\nFoundation . Regards from Helsinki as fresh snow falls, Your release team, Hugo van Kemenade @hugovk Ned Deily @nad Steve Dower @steve.dower \u0141ukasz Langa @ambv Posted by Hugo at 1:27\u202fPM Email This BlogThis! Share to X Share to Facebook Share to Pinterest Labels: releases Tuesday, February 11, 2025 Python 3.14.0 alpha 5 is out Here comes the antepenultimate alpha. https://www.python.org/downloads/release/python-3140a5/ This is an early developer preview of Python\n3.14 Major\nnew features of the 3.14 series, compared to 3.13 Python 3.14 is still in development. This release, 3.14.0a5, is the\nfifth of seven planned alpha releases. Alpha releases are intended to make it easier to test the current\nstate of new features and bug fixes and to test the release process. During the alpha phase, features may be added up until the start of\nthe beta phase (2025-05-06) and, if necessary, may be modified or\ndeleted up until the release candidate phase (2025-07-22). Please keep\nin mind that this is a preview release and its use is not recommended for production environments. Many new features for Python 3.14 are still being planned and\nwritten. Among the new major new features and changes so far: PEP 649 : deferred\nevaluation of annotations PEP 741 : Python\nconfiguration C API PEP 761 : Python 3.14\nand onwards no longer provides PGP signatures for release artifacts.\nInstead, Sigstore is recommended for verifiers. Improved\nerror messages A new\ntype of interpreter . For certain newer compilers, this interpreter\nprovides significantly better performance. Opt-in for now, requires\nbuilding from source. Python removals and deprecations C API removals and deprecations (Hey, fellow core developer, if a feature\nyou find important is missing from this list, let Hugo\nknow.) The next pre-release of Python 3.14 will be the penultimate alpha,\n3.14.0a6, currently scheduled for 2025-03-14. More resources Online\ndocumentation PEP 745 , 3.14\nRelease Schedule Report bugs at github.com/python/cpython/issues Help fund Python and\nits community And now for\nsomething completely different 2025-01-29 marked the start of a new lunar year, the Year of the\nSnake \ud83d\udc0d (and the Year of Python?). For centuries, \u03c0 was often approximated as 3 in China. Some time\nbetween the years 1 and 5 CE, astronomer, librarian, mathematician and\npolitician Liu Xin (\u5289\u6b46) calculated \u03c0 as 3.154. Around 130 CE, mathematician, astronomer, and geographer Zhang Heng\n(\u5f35\u8861, 78\u2013139) compared the celestial circle with the diameter of the\nearth as 736:232 to get 3.1724. He also came up with a formula for the\nratio between a cube and inscribed sphere as 8:5, implying the ratio of\na square\u2019s area to an inscribed circle is \u221a8:\u221a5. From this, he\ncalculated \u03c0 as \u221a10 (~3.162). Third century mathematician Liu Hui (\u5218\u5fbd) came up with an algorithm\nfor calculating \u03c0 iteratively: calculate the area of a polygon inscribed\nin a circle, then as the number of sides of the polygon is increased,\nthe area becomes closer to that of the circle, from which you can\napproximate \u03c0. This algorithm is similar to the method used by Archimedes in the 3rd\ncentury BCE and Ludolph van Ceulen in the 16th century CE (see 3.14.0a2\n  release notes ), but Archimedes only went up to a 96-sided polygon\n(96-gon). Liu Hui went up to a 192-gon to approximate \u03c0 as 157/50 (3.14)\nand later a 3072-gon for 3.14159. Liu Hu wrote a commentary on the book The Nine Chapters on the\nMathematical Art which included his \u03c0 approximations. In the fifth century, astronomer, inventor, mathematician,\npolitician, and writer Zu Chongzhi (\u7956\u6c96\u4e4b, 429\u2013500) used Liu Hui\u2019s\nalgorithm to inscribe a 12,288-gon to compute \u03c0 between 3.1415926 and\n3.1415927, correct to seven decimal places. This was more accurate than\nHellenistic calculations and wouldn\u2019t be improved upon for 900\nyears. Happy Year of the Snake! Enjoy the new release Thanks to all of the many volunteers who help make Python Development\nand these releases possible! Please consider supporting our efforts by\nvolunteering yourself or through organisation contributions to the Python Software\nFoundation . Regards from a remarkably snowless Helsinki, Your release team, Hugo van Kemenade Ned Deily Steve Dower \u0141ukasz Langa Posted by Hugo at 2:41\u202fPM Email This BlogThis! Share to X Share to Facebook Share to Pinterest Labels: releases Tuesday, February 4, 2025 Python 3.13.2 and 3.12.9 now available! A small release day today! That is to say the releases are relatively \nsmall; the day itself was of average size, as most days are. Python 3.13.2 Python 3.13\u2019s second maintenance release. About 250 changes went into \nthis update, and can be yours for free if you just upgrade now. https://www.python.org/downloads/release/python-3132/ Python 3.12.9 Python 3.12\u2019s ninth maintenance release already. Just 180 changes for 3.12, but it\u2019s still worth upgrading. https://www.python.org/downloads/release/python-3129/ Enjoy the new releases Thanks to all of the many volunteers who help make Python Development\n and these releases possible! Please consider supporting our efforts by \nvolunteering yourself or through organization contributions to the \nPython Software Foundation. Regards from your tireless, tireless release team, Thomas Wouters Ned Deily Steve Dower \u0141ukasz Langa Posted by Thomas Wouters at 2:58\u202fPM Email This BlogThis! Share to X Share to Facebook Share to Pinterest Tuesday, January 14, 2025 Python 3.14.0 alpha 4 is out Hello, three dot fourteen dot zero alpha four! https://www.python.org/downloads/release/python-3140a4/ This is an early developer preview of Python\n3.14 Major\nnew features of the 3.14 series, compared to 3.13 Python 3.14 is still in development. This release, 3.14.0a4, is the\nfourth of seven planned alpha releases. Alpha releases are intended to make it easier to test the current\nstate of new features and bug fixes and to test the release process. During the alpha phase, features may be added up until the start of\nthe beta phase (2025-05-06) and, if necessary, may be modified or\ndeleted up until the release candidate phase (2025-07-22). Please keep\nin mind that this is a preview release and its use is not recommended for production environments. Many new features for Python 3.14 are still being planned and\nwritten. Among the new major new features and changes so far: PEP 649 : deferred\nevaluation of annotations PEP 741 : Python\nconfiguration C API PEP 761 : Python 3.14\nand onwards no longer provides PGP signatures for release artifacts.\nInstead, Sigstore is recommended for verifiers. Improved\nerror messages Many\nremovals of deprecated classes, functions, methods and parameters in\nvarious standard library modules. New\ndeprecations , many of which are scheduled for removal from Python\n3.16 C API removals and deprecations (Hey, fellow core developer, if a feature\nyou find important is missing from this list, let Hugo\nknow.) The next pre-release of Python 3.14 will be 3.14.0a5, currently\nscheduled for 2025-02-11. More resources Online\ndocumentation PEP 745 , 3.14\nRelease Schedule Report bugs at https://github.com/python/cpython/issues Help fund Python and\nits community And now for\nsomething completely different In Python, you can use Greek letters as constants. For example: from math import pi as \u03c0 def circumference(radius: float ) -> float : return 2 * \u03c0 * radius print (circumference( 6378.137 )) # 40075.016685578485 Enjoy the new release Thanks to all of the many volunteers who help make Python Development\nand these releases possible! Please consider supporting our efforts by\nvolunteering yourself or through organisation contributions to the Python Software\nFoundation . Regards from a slushy, slippery Helsinki, Your release team, Hugo van Kemenade Ned Deily Steve Dower \u0141ukasz Langa Posted by Hugo at 11:46\u202fAM Email This BlogThis! Share to X Share to Facebook Share to Pinterest Labels: releases Tuesday, December 17, 2024 Python 3.14.0 alpha 3 is out O Alpha 3, O Alpha 3, how lovely are your branches! https://www.python.org/downloads/release/python-3140a3/ This is an early developer preview of Python\n3.14 Major\nnew features of the 3.14 series, compared to 3.13 Python 3.14 is still in development. This release, 3.14.0a3, is the\nthird of seven planned alpha releases. Alpha releases are intended to make it easier to test the current\nstate of new features and bug fixes and to test the release process. During the alpha phase, features may be added up until the start of\nthe beta phase (2025-05-06) and, if necessary, may be modified or\ndeleted up until the release candidate phase (2025-07-22). Please keep\nin mind that this is a preview release and its use is not recommended for production environments. Many new features for Python 3.14 are still being planned and\nwritten. Among the new major new features and changes so far: PEP 649 : deferred\nevaluation of annotations PEP 741 : Python\nconfiguration C API PEP 761 : Python 3.14\nand onwards no longer provides PGP signatures for release artifacts.\nInstead, Sigstore is recommended for verifiers. Improved\nerror messages (Hey, fellow core developer, if a feature\nyou find important is missing from this list, let Hugo\nknow.) The next pre-release of Python 3.14 will be 3.14.0a4, currently\nscheduled for 2025-01-14. More resources Online\ndocumentation PEP 745 , 3.14\nRelease Schedule Report bugs at https://github.com/python/cpython/issues Help fund Python and\nits community And now for\nsomething completely different A mince pie is a small, round covered tart filled with \u201cmincemeat\u201d,\nusually eaten during the Christmas season \u2013 the UK consumes some 800\nmillion each Christmas. Mincemeat is a mixture of things like apple,\ndried fruits, candied peel and spices, and originally would have\ncontained meat chopped small, but rarely nowadays. They are often served\nwarm with brandy butter. According to the Oxford English Dictionary, the earliest mention of\nChristmas mince pies is by Thomas Dekker, writing in the aftermath of\nthe 1603\nLondon plague , in Newes\nfrom Graues-end: Sent to Nobody (1604): Ten thousand in London swore to feast their neighbors with nothing\nbut plum-porredge, and mince-pyes all Christmas. Here\u2019s a meaty recipe from Rare\nand Excellent Receipts, Experienc\u2019d and Taught by Mrs Mary Tillinghast\nand now Printed for the Use of her Scholars Only (1678): How to make Mince-pies. To every pound of Meat, take two pound of beef Suet, a pound of\nCorrants, and a quarter of an Ounce of Cinnamon, one Nutmeg, a little\nbeaten Mace, some beaten Colves, a little Sack & Rose-water, two\nlarge Pippins, some Orange and Lemon peel cut very thin, and shred very\nsmall, a few beaten Carraway-seeds, if you love them the Juyce of half a\nLemon squez\u2019d into this quantity of meat; for Sugar, sweeten it to your\nrelish; then mix all these together and fill your Pie. The best meat for\nPies is Neats-Tongues, or a leg of Veal; you may make them of a leg of\nMutton if you please; the meat must be parboyl\u2019d if you do not spend it\npresently; but if it be for present use, you may do it raw, and the Pies\nwill be the better. Enjoy the new release Thanks to all of the many volunteers who help make Python Development\nand these releases possible! Please consider supporting our efforts by\nvolunteering yourself or through organisation contributions to the Python Software\nFoundation . Regards from a snowy and slippery Helsinki, Your release team, Hugo van Kemenade Ned Deily Steve Dower \u0141ukasz Langa Posted by Hugo at 11:20\u202fAM Email This BlogThis! Share to X Share to Facebook Share to Pinterest Labels: releases Tuesday, December 3, 2024 Python 3.13.1, 3.12.8, 3.11.11, 3.10.16 and 3.9.21 are now available Another big release day! Python 3.13.1 and 3.12.8\n were regularly scheduled releases, but they do contain a few security \nfixes. That makes it a nice time to release the security-fix-only \nversions too, so everything is as secure as we can make it. Python 3.13.1 Python 3.13\u2019s first maintenance release. My child is all growed up \nnow, I guess! Almost 400 bugfixes, build improvements and documentation \nchanges went in since 3.13.0, making this the very best Python release \nto date. https://www.python.org/downloads/release/python-3131/ Python 3.12.8 Python 3.12 might be slowly reaching middle age, but still received \nover 250 bugfixes, build improvements and documentation changes since \n3.12.7. https://www.python.org/downloads/release/python-3128/ Python 3.11.11 I know it\u2019s probably hard to hear, but this is the second security-only release of Python 3.11. Yes, really! Oh yes, I know, I \nknow, but it\u2019s true! Only 11 commits went in since 3.11.10. https://www.python.org/downloads/release/python-31111/ Python 3.10.16 Python 3.10 received a total of 14 commits since 3.10.15. Why more \nthan 3.11? Because it needed a little bit of extra attention to keep \nworking with current GitHub practices, I guess. https://www.python.org/downloads/release/python-31016/ Python 3.9.21 Python 3.9 isn\u2019t quite ready for pasture yet, as it\u2019s set to receive \nsecurity fixes for at least another 10 months. Very similarly to 3.10, \nit received 14 commits since 3.9.20. https://www.python.org/downloads/release/python-3921/ Stay safe and upgrade! As always, upgrading is highly recommended to all users of affected versions. Enjoy the new releases Thanks to all of the many volunteers who help make Python Development\n and these releases possible! Please consider supporting our efforts by \nvolunteering yourself or through organization contributions to the \nPython Software Foundation. Regards from your tireless, tireless release team, Thomas Wouters Ned Deily Steve Dower Pablo Galindo Salgado \u0141ukasz Langa Posted by Thomas Wouters at 7:01\u202fPM Email This BlogThis! Share to X Share to Facebook Share to Pinterest Tuesday, November 19, 2024 Python 3.14.0 alpha 2 released Alpha 2? But Alpha 1 only just came out! https://www.python.org/downloads/release/python-3140a2/ This is an early developer preview of Python\n3.14 Major\nnew features of the 3.14 series, compared to 3.13 Python 3.14 is still in development. This release, 3.14.0a2 is the\nsecond of seven planned alpha releases. Alpha releases are intended to make it easier to test the current\nstate of new features and bug fixes and to test the release process. During the alpha phase, features may be added up until the start of\nthe beta phase (2025-05-06) and, if necessary, may be modified or\ndeleted up until the release candidate phase (2025-07-22). Please keep\nin mind that this is a preview release and its use is not recommended for production environments. Many new features for Python 3.14 are still being planned and\nwritten. Among the new major new features and changes so far: PEP 649 : deferred\nevaluation of annotations PEP 741 : Python\nconfiguration C API PEP 761 : Python 3.14\nand onwards no longer provides PGP signatures for release artifacts.\nInstead, Sigstore is recommended for verifiers. Improved\nerror messages (Hey, fellow core developer, if a feature\nyou find important is missing from this list, let Hugo\nknow.) The next pre-release of Python 3.14 will be 3.14.0a3, currently\nscheduled for 2024-12-17. More resources Online\ndocumentation PEP 745 , 3.14\nRelease Schedule Report bugs at https://github.com/python/cpython/issues Help fund Python and\nits community Enjoy the new release Thanks to all of the many volunteers who help make Python Development\nand these releases possible! Please consider supporting our efforts by\nvolunteering yourself or through organisation contributions to the Python Software\nFoundation . Regards from a chilly Helsinki with snow on the way, Your release team, Hugo van Kemenade Ned Deily Steve Dower \u0141ukasz Langa Posted by Hugo at 4:03\u202fPM Email This BlogThis! Share to X Share to Facebook Share to Pinterest Labels: releases Older Posts Home Subscribe to: Posts (Atom) Subscribe Subscribe to Python Insider via RSS , or Twitter Related Links python.org Python-Dev mailing list Python Developer's Guide Translations Chinese (Simplified) Chinese (Traditional) French German Japanese Korean Portuguese Romanian Russian Spanish Python-Dev Blogs Eli Bendersky Summary of reading: January - March 2025 19 hours ago PyPy Status Blog HPy kick-off sprint report 5 years ago Pumpichank Creating Python Snaps 9 years ago Tim Golden London Python Dojo December 2014 10 years ago R. David Murray Asyncio Implementation Overview 10 years ago The Voidspace Techie Blog unittest.mock and mock 1.0 alpha 1 13 years ago Tarek Ziad\u00e9 More privacy please 13 years ago Deep Thoughts by Raymond Hettinger Python\u2019s super() considered super! 13 years ago Jesse Noller Senthil Kumaran Brett Cannon Boredom & Laziness Brian Curtin Blog Archive \u25bc 2025 (4) \u25bc March (1) Python 3.14.0 alpha 6 is out \u25ba February (2) \u25ba January (1) \u25ba 2024 (22) \u25ba December (2) \u25ba November (1) \u25ba October (4) \u25ba September (1) \u25ba August (2) \u25ba July (1) \u25ba June (3) \u25ba May (1) \u25ba April (2) \u25ba March (2) \u25ba February (2) \u25ba January (1) \u25ba 2023 (18) \u25ba December (2) \u25ba November (1) \u25ba October (3) \u25ba September (2) \u25ba August (2) \u25ba July (1) \u25ba June (2) \u25ba May (1) \u25ba April (1) \u25ba March (1) \u25ba February (1) \u25ba January (1) \u25ba 2022 (23) \u25ba December (1) \u25ba November (1) \u25ba October (4) \u25ba September (2) \u25ba August (2) \u25ba July (2) \u25ba June (2) \u25ba May (3) \u25ba April (1) \u25ba March (3) \u25ba February (1) \u25ba January (1) \u25ba 2021 (24) \u25ba December (2) \u25ba November (2) \u25ba October (2) \u25ba September (2) \u25ba August (2) \u25ba July (1) \u25ba June (3) \u25ba May (1) \u25ba April (3) \u25ba March (1) \u25ba February (4) \u25ba January (1) \u25ba 2020 (32) \u25ba December (2) \u25ba November (2) \u25ba October (2) \u25ba September (3) \u25ba August (3) \u25ba July (4) \u25ba June (4) \u25ba May (2) \u25ba April (4) \u25ba March (3) \u25ba February (2) \u25ba January (1) \u25ba 2019 (36) \u25ba December (3) \u25ba November (1) \u25ba October (8) \u25ba September (1) \u25ba August (3) \u25ba July (5) \u25ba June (3) \u25ba May (2) \u25ba March (7) \u25ba February (3) \u25ba 2018 (24) \u25ba December (2) \u25ba October (2) \u25ba September (1) \u25ba August (1) \u25ba June (2) \u25ba May (3) \u25ba April (3) \u25ba March (5) \u25ba February (2) \u25ba January (3) \u25ba 2017 (17) \u25ba December (2) \u25ba October (2) \u25ba September (3) \u25ba August (2) \u25ba July (3) \u25ba June (1) \u25ba March (2) \u25ba January (2) \u25ba 2016 (18) \u25ba December (5) \u25ba November (1) \u25ba October (2) \u25ba September (2) \u25ba August (1) \u25ba July (1) \u25ba June (5) \u25ba May (1) \u25ba 2015 (14) \u25ba December (2) \u25ba November (1) \u25ba September (3) \u25ba August (1) \u25ba July (1) \u25ba June (1) \u25ba May (2) \u25ba March (2) \u25ba January (1) \u25ba 2014 (8) \u25ba December (1) \u25ba November (1) \u25ba May (1) \u25ba March (3) \u25ba February (2) \u25ba 2013 (5) \u25ba November (2) \u25ba October (1) \u25ba March (1) \u25ba February (1) \u25ba 2012 (9) \u25ba December (1) \u25ba November (1) \u25ba October (2) \u25ba August (1) \u25ba June (2) \u25ba May (1) \u25ba March (1) \u25ba 2011 (25) \u25ba August (2) \u25ba July (3) \u25ba June (1) \u25ba May (7) \u25ba April (7) \u25ba March (5) Contributors A.M. Kuchling Alfonso de la Guarda Anthony Scopatz Antoine P. Benjamin Peterson Brian Curtin Davidmh Donald Stufft Doug Hellmann Ee Durbin Ezio Melotti Georg Brandl Hugo Jesse Kelsey Hightower Larry Hastings Mathieu Leduc-Hamel Michael Markert Mike Driscoll Ned Deily Pablo Galindo Paul Moore Philip Jenvey Sumana Harihareswara Thomas Wouters Unknown Unknown \u0141ukasz Langa \u00c9ric Araujo e haypo tp Copyright Python Insider by the Python Core Developers is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License . Based on a work at blog.python.org . Powered by Blogger ."
  },
  "http://pycon.blogspot.com/": {
    "url": "http://pycon.blogspot.com/",
    "content": "The PyCon US Blog Skip to main content The PyCon US Blog Search Search This Blog Posts Call for Volunteers: PyCon US Code of Conduct Team Posted by Olivia Sauls March 25, 2025 Help us make PyCon US welcoming, fun, and safe! We are looking for volunteers to join the Code of Conduct Team for PyCon US 2025  in Pittsburgh, PA. The Code of Conduct Team supports the PyCon US community by taking reports should anyone violate the PyCon US Code of Conduct  and, when appropriate, participating in deciding how PyCon US should respond. Code of Conduct Team shifts are 3-4 hours long. We are looking for volunteers for the tutorials (May 14 - 15), the main conference (May 16 - 18), and the first 2 days of sprints (May 19 - 20), and ask that you be prepared to do a minimum of two shifts. As a member of the Code of Conduct Team, you will: Take reports of incidents that occur at PyCon US (there\u2019s a handy form for this) Keep track of your email and/or Slack while on shift Participate in discussions about how to respond to incidents (as needed)  As a member of the Code of Conduct Team, you will not: Have to make any tough decisions on your own Have to approach anyone you are un... Share Get link Facebook X Pinterest Email Other Apps Post a Comment Read more Refund Policy for International Attendees Posted by Deb Nicholson March 19, 2025 International travel to the United States has become more complex for many in our community.   PyCon US welcomes all  community members to Pittsburgh and we are committed to running a safe and friendly event for everyone who is joining us for PyCon US in Pittsburgh. Each nation has its own relationship with the United States, so please contact your country\u2019s State Department, Travel Ministry or Department of Foreign Affairs for travel information specific to traveling from your country to the US. Ultimately, each person must make their own decision based on their personal risk assessment and the travel conditions. If it feels feasible and safe for you to attend PyCon US this year, then we\u2019d love to see you! It is more important than ever to connect with our fellow community members. In light of current conditions, PyCon US would like to highlight the support we provide for international travelers. Refund Policy Details If your PyCon US trip is canceled due to not being able to obtain a... Share Get link Facebook X Pinterest Email Other Apps Post a Comment Read more PyCon US 2025 - Travel Grants Transparency Blog Post Posted by Deb Nicholson March 18, 2025 Providing travel grants to community members for PyCon US and witnessing both their growth and contributions to the event is one of the most fulfilling aspects of our work at the PSF, and every year, we only wish we could award more! PyCon US 2025 received 952 travel grant applications from 87 countries totaling almost $1.7M. We dislike using the phrase \u201crecord-breaking\u201d every year, but it\u2019s true! Again, the number and amount requested have broken our 2024 record . The total dollar amount requested was more than six times the available budget. For 2025, the total PyCon US revenue is budgeted at $2.3M and supports conference costs of $2.5M, including $266K in travel grant funds. The Travel Grant Team offered 272 travel grants and 33 ticket-only grants, amounting to $384K, or about 23%, of travel grant requests received. The PSF is committed to financial transparency , and in line with that commitment, we are happy to share more about how our PyCon US 2025 travel grant process works.... Share Get link Facebook X Pinterest Email Other Apps Post a Comment Read more Support PyLadies: Donate to the PyLadies Auction at PyCon US 2025! Posted by Olivia Sauls March 06, 2025 PyCon US 2025  is quickly approaching and we can\u2019t wait to see all of you there! We're reaching out to our community to help support one of our favorite events: the PyLadies Auction . Our wonderful community is bursting with creative, artsy, and generous folks and we invite you to donate items to this year\u2019s Auction. If you\u2019d like to support PyLadies by making a donation, please fill out the PyLadies Charity Auction donation form . To learn more about the event and what to donate, read on! What to Donate Need inspiration? Over the years, we\u2019ve seen that people love to bid on items that are artsy, nerdy, and Python-specific. Art, decor, customized tech, and vintage PyCon or Python-related swag are all examples of things that will inspire a friendly bidding war. To get more inspiration search \u2018PyLadies Auction\u2019 on social media  or check out the PyLadies Instagram . Items that are personalized or have a story tend to attract bidders\u2013 DIYers, artists, crafters, and collectors, this is ... Share Get link Facebook X Pinterest Email Other Apps Post a Comment Read more Launching the PyCon US 2025 Schedule! Posted by Elaine Wong February 28, 2025 We\u2019re excited to announce the full schedule for PyCon US 2025! For another year in a row, PyCon US received over 900 proposal submissions with this year\u2019s final count totalling 938 proposals! We are so excited to have so many people in our community share their work and ideas with us. Thank you to everyone who submitted their proposals! \u00a0 With these many proposals received, we could easily have enough speakers to fill the program for multiple Python conferences! Our volunteer Program Committee has worked hard to select only 15% of the many strong proposals to create an excellent conference program that covers a wide range of subjects for attendees to enjoy. We\u2019re looking forward to meeting all the presenters and learning from them at PyCon US 2025. Meet Our Keynote Speakers We are thrilled to announce our Keynote speakers. Please welcome Lynn Root, the Marshall Project; Geoff Hing and Tom Meagher , Cory Doctorow, and Dr. Kari L. Jordan who will be sharing their insights and perspec... Share Get link Facebook X Pinterest Email Other Apps Post a Comment Read more The Hatchery Program at PyCon US 2025 Posted by Mariatta January 29, 2025 We are pleased to announce the return of the Hatchery program in PyCon US 2025. What is the Hatchery program? This program offers the pathways for PyCon US attendees to introduce new tracks, activities, summits, demos, etc., at PyCon US\u2014activities that all share and fulfill the\u00a0 Python Software Foundation\u2019s mission \u00a0within the PyCon US schedule. The program began as a trial led by Ee Durbin and Naomi Ceder in 2018, resulting in the creation of several new tracks that are now staples of PyCon US, for example: PyCon US Charlas, Mentored Sprints, and Maintainer\u2019s Summit. With the Hatchery program, we want to provide the opportunity for you, the Python community members, to take active participation and lead new activities and events at PyCon US. We want to provide a transparent process for this, and we also want to ensure that every attendee, whether they are new to the community, or have been at the conference for the 10th time, have the equal opportunity to propose ideas... Share Get link Facebook X Pinterest Email Other Apps Post a Comment Read more Applications for Free Booth Space on Startup Row at PyCon US 2025 Are Now Open Posted by Jason Rowley January 27, 2025 Calling all startup founders and aspiring entrepreneurs: did you know that PyCon US  has been giving away free booth space to early-stage tech companies since 2011? Did you know that, since then, over 150 companies have gotten the opportunity to show off the cool stuff they\u2019re building with Python? Would you have guessed that some of the most popular open source Python packages \u2014 Pandas, Plotly, and more \u2014 were developed by or spun out from companies that presented on Startup Row at PyCon US. Good news: Startup Row  applications are now open! But if you\u2019re the action-oriented type who wants to skip all this reading and get straight to the point, here\u2019s the direct link to the application . Applications close on March 14th, so don\u2019t delay. That\u2019s right. As you might have guessed from the name, Startup Row is its own corner of the PyCon US expo hall offering free booth space to early-stage tech companies. The objective of this program is to give startups the best of what PyCon US has to o... Share Get link Facebook X Pinterest Email Other Apps Post a Comment Read more More posts Archive March 2025 4 February 2025 1 January 2025 2 December 2024 1 November 2024 2 August 2024 1 May 2024 3 April 2024 2 March 2024 1 February 2024 2 January 2024 2 December 2023 1 October 2023 1 June 2023 1 April 2023 2 March 2023 1 February 2023 4 December 2022 1 October 2022 2 August 2022 1 June 2022 1 May 2022 2 April 2022 4 February 2022 2 January 2022 1 December 2021 1 October 2021 2 August 2021 1 June 2021 1 May 2021 6 April 2021 2 March 2021 1 February 2021 1 December 2020 3 July 2020 1 May 2020 2 April 2020 5 March 2020 4 February 2020 2 January 2020 2 December 2019 2 November 2019 3 October 2019 3 September 2019 1 August 2019 1 June 2019 1 May 2019 3 April 2019 4 March 2019 3 February 2019 3 January 2019 2 December 2018 2 November 2018 1 October 2018 3 September 2018 1 August 2018 1 June 2018 1 April 2018 3 February 2018 1 January 2018 1 December 2017 1 November 2017 3 October 2017 2 September 2017 2 May 2017 4 April 2017 3 March 2017 1 February 2017 2 January 2017 1 December 2016 2 November 2016 3 October 2016 1 June 2016 1 May 2016 4 April 2016 4 March 2016 5 February 2016 4 January 2016 2 December 2015 2 November 2015 3 October 2015 1 September 2015 4 June 2015 1 May 2015 2 April 2015 3 March 2015 7 February 2015 5 January 2015 4 December 2014 6 October 2014 1 September 2014 4 August 2014 2 July 2014 3 June 2014 4 May 2014 1 April 2014 6 March 2014 6 February 2014 12 January 2014 8 December 2013 4 November 2013 1 October 2013 4 September 2013 4 August 2013 5 July 2013 2 June 2013 3 May 2013 2 April 2013 3 March 2013 15 February 2013 12 January 2013 18 December 2012 13 November 2012 5 October 2012 2 September 2012 13 August 2012 10 July 2012 7 June 2012 10 May 2012 6 April 2012 1 March 2012 11 February 2012 25 January 2012 14 December 2011 6 November 2011 2 October 2011 7 September 2011 9 August 2011 13 July 2011 5 June 2011 9 May 2011 4 April 2011 1 March 2011 10 February 2011 21 January 2011 14 December 2010 2 September 2010 2 August 2010 2 July 2010 6 June 2010 3 April 2010 3 March 2010 1 February 2010 7 January 2010 7 December 2009 7 November 2009 5 October 2009 7 September 2009 8 August 2009 2 July 2009 4 June 2009 2 May 2009 4 April 2009 3 March 2009 9 February 2009 8 January 2009 3 October 2008 3 September 2008 2 August 2008 1 June 2008 1 May 2008 1 April 2008 25 March 2008 12 February 2008 9 January 2008 5 December 2007 1 November 2007 5 October 2007 2 September 2007 3 August 2007 2 July 2007 1 April 2007 2 March 2007 4 February 2007 18 January 2007 21 December 2006 4 November 2006 6 October 2006 6 February 2006 1 January 2006 1 April 2005 1 March 2005 43 Show more Show less Labels 2018 5k apology Argentina caktus Canada cfp charity childcare cleveland code of conduct confoo.ca COVID-19 dinner duckling earlybird education education summit europython EuroSciPy expo hall financial aid financialaid Finland France funrun german german pycon. PyCon DE guidebook hatchery hotel http://www.blogger.com/img/blank.gif interview job fair Johannesburg keynotes kiwipycon latin america launch lightning talks media statement Montreal open open spaces outreach p passport podcast portland poster session posters proposals pyarkansas pycon PyCon AU PyCon Australia PyCon Canada PyCon DE PyCon US PyCon US 2022 pycon-apac pycon-au pycon-jp pycon-nz Pycon-Tech pycon-us PyCon08 pycon09 pycon2010 pycon2011 pycon2012 pycon2013 pycon2014 pycon2015 pyconde pyconde2012 pyconfi pyconza pyladies PyLadies Auction PyTexas Python raspberry pi reception registration reservations rupy schedule Science scipy shuttle bus soldout South Africa Spanish sponsors sponsorship sprint sprints startup row students summit survey talks talksiwanttosee tutorials volunteers youngcoder Show more Show less Links PyCons Around the World Python Meetups Python Conferences Powered by Blogger Copyright \u00a9 2009\u20132021 Python Software Foundation"
  },
  "https://wiki.gnome.org/Projects/PyGObject": {
    "url": "https://wiki.gnome.org/Projects/PyGObject",
    "content": "Projects/PyGObject \u00e2\u0080\u0093 GNOME Wiki Archive This site has been retired. For up to date information, see handbook.gnome.org or gitlab.gnome.org . Projects/PyGObject [ Home ]\u00a0[ TitleIndex ]\u00a0[ WordIndex ] PyGObject \u00e2\u009e\u00a1 https://pygobject.readthedocs.io Old Wiki Pages /OldIndex /GBytesMarshalerTutorial /InitializerDeprecations /IntrospectionPorting /OverrideGuidelines /Profiling /PyGTKCompat /Threading /Analysis/Bug675581 /Analysis/ObjectReferenceCountingForVFuncsAndClosures /Analysis/PropertyObjectTransferAnalysis /Analysis/SignalTransferAnalysis 2024-10-23 11:37"
  },
  "https://docs.djangoproject.com/en/stable/intro/install/": {
    "url": "https://docs.djangoproject.com/en/stable/intro/install/",
    "content": "Quick install guide | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help el es fr id it ja ko pl pt-br zh-hans Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.2 dev Documentation version: 5.1 Quick install guide \u00b6 Before you can use Django, you\u2019ll need to get it installed. We have a complete installation guide that covers all the\npossibilities; this guide will guide you to a minimal installation that\u2019ll work\nwhile you walk through the introduction. Install Python \u00b6 Being a Python web framework, Django requires Python. See What Python version can I use with Django? for details. Python includes a lightweight\ndatabase called SQLite so you won\u2019t need to set up a database just yet. Get the latest version of Python at https://www.python.org/downloads/ or with\nyour operating system\u2019s package manager. You can verify that Python is installed by typing python from your shell;\nyou should see something like: Python 3.x.y [GCC 4.x] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Set up a database \u00b6 This step is only necessary if you\u2019d like to work with a \u201clarge\u201d database engine\nlike PostgreSQL, MariaDB, MySQL, or Oracle. To install such a database, consult\nthe database installation information . Install Django \u00b6 You\u2019ve got three options to install Django: Install an official release . This\nis the best approach for most users. Install a version of Django provided by your operating system\ndistribution . Install the latest development version . This option is for enthusiasts who want\nthe latest-and-greatest features and aren\u2019t afraid of running brand new code.\nYou might encounter new bugs in the development version, but reporting them\nhelps the development of Django. Also, releases of third-party packages are\nless likely to be compatible with the development version than with the\nlatest stable release. Always refer to the documentation that corresponds to the\nversion of Django you\u2019re using! If you do either of the first two steps, keep an eye out for parts of the\ndocumentation marked new in development version . That phrase flags\nfeatures that are only available in development versions of Django, and\nthey likely won\u2019t work with an official release. Verifying \u00b6 To verify that Django can be seen by Python, type python from your shell.\nThen at the Python prompt, try to import Django: >>> import django\n>>> print(django.get_version())\n5.1 You may have another version of Django installed. That\u2019s it! \u00b6 That\u2019s it \u2013 you can now move onto the tutorial . Previous page and next page Django at a glance Writing your first Django app, part 1 Back to Top Additional Information Support Django! xDevs.com donated to the Django Software Foundation to support Django development. Donate today! Contents Quick install guide Install Python Set up a database Install Django Verifying That\u2019s it! Browse Prev: Django at a glance Next: Writing your first Django app, part 1 Table of contents General Index Python Module Index You are here: Django 5.1 documentation Getting started Quick install guide Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (Django 5.1): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://twitter.com/djangoproject": {
    "url": "https://twitter.com/djangoproject",
    "content": ""
  },
  "https://www.djangoproject.com/weblog/": {
    "url": "https://www.djangoproject.com/weblog/",
    "content": "News & Events | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme News & Events Django 5.2 release candidate 1 released Posted by Sarah Boyce on March 19, 2025 Today Django 5.2 release candidate 1, a preview/testing package for the upcoming Django 5.2 release, is available. Read more DSF member of the month - Cory Zue Posted by Sarah Abderemane on March 14, 2025 Cory Zue is the DSF member of the month for March 2025. Find out more about one of Django's long-standing Django developer. Read more Accessibility and inclusivity at FOSDEM 2025 Posted by Thibaud Colas on March 13, 2025 For this year\u2019s FOSDEM conference, the Django accessibility team organized the \"Inclusive Web\" track Read more Happy International Women's Day! \ud83c\udf89 \ud83d\udc9c Posted by Bhuvnesh Sharma & Sarah Boyce on March 8, 2025 This International Women's Day, we're celebrating a historic milestone in Django\u2019s journey! \ud83d\ude80 Read more Django security releases issued: 5.1.7, 5.0.13 and 4.2.20 Posted by Sarah Boyce on March 6, 2025 Django 5.1.7, 5.0.13 and 4.2.20 fix one security issue. Read more Call for Proposals for DjangoCon Africa 2025 is now open! Posted by DjangoCon Africa 2025 organizers on Feb. 24, 2025 Propose your talk for this headline event, coming to Arusha, Tanzania in August 2025 Read more Django 5.2 beta 1 released Posted by Sarah Boyce on Feb. 19, 2025 Today Django 5.2 beta 1, a preview/testing package for the upcoming Django 5.2 release, is available. Read more DjangoCongress JP 2025 Announcement and Live Streaming! Posted by DjangoCongress JP team on Feb. 14, 2025 DjangoCongress JP 2025 will be broadcast live for free on YouTube, here is the schedule Read more DSF member of the month - Lily Foote Posted by Sarah Abderemane on Feb. 10, 2025 Lily Foote is the DSF member of the month for February 2025. Find out more about one of Django's long-standing contributors. Read more Django bugfix releases issued: 5.1.6, 5.0.12, and 4.2.19 Posted by Natalia Bidart on Feb. 5, 2025 Today the Django project issued bugfix releases for the 5.1, 5.0, and 4.2 release series. Read more Page 1 of 77 Next Back to Top Additional Information Support Django! Berkeley Heights Physical Therapy donated to the Django Software Foundation to support Django development. Donate today! Upcoming Events DjangoCon Europe 2025 April 23, 2025 |  Dublin, Ireland \ud83c\uddee\ud83c\uddea DjangoCon Africa 2025 Aug. 11, 2025 |  Arusha, Tanzania \ud83c\uddf9\ud83c\uddff DjangoDay India Sept. 7, 2025 |  Bangalore, India \ud83c\uddee\ud83c\uddf3 Want your event listed here? Archives 2025 March 2025 February 2025 January 2025 2024 December 2024 November 2024 October 2024 September 2024 August 2024 July 2024 June 2024 May 2024 April 2024 March 2024 February 2024 January 2024 2023 December 2023 November 2023 October 2023 September 2023 August 2023 July 2023 June 2023 May 2023 April 2023 March 2023 February 2023 January 2023 2022 December 2022 November 2022 October 2022 September 2022 August 2022 July 2022 June 2022 May 2022 April 2022 March 2022 February 2022 January 2022 2021 December 2021 November 2021 October 2021 September 2021 August 2021 July 2021 June 2021 May 2021 April 2021 March 2021 February 2021 January 2021 2020 December 2020 November 2020 October 2020 September 2020 August 2020 July 2020 June 2020 May 2020 April 2020 March 2020 February 2020 January 2020 2019 December 2019 November 2019 October 2019 September 2019 August 2019 July 2019 June 2019 May 2019 April 2019 March 2019 February 2019 January 2019 2018 December 2018 November 2018 October 2018 August 2018 July 2018 June 2018 May 2018 April 2018 March 2018 February 2018 January 2018 2017 December 2017 November 2017 October 2017 September 2017 August 2017 July 2017 June 2017 May 2017 April 2017 March 2017 February 2017 January 2017 2016 December 2016 November 2016 October 2016 September 2016 August 2016 July 2016 June 2016 May 2016 April 2016 March 2016 February 2016 January 2016 2015 December 2015 November 2015 October 2015 September 2015 August 2015 July 2015 June 2015 May 2015 April 2015 March 2015 February 2015 January 2015 2014 December 2014 November 2014 October 2014 September 2014 August 2014 July 2014 June 2014 May 2014 April 2014 March 2014 February 2014 January 2014 2013 December 2013 November 2013 October 2013 September 2013 August 2013 July 2013 June 2013 May 2013 April 2013 March 2013 February 2013 January 2013 2012 December 2012 November 2012 October 2012 September 2012 August 2012 July 2012 June 2012 May 2012 April 2012 March 2012 February 2012 January 2012 2011 December 2011 November 2011 September 2011 August 2011 June 2011 April 2011 March 2011 February 2011 January 2011 2010 December 2010 November 2010 October 2010 September 2010 May 2010 April 2010 March 2010 February 2010 January 2010 2009 December 2009 October 2009 August 2009 July 2009 May 2009 March 2009 February 2009 2008 November 2008 October 2008 September 2008 August 2008 July 2008 June 2008 May 2008 April 2008 January 2008 2007 December 2007 November 2007 October 2007 September 2007 August 2007 July 2007 June 2007 May 2007 April 2007 March 2007 February 2007 January 2007 2006 December 2006 November 2006 October 2006 September 2006 August 2006 July 2006 June 2006 May 2006 April 2006 March 2006 February 2006 January 2006 2005 December 2005 November 2005 October 2005 September 2005 August 2005 July 2005 RSS Feeds Latest news entries Recent code changes Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/foundation/individual-members/": {
    "url": "https://www.djangoproject.com/foundation/individual-members/",
    "content": "Django Software Foundation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Django Software Foundation Individual members Individual Members are appointed by the DSF in recognition of their contribution to the DSF's mission of advancing and promoting Django, protecting the framework's long-term viability, and advancing the state of the art in web development. Contribution to the DSF's mission takes many forms. Here are some non-exhaustive examples of the categories of work that might qualify: Contributing code, documentation, or tests to Django or to major third-party packages in the Django ecosystem. Reviewing pull requests or triaging tickets on Django or a third-party app. Creating learning resources (blogs, videos, etc.) for people to learn Django. Contributing to discussions in community areas such as the Django Forum or Discord . Being part of the organizing team for a Django community event. Serving on a DSF Working Group . For more information about membership, see the DSF membership FAQ . If you would like to apply for Individual Membership, please fill out this form . If you are unsure if you meet the criteria, but you would like to be a member, please apply anyway! You can also nominate others using the same form if you know someone who should be considered. As a member of the DSF, you will be recognized for your contributions to the community. Your name will appear below and you'll be added to the various DSF Members communication channels (mailing list, forum, Discord). You will also be eligible to vote for the DSF Board and Steering Council. The following are Individual Members of the Django Software Foundation. Aaron Basset Abigail Afi Gbadago Abigail Dogbe Adam Fast Adam Hill Adam Johnson Adam Zapletal Adrian Holovaty Adrienne Franke Adrienne Lowe Adum Abraham Aisha Bello Akash Kumar Sen Alasdair Nicol Alberto Fernandez Valiente Alexander Lazarevi\u0107 Alex Gaynor Alex G\u00f3mez Alex Hill Alison Mukoma Anders Einar Hilden Andrea Gonzalez Andrew Aikman Andrew Godwin Andrew Graham-Yooll Andrew Pinkham Andy Chosak Andy McKay Andy Miller Ania Warzecha Anna Makarudze Anna Ossowski Anssi K\u00e4\u00e4ri\u00e4inen Anthony I. Joseph Ariane Djeupang Arun Ravindran Asheesh Laroia Asif Saif Uddin Audrey Roy Greenfeld Aymeric Augustin Baptiste Mispelon Barbara Shaurette Becky Smith Ben Cardy Benjamin Balder Bach Benjamin \"Zags\" Zagorsky Ben LB Johnston Berker Peksag Bhuvnesh Sharma Blessing Chiwaura Bojan Mihela\u010d Briana Morgan Brian Kohan Brian Rosner Bruno Alla Bryan Veloso Cagil Ulusahin Sonmez Camilo Nova Carl Meyer Carlton Gibson Carol Ganz Catherine Holmes CatherineRose Barretto Chaim Kirby Charlie Denton Che Neba Manka'a Chiara Corrado Chris Achinga Chris Adams Chris Beaven Chris Jerdonek Christoph B\u00fclter Claude Paroz Cleopatra Douglas Clifford Gama Coen van der Kamp Collin Anderson Cory Zue Craig Bruce Csirmaz Bendeg\u00faz Curtis Maloney Cynthia Kiser Damilola Oladele Dan Braghi\u0219 Daniele Procida Daniel Lindsley Daniel Moran Daniel Roy Greenfeld Daniel Wiesmann Dan Ryan David Sanders David Seddon David Smith David Vaz David Winterbottom David Wobrock Dawn Wages Dejon Fah Jo\u00ebl Xavier Derrick Kearney Derrick Kearney Donald Stufft Doreen Wanyama Dorottya Czap\u00e1ri Drew Winstel Edmond Makolle Ed Rivas Elena Williams Eliana Rosselli Elvis Camilo Emil B. Kjer Emily Karungi Emily Morehouse Emmanuel Evance Emmanuelle Delescolle \u00c9ric Araujo Eric Holscher Eric Matthes Erin Mullaney Ester Beltrami Eyitemi Egbejule Ezra Yendau Fabian Braun Ferdinand Wermund Filipe La\u00edns Fiorella De luca Flavio Curella Florian Apolloner Frank Wiles Gabriel Hurley Gabriel Trouv\u00e9 Gajendra Deshpande Gary Wilson Geoffrey Sechter Gloria Kemirembe Glory Agatevure Hana Burtin Hannes Ljungberg Hasan Ramezani Hawawou Oumarou Heather Luna Helen Bire Helen Sherwood-Taylor Helen William Henrique Bastos Hiroki Kiyohara Hisham Mahmood Honza Kr\u00e1l Hope Adoli Humphrey Butau Iacopo Spalletti Ibrahim Diop Idai Sosima Idan Gazit Irene Nandutu Jack Linke Jacob Kaplan-Moss Jacob Rief Jacob Walls Jacqueline Mushi Jake Howard James Bennett James Tauber Jani Tiainen Jannis Leidel Jason Judkins Jay Miller Jean-Michel Armand Jeff Triplett Jeremy Dunck Jeremy Low Jessica Deaton Jessica Upani Joachim Jablon Joey Daniel Darko Johanan Oppong Amoateng John Beimler John Marit Jonas Obrist Jon Banafato Jon Dufresne Jon Gould Jon Janzen Jon Levy Jordan Bae (\ubc30\ub450\uc2dd) Jorge Gimeno Jos\u00e9 Padilla Joseph Kocherhans Joseph Zammit Josh Schneier Josh Smeaton Josh Thomas Josue Balandrano Coronel Julia Elman Julia Grace Julien Phalip Julius Moshiro Julius Nana Acheampong Boakye Juma Baldeh Juna Salviati Jure \u010cuhalev Justin Bronn Kafui Alordo Kalob Taulien Karen Tracey Karl Sayle Kasia Kaminska Katherine Amao Katherine Michel Katia Lira K\u00e1tia Nakamura Katie McLauglin Kenneth Love Ken Whitesell Keryn Knight Kevin Howbrook Kevin Renskers Kevin Trainor Khairiya Mudrik Kojo Idrissa Kristian Glass Kudakwashe Siziva Lacey Williams Henschel Lajoie Batadiwa Lakshman Prasad Landon Jurgens Leandro de Souza Leila Verhaegen Leonardo Jiminez Leona So Leo Youmbi Lidya K Tilahun Lilian Lily Foote Lindsey Dragun Lisa Quatmann Loek van Gent Logan Kilpatrick Lo\u00efc Bistuer Lo\u00efc Teixeira Lorenzo Pe\u00f1a Louise Grandjonc Lucie Daeye Luke Plant Lukong Leinyuy Etiane Lupyana Mbembati Lynn Root Mads Jensen Mahmoud Nasser Manka Velda Manjong Mannie Young Marcelo Elizeche Land\u00f3 Marcelo Galigniana Marc Gibbons Marco Acierno Marc Tamlyn Mariatta Marijke Luttekes Mario Munoz Mariusz Felisiak Mark Smith Markus Holtermann Mark Walker Marlene Mhangami Marten Kenbeek Massoud Hamad Mathilda G. Grisenti Matthew Schinckel Matthias Kestenholz Matt Layman Matt McClanahan Matt Westcott Mayokun Adeoti Meagen Voss Mfon Eti-mfon Michael Clark Michael Herman Michael Manfre Michael Young Michal Petrucha Miguel Johnson Miguel Magalh\u00e3es Mike Edmunds Mikey Ariel M. Jackson Wilkinson Mohamed Ali Mohamed ElKalioby Monique Murphy Moshe Nahmias Nancy Hiza Narcisse Mbunzama Natalia Bidart Nathan Zeiger Ndongmo Christian Neema Mfuru Neeraj Kumar Ngala Olga Ncheh Ngazetungue Muheue Nicholle James Nick Pope Nicole Dominguez Nicole Dominguez Nikita Sobolev Nischal Lamichhane Noah Alorwu Noah Maina Norma Driske Ola Sendecka Ola Sitarska Oliver Andrich Omar Abou Mrad \u00d6yk\u00fc G\u00fcm\u00fcs Padraic Harley P\u00e4ivi Suomela Paolo Melchiorre Patrick Altman Patrick Arminio Patryk Bratkowski Paul Hallett Paul McMillan Peter Baumgartner Peter Grandstaff Peter Hull Philip James Pradyun Gedam Preston Holmes Preston Timmons Priya Pahwa Rachell Calhoun Raffaele Grieco Raffaella Suardini Raila Akur Ramiro Morales Raphael Michel Rebecca Conley Rebecca Kindschi Rebekah Post Remco Wendt Renato Oliveira Rene Fleschenberg Rich Jones Rob Hudson Ronald Maravanyika Ronny Vedrilla Russell Keith-Magee Ryan Cheley Ryan Hiebert S\u00e6var \u00d6fj\u00f6r\u00f0 Magn\u00fasson Sage Abdullah Sajan Adhikari Salim A Nuru Salvo Polizzi Sangeeta Jadoonanan Sanyam Khurana Saptak Sengupta Sara Gore Sarah Abderemane Sarah Boyce Sarah Braun Sasha Romijn Sayantika Banik Scott Cranfill Selcuk Ayguney Sergey Fedoseev Shabda Raaj Shafiya Adzhani Shai Berger Sheena O'Connell Shinya Okano Simon Charette Simon Meers Stacey Haysler Stephanie Goulet Steve Yonkeu Storm Heg Syed Muhammad Dawoud Sheraz Ali Takayuki Shimizukawa Tendai Marengereke Thecla James Theresa Seyram Agbenyegah Thibaud Colas Thibault Houdon Thierry Chappui Thomas Steen Rasmussen Tiberius Hefflin Tim Allen Tim Baxter Tim Graham Tim Kamanin Timo Zimmermann Tim Schilling Tobias Kunze Tobias McNulty Tom Carrick Tom Christie Tom Dyson Tomek Paczkowski Tom Forbes Tracy Osborn Trey Hunner Tushar Gupta Uffa Modey \u00dclgen Sar\u0131kavak Velda Kiara V\u00ed\u00f0ir Valberg Gu\u00f0mundsson Vincent Knight Vince Salvino Vinit Kumar Vuyisile Ndlovu Wilhelm Klopp Will Barton Will Vincent Xavier Ordoquy Yash Raj Yigit Guler Youngkwang Yang Yusuke Muraoka \u017dan Anderle Zara Siddique Former members The following are former Individual Members of the DSF. Kim Crayton Malcolm Tredinnick (deceased 17 March 2013) Back to Top Additional Information Support Django! Stavros Pieros donated to the Django Software Foundation to support Django development. Donate today! About the foundation FAQ Records Contact us Contributor license agreements Organizing a Django conference Latest DSF meeting minutes DSF Board monthly meeting, March 13, 2025 New and Ongoing business Confirmation for community Booth at PyCon US 2025 Contributor License Agreement or alternative Djangonaut Space session at PyCon Italia 2025 Proposed bylaws changes Read more DSF Board monthly meeting, February 13, 2025 New and Ongoing business Contributor License Agreement or alternative Django accessibility statement Django active developers sprints Executive Director update Online Community Working Group proposal Proposed bylaws changes Sarah Boyce requests access to add external members to Google Groups Space reserved for Django at PyCon Italia 2025 Vote on new Fellowship Working Group members Website Working Group proposal Read more More meeting minutes Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/fundraising/#in-kind-donors": {
    "url": "https://www.djangoproject.com/fundraising/#in-kind-donors",
    "content": "Support Django | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Support Django development by donating to the Django Software Foundation . Support the Django Software Foundation! 29% 28.8% funded $57,661.00 donated of US\u00a0$200,000.00 goal for 2025 Companies able to make a larger donation ($2,000+/year) are invited to apply to be Corporate Members here . Help us make it happen: Monthly donation Quarterly donation Yearly donation One-time donation US $25 US $50 US $100 US $250 US $500 US $750 US $1,000 US $1,250 US $2,500 Other amount US $ (integer only) Your logo will be visible below if you contribute at least US\u00a0$1,000.00. Other ways to give Official merchandise store - Buy official t-shirts, accessories, and more to support Django. Sponsor Django via GitHub Sponsors . Benevity Workplace Giving Program - If your employer participates, you can make donations to the DSF via payroll deduction. Why give to the Django Software Foundation? Our main focus is direct support of Django's developers. This means: Organizing and funding development sprints so that Django's developers can meet in person. Helping key developers attend these sprints and other community events by covering travel expenses to official Django events. Providing financial assistance to community development and outreach projects such as Django Girls . Providing financial assistance to individuals so they can attend major conferences and events. Funding the Django Fellowship program , which provides full-time staff to perform community management tasks in the Django community. Still curious? See our Frequently Asked Questions about donations. Django Fellowship Program The biggest expense of the DSF is the Django Fellowship program. It's a project where paid contractors are engaged to manage some of the administrative and community management tasks of the Django project to support rapid development of Django itself. The Django Fellowship program has a major positive impact on how Django is developed and maintained. The Django Fellows triage 10-15 new tickets each week and review and merge around fifteen non-trivial patches a week from the community. Release blocking and severe bugs aren't postponed indefinitely. Major releases happen according to an 8 month schedule and bug fix releases occur monthly. For more details, you can read retrospectives for the first three months of the program , 2015 , and 2016 . The Django Fellows are a resource to help review patches and contributions from the community, and the community loves that: From my point of view the fellowship pilot has been a huge success. The amount of tickets and patches worked on during the pilot is astounding. A very big thank you to the fellows as well as the Django Software Foundation for initiating the program, and let's hope the fundraising program is successful. Anssi K\u00e4\u00e4ri\u00e4inen, Django Core Developer If you use Django on a daily basis and care about the development of Django itself, you should donate today (may be tax deductible ). Only with your support can we make sure that the web framework you base your work on can grow to be even better in the coming years. Django Girls Outreach Supporting Django Girls workshops is a significant priority for the Django Software Foundation. Django Girls workshops are organized by volunteers and are provided as free events for women who want to learn to code. The workshop serves as an introduction to Python and Django, where attendees learn usable skills to build their first web app. Django Girls workshop attendees go on to organize their own workshops, lead in their community, and secure full-time jobs as developers. Read their stories in the \u201cYour Django Story\u201d series on the Django Girls blog . In 2015, the Django Software Foundation contributed $5,400 to eighteen Django Girls workshops around the world. Here's what some of the organizers had to say about the impact: Sponsorship from the DSF allowed us to have on-site child care for our Django Girls Portland workshop. We hosted 2 young children and an infant, and provided them with healthy snacks, games, sidewalk chalk, finger paint, and emoji stickers. Without our nanny, 3 of our attendees wouldn't have been able to come to the workshop. Finger paint photo is on the blog ! Lacey - Portland, Oregon, US The DSF supported Django Girls Poland four times this year and the impact was enormous! In Poland, diversity awareness is not a very common topic. When we approached different local companies about our workshops they usually didn't get what we were actually doing and why it is important. If not for the DSF, we probably would not have been able to hold our workshops at all. Our first workshops were the only until now workshops that were 100% female - female only coaches and female only attendees. Thanks to you, we were able to focus on gathering female mentors instead of searching for sponsors! Ania - Wroc\u0142aw, Poland Django Girls Seoul had 425 applicants from 11 different countries ages ranging from 16 to 50 years old. After acceptances, we had about 105 people to feed and caffeinate! Thanks to Django's sponsorship we could get all of our participants coffee for the day. It really made a huge difference because we all know how a cup of coffee can change the atmosphere and mood! We were so grateful to the sponsorship we received from abroad. We tried to get sponsorship from a lot of Korean companies but the same generosity doesn't translate well into a Korean Business culture, I guess. This made us even more thankful for our friends at the DSF! Rachell - Seoul, South Korea DSF Supporters Our donors make our work possible! We are incredibly grateful for the financial support from the following individuals and organizations in our community. Platinum Corporate Members ($30,000+) Sentry JetBrains Gold Corporate Members ($12,500+) PCPartPicker DEFNA BlockBee ohne-makler Silver Corporate Members ($5,000+) Foxley Talent Galeax JBS Dev Jonas und der Wolf Lincoln Loop pretix REVSYS Zapier Caktus Group Bronze Corporate Members ($2,000+) HackSoft Axim Collaborative Boomerang CHARTWELL Resource Group Ltd. Dedomainia LTD Iterativ.ch Maykin NEPHILA Personalkollen Software-Design Torchbox Healthchecks.io In-kind donors These donors help with significant non-cash contributions. Andrew Francis provided the badges for our donors. Sentry provides error monitoring for our infrastructure. Fastly provides the content delivery network for djangoproject.com. OSUOSL provides additional servers for our infrastructure. SysEleven provides additional servers for our infrastructure. Typefully provided the account for social media. Leaders ($1,000+) Leadership-level donors contribute $1,000 or more in a calendar year. Caktus Consulting Group, LLC Bloom Works Public Benefit Software Crafts SaaS Pegasus AspirEDU Feinheit AG Fusionbox ProxyMesh PythonAnywhere AdNabu Anexia Internetdienstleistungs GmbH IMS Kamer.nl Voys Heroes Our donor roll for all donations made in the last 365 days. GrowthPath Pty Ltd Thibaud Colas Arthur Pemberton Keith Bussell Philip James Price Benowitz Accident Injury Lawyers, LLP Williams M\u00e9ndez PyPhilly ChargebackStop Jeremy Carbaugh Miguel Vellasco Olivier Philippon Ryan Cheley Sean O'Connor Yaniv Mirel Mikkel Munch Mortensen Paul McLanahan Alex Komkov Florian Demmer Harry Percival Mehmet Caner Cakici Oscar Gillberg Arvio Ben Spaulding Daniel Hillier Erick Navarro Fran\u00e7ois Schiettecatte Jannis Leidel Jiaaro Mariusz Felisiak MattN Randy Taylor Sandbox Banking Thomas Skowron X-Net Services GmbH Speedy Software Dan Lewis Gautam Narula Agence Debord Agency Cybersecurity Backlink Bento Carlos Joel Find Boxes Greenwine Krystof Beuermann Martin Kos\u00edr Nikolaj Baer Simon Brulhart Tobias McNulty Adylzhan Khashtamov Alex Oladele Achilleion Aidas Bendoraitis Alex Evans bestforexbrokersuk.com Chris Adams Crockett Law Group Dataful.Tech Dylan Castillo Kryptex Max Malysh Michael Aschauer Portmoni RegCheck.de SecurityGladiators.com SPWG David McInnis American Disability Action Group Boone & Davis, Attorneys at Law Daniel Y. DeChant Law Faulkner Law Group, PLLC Florida Law Advisers, P.A. Ghandi Deeter Blackham Law Offices Giannis Terzopoulos Goldasich, Vick & Fulk Gus Anastopoulo Law Firm Hardball Law Hawkins Spizman Ihar Joshi Law Firm, PA Knudsen Law Latham & Martin Michael Gunzburg, P.C. Mickelsen Dalton LLC Robert E. Craven & Associates The Forsythe Law Firm, LLC The Matassini Law Firm, P.A True North Law, P.A. William Rambaum, P.A. William Wallshein P.A. Arnoux Sharma Standeford, LLC Ayson Law Firm Cheap VPS Fridrik Juliusson Hardball Law Kay Beudeker Patel Law, PC Rad Web Hosting The Law Offices of Elsa Ayoub, P.L.L.C. Windsor Hardwood International, Inc. Lambert Labs Back to Top What is the Django Software Foundation? Development of Django is supported by an independent foundation established as a 501(c)(3) non-profit. Like most open-source foundations, the goal of the Django Software Foundation is to promote, support, and advance the Django web framework. If you're interested in how the Django Software Foundation supports the Django web framework, we published a Summary of 2014. Who are the Django Fellows? There are currently two Django Fellows: Sarah Boyce (2024-present) - an active community member, co-creator of Djangonaut Space and a member of Django's review and triage team since 2023. Sarah began as a full-time Fellow in April 2024 . Natalia Bidart (2023-present) - a seasoned Django user with extensive experience in architecting, building, and maintaining scalable web services, as well as leading new feature design and development. Natalia began as a part-time Fellow in April 2023 . Former Django Fellows: Mariusz Felisiak (2019-2024) - a member of the Django team since 2017, focusing on the ORM and Oracle back-end, along with triaging tickets, reviewing pull requests, and backporting changes. He has contributed to more than a dozen open-source projects. Mariusz began as a full-time Fellow in April 2019. In 2024 Mariusz retired after five years of service. Carlton Gibson (2018-2023) - a longtime Django user, core contributor to Django REST Framework, maintainer of Django Filter and Django Crispy Forms, and a contributor to many other packages in the Django ecosystem. Carlton began as a part-time Fellow in January 2018. In 2023 Carlton retired after five years of service. Tim Graham (2014- 2019) - the inaugural Django Fellow, a member of the Django team since 2010, and a longtime major contributor and reviewer. In 2018 Tim transitioned to part-time and in 2019 retired after four years of service. Berker Peksa\u011f (2014) - a core developer on CPython and Gunicorn, Berker worked as Fellow during the 3 month pilot, supporting Tim part-time. Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/weblog/2025/mar/14/dsf-member-of-the-month-cory-zue/": {
    "url": "https://www.djangoproject.com/weblog/2025/mar/14/dsf-member-of-the-month-cory-zue/",
    "content": "DSF member of the month - Cory Zue | Weblog | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme News & Events DSF member of the month - Cory Zue Posted by Sarah Abderemane on March 14, 2025 For March 2025, we welcome Cory Zue ( @coryzue.com ) as our DSF member of the month! \u2b50 Cory Zue has been Django developer for many years. He is currently a member of the DSF Social Media Working Group and he has been a DSF member since October 2022. You can learn more about Cory by checking out his website or visiting Cory's GitHub Profile . Let\u2019s spend some time getting to know Cory better! Can you tell us a little about yourself (hobbies, education, etc) I'm a programmer-turned-manager-turned-entrepreneur and currently run a\nportfolio of businesses on my own (using Django of course!). I grew up in Massachusetts and studied Computer Science at MIT where I\nmet the founders of Dimagi, where I ended up as CTO for 10 years before\nstarting my own businesses. In 2016, I moved to Cape Town, South Africa\nfor a \"temporary\" relocation, and have been here ever since. These days\nmy main hobbies include surfing, trail running, and exploring nature\nwith my wife and two boys. How did you start using Django? My first major Django project was working on an SMS-based system that\nhelped with the distribution of millions of\nbednets in Nigeria. It was built on top of a Django-based platform called\nRapidSMS that was initially developed by UNICEF. After that I worked on\nseveral other RapidSMS systems before eventually leading Dimagi's CommCare server team.\nCommCare eventually became -- to my knowledge -- the largest open source\nDjango codebase in\nterms of contributions/commits. What other framework do you know and if there is anything you would like to have in Django if you had magical powers? I still love Django and use it for most projects that need a backend.\nThat said, I find Django's \"hands off\" approach to modern front end\ndevelopment to be a big barrier for people who aren't already familiar\nwith the framework. If I had magical powers I would convince the Django community that it is\nworth providing some out-of-the-box support for modern front end tooling\nlike TailwindCSS or a JavaScript bundler. I'd also try to get official\n\"starter projects\" built into the framework that show how you can use\nDjango with some of the more popular front end options like React and\nHTMX. What projects are you working on now? My main project right now is SaaS\nPegasus , which is a Django\ncodebase creator that helps you spin up new projects more efficiently by\nbundling in even more batteries than Django itself. This includes\nthings like configuring auth, front end, and deployment, but also has\nsome more powerful features like multi-tenancy and billing baked in. One of the great things about running Pegasus is that I can justify\nbuilding new Django apps as dogfooding the product. So I always have\nother Django projects I'm working on. Right now the biggest one is a RAG\nchat-with-your-data LLM project called Scriv.ai . Within the Django community my main contributions are in the form of\nwriting in-depth guides to using\nDjango , as well as\npitching in on the Social Media working group to help grow Django's\naudience. Which Django libraries are your favorite (core or 3rd party)? It's hard to go with anything other than the ORM (and migrations\nframework), which I still feel is Django's greatest and most important\nfeature. It just fits my brain much better than SQLAlchemy or other\noptions I've used. One lesser-known library I'll shout out that I have been enjoying lately\nis django-cotton , which\nprovides a nice little layer of syntactic sugar and tooling that makes\nworking with components in Django templates much nicer. What are the top three things in Django that you like? The ORM + migrations. The community. That nearly every backend use case I have already has a feature\n    that's been built to accommodate it (e.g. middleware, messages,\n    i18n, etc.). I feel like the modern JavaScript frameworks I've used\n    are way behind on this front. What would you recommend to someone who wants to start out as an entrepreneur like you? I have an entire talk/article about\nthis ! But if I were to emphasize the most important part that worked for me,\nit was creating enough space in my life for deep, uninterrupted work and\nstructuring it in a way that I never ran out of money or energy while I\nwas trying (by working part time while I was getting started). In\ngeneral, the path to success usually takes a long time, so giving\nyourself plenty of time is really important. The tactics you can figure\nout as you go, but the space and time to do it is the most important\nthing to have in place. Your main goal is not to quit. Is there anything else you'd like to say? Thank you for including me in this series! Thank you for doing the interview, Cory! Back to Top Additional Information Support Django! Phillip Stromberg donated to the Django Software Foundation to support Django development. Donate today! Upcoming Events DjangoCon Europe 2025 April 23, 2025 |  Dublin, Ireland \ud83c\uddee\ud83c\uddea DjangoCon Africa 2025 Aug. 11, 2025 |  Arusha, Tanzania \ud83c\uddf9\ud83c\uddff DjangoDay India Sept. 7, 2025 |  Bangalore, India \ud83c\uddee\ud83c\uddf3 Want your event listed here? Archives 2025 March 2025 February 2025 January 2025 2024 December 2024 November 2024 October 2024 September 2024 August 2024 July 2024 June 2024 May 2024 April 2024 March 2024 February 2024 January 2024 2023 December 2023 November 2023 October 2023 September 2023 August 2023 July 2023 June 2023 May 2023 April 2023 March 2023 February 2023 January 2023 2022 December 2022 November 2022 October 2022 September 2022 August 2022 July 2022 June 2022 May 2022 April 2022 March 2022 February 2022 January 2022 2021 December 2021 November 2021 October 2021 September 2021 August 2021 July 2021 June 2021 May 2021 April 2021 March 2021 February 2021 January 2021 2020 December 2020 November 2020 October 2020 September 2020 August 2020 July 2020 June 2020 May 2020 April 2020 March 2020 February 2020 January 2020 2019 December 2019 November 2019 October 2019 September 2019 August 2019 July 2019 June 2019 May 2019 April 2019 March 2019 February 2019 January 2019 2018 December 2018 November 2018 October 2018 August 2018 July 2018 June 2018 May 2018 April 2018 March 2018 February 2018 January 2018 2017 December 2017 November 2017 October 2017 September 2017 August 2017 July 2017 June 2017 May 2017 April 2017 March 2017 February 2017 January 2017 2016 December 2016 November 2016 October 2016 September 2016 August 2016 July 2016 June 2016 May 2016 April 2016 March 2016 February 2016 January 2016 2015 December 2015 November 2015 October 2015 September 2015 August 2015 July 2015 June 2015 May 2015 April 2015 March 2015 February 2015 January 2015 2014 December 2014 November 2014 October 2014 September 2014 August 2014 July 2014 June 2014 May 2014 April 2014 March 2014 February 2014 January 2014 2013 December 2013 November 2013 October 2013 September 2013 August 2013 July 2013 June 2013 May 2013 April 2013 March 2013 February 2013 January 2013 2012 December 2012 November 2012 October 2012 September 2012 August 2012 July 2012 June 2012 May 2012 April 2012 March 2012 February 2012 January 2012 2011 December 2011 November 2011 September 2011 August 2011 June 2011 April 2011 March 2011 February 2011 January 2011 2010 December 2010 November 2010 October 2010 September 2010 May 2010 April 2010 March 2010 February 2010 January 2010 2009 December 2009 October 2009 August 2009 July 2009 May 2009 March 2009 February 2009 2008 November 2008 October 2008 September 2008 August 2008 July 2008 June 2008 May 2008 April 2008 January 2008 2007 December 2007 November 2007 October 2007 September 2007 August 2007 July 2007 June 2007 May 2007 April 2007 March 2007 February 2007 January 2007 2006 December 2006 November 2006 October 2006 September 2006 August 2006 July 2006 June 2006 May 2006 April 2006 March 2006 February 2006 January 2006 2005 December 2005 November 2005 October 2005 September 2005 August 2005 July 2005 RSS Feeds Latest news entries Recent code changes Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/community/": {
    "url": "https://www.djangoproject.com/community/",
    "content": "Django Community | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Building the Django Community for 19\u00a0years, 8\u00a0months .\n    \n    Come join us! Community Get Help Forum - Post a question Discord - Chat with us Get Involved Report an issue Contribute to Django Local Django Community Django RSS feeds Community blog posts Django News - 20 PRs Merged into Django Core This Week Alone!  - Mar 28th 2025 March 28, 2025, 10 a.m. by Django News Cakti Share Their Favorite Tools For Streamlined Workflows March 27, 2025, 8:09 p.m. by Caktus Consulting Group Upgrade Smarter, Not Harder: Python Tools for Code Modernization March 27, 2025, 10 a.m. by Caktus Consulting Group How to report a security issue in an open source project March 27, 2025, midnight by Jacob Kaplan-Moss Python Leiden (NL) meetup: serialisation in Python - John Labelle March 26, 2025, 11 p.m. by Reinout van Rees' weblog View more or Add your feed Django jobs Web Developer March 21, 2025, 3:54 p.m. by Django News Jobs Software Developer at Bucketlist Rewards March 20, 2025, 1:36 a.m. by Built with Django Jobs Senior Software Engineer at Careignition March 16, 2025, 4:02 a.m. by Built with Django Jobs Senior Software Engineer at Seek AI March 14, 2025, 3:55 a.m. by Built with Django Jobs Software Developer (gn) Python \u2013 Hybrid or Remote March 7, 2025, 10:23 a.m. by Djangojobs.Net View more or Add your feed Django Q&A UnicodeDecodeError: 'utf-8' codec can't decode byte 0xf3 in Django connection with PostgreSQL in Docker April 1, 2025, 8:24 p.m. by Stack Overflow Unable to Upload Images in Django Project on AWS S3, despite configuring ImageField and storages April 1, 2025, 7:22 p.m. by Stack Overflow I Have been studying Basics of React, React-native and Django for a long time but I still don't know how to start my project April 1, 2025, 6:41 p.m. by Stack Overflow Issue with Django User Registration: \"An error occurred. Please try again.\" April 1, 2025, 12:26 p.m. by Stack Overflow Django with PyODBC and Oracle 8i: Temporary Table Issues After a Day April 1, 2025, 7:51 a.m. by Stack Overflow View more or Add your feed Django links Create a Netflix Clone with Django and Tailwind CSS May 29, 2023, 9:19 p.m. by Pinboard rapidsms/rapidsms: Build SMS applications with Python May 28, 2023, 4:30 p.m. by Pinboard https://adamj.eu/tech/2022/06/20/how-to-find-and-stop-running-queries-on-postgresql/ May 28, 2023, 3:32 p.m. by Pinboard https://adamj.eu/tech/2022/10/21/migrate-postgresql-ids-serial-identity-django-4.1/ May 28, 2023, 3:05 p.m. by Pinboard GitHub - maxpoletaev/django-micro: Django as a microframework May 26, 2023, 1:01 p.m. by Pinboard View more or Add your feed New/updated Django packages Django March 29, 2025, 5:15 a.m. by Django Packages contest March 28, 2025, 10:26 a.m. by Django Packages django_pyoidc March 27, 2025, 9:21 a.m. by Django Packages django-block-fragments March 13, 2025, 10:45 a.m. by Django Packages django-log-lens March 10, 2025, 8:50 a.m. by Django Packages View more or Add your feed Django Software Foundation Django 5.2 release candidate 1 released March 19, 2025, 7:49 a.m. by Django official blog DSF member of the month - Cory Zue March 14, 2025, 11:53 a.m. by Django official blog Accessibility and inclusivity at FOSDEM 2025 March 13, 2025, 2 p.m. by Django official blog DSF Board monthly meeting, March 13, 2025 March 13, 2025, 5 a.m. by DSF meeting minutes Happy International Women&#x27;s Day! \ud83c\udf89 \ud83d\udc9c March 8, 2025, 9:32 a.m. by Django official blog View more Back to Top Additional Information Support Django! PicklesBall donated to the Django Software Foundation to support Django development. Donate today! More Help Frequently Asked Questions The FAQ answers many common questions r/Django Subreddit News and links on Reddit StackOverflow Search community answers #django IRC Channel Chat with other Django users like it's 1999 Dive In Ticket System View and update bug reports Development Dashboard Statistics about Django development django-updates Mailing List Get updated for each code and ticket change More Links Django Packages Find third-party packages to supercharge your project Django-powered Sites Add your site to the list Django Badges Show your support (or wish longingly) Django Logos Download official logos Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/rss/weblog/": {
    "url": "https://www.djangoproject.com/rss/weblog/",
    "content": "The Django weblog https://www.djangoproject.com/weblog/ Latest news about Django, the Python web framework. en Wed, 19 Mar 2025 02:49:49 -0500 Django 5.2 release candidate 1 released https://www.djangoproject.com/weblog/2025/mar/19/django-52-rc1/ <p>Django 5.2 release candidate 1 is the final opportunity for you to\ntry out <a class=\"reference external\" href=\"https://docs.djangoproject.com/en/dev/releases/5.2/\">a composite of new features</a> before Django 5.2 is released.</p>\n<p>The release candidate stage marks the string freeze and the call for\ntranslators <a class=\"reference external\" href=\"https://docs.djangoproject.com/en/dev/internals/contributing/localizing/#translations\">to submit translations</a>.\nProvided no major bugs are discovered that can't be solved in the next two\nweeks, Django 5.2 will be released on or around\nApril 2. Any  delays will be communicated\non the <a class=\"reference external\" href=\"https://forum.djangoproject.com/t/django-5-2-release-status-and-next-steps/37131\">on the Django forum</a>.</p>\n<p>Please use this opportunity to help find and fix bugs (which should be reported\nto <a class=\"reference external\" href=\"https://code.djangoproject.com/newticket\">the issue tracker</a>), you can\ngrab a copy of the release candidate package from\n<a class=\"reference external\" href=\"https://www.djangoproject.com/download/\">our downloads page</a> or on PyPI.</p>\n<p>The PGP key ID used for this release is Sarah Boyce: <a class=\"reference external\" href=\"https://github.com/sarahboyce.gpg\">3955B19851EA96EF</a></p> Sarah Boyce Wed, 19 Mar 2025 02:49:49 -0500 https://www.djangoproject.com/weblog/2025/mar/19/django-52-rc1/ DSF member of the month - Cory Zue https://www.djangoproject.com/weblog/2025/mar/14/dsf-member-of-the-month-cory-zue/ <p>For March 2025, we welcome Cory Zue (<a href=\"https://bsky.app/profile/coryzue.com\">@coryzue.com</a>) as our DSF member of the month! \u2b50</p>\n<p>Cory Zue has been Django developer for many years. He is currently a member of the <a href=\"https://github.com/django/dsf-working-groups/blob/main/active/social-media.md\">DSF Social Media Working Group</a> and he has been a DSF member since October 2022. <br>\nYou can learn more about Cory by checking out <a href=\"https://www.coryzue.com/\">his website</a> or visiting <a href=\"https://github.com/czue\">Cory's GitHub Profile</a>.</p>\n<p>Let\u2019s spend some time getting to know Cory better!</p>\n<h4 id=\"s-can-you-tell-us-a-little-about-yourself-hobbies-education-etc\">Can you tell us a little about yourself (hobbies, education, etc)</h4>\n<p>I'm a programmer-turned-manager-turned-entrepreneur and currently run a\nportfolio of businesses on my own (using Django of course!).</p>\n<p>I grew up in Massachusetts and studied Computer Science at MIT where I\nmet the founders of Dimagi, where I ended up as CTO for 10 years before\nstarting my own businesses. In 2016, I moved to Cape Town, South Africa\nfor a \"temporary\" relocation, and have been here ever since. These days\nmy main hobbies include surfing, trail running, and exploring nature\nwith my wife and two boys.</p>\n<h4 id=\"s-how-did-you-start-using-django\">How did you start using Django?</h4>\n<p>My first major Django project was working on an SMS-based system that\nhelped <a href=\"https://www.rapidsms.org/about/case-studies/nigeria-monitoring-supplies-in-a-campaign-setting/\">with the distribution of millions of\nbednets</a>\nin Nigeria. It was built on top of a Django-based platform called\nRapidSMS that was initially developed by UNICEF. After that I worked on\nseveral other RapidSMS systems before eventually leading Dimagi's\n<a href=\"https://dimagi.com/commcare/\">CommCare</a> server team.\nCommCare eventually became -- to my knowledge -- the <a href=\"https://github.com/dimagi/commcare-hq/\">largest open source\nDjango codebase</a> in\nterms of contributions/commits.</p>\n<h4 id=\"s-what-other-framework-do-you-know-and-if-there-is-anything-you-would-like-to-have-in-django-if-you-had-magical-powers\">What other framework do you know and if there is anything you would like to have in Django if you had magical powers?</h4>\n<p>I still love Django and use it for most projects that need a backend.\nThat said, I find Django's \"hands off\" approach to modern front end\ndevelopment to be a big barrier for people who aren't already familiar\nwith the framework.</p>\n<p>If I had magical powers I would convince the Django community that it is\nworth providing some out-of-the-box support for modern front end tooling\nlike TailwindCSS or a JavaScript bundler. I'd also try to get official\n\"starter projects\" built into the framework that show how you can use\nDjango with some of the more popular front end options like React and\nHTMX.</p>\n<h4 id=\"s-what-projects-are-you-working-on-now\">What projects are you working on now?</h4>\n<p>My main project right now is <a href=\"https://www.saaspegasus.com/\">SaaS\nPegasus</a>, which is a Django\ncodebase creator that helps you spin up new projects more efficiently by\nbundling in <em>even more</em> batteries than Django itself. This includes\nthings like configuring auth, front end, and deployment, but also has\nsome more powerful features like multi-tenancy and billing baked in.</p>\n<p>One of the great things about running Pegasus is that I can justify\nbuilding new Django apps as dogfooding the product. So I always have\nother Django projects I'm working on. Right now the biggest one is a RAG\nchat-with-your-data LLM project called\n<a href=\"https://scriv.ai/\">Scriv.ai</a>.</p>\n<p>Within the Django community my main contributions are in the form of\nwriting <a href=\"https://www.saaspegasus.com/guides/\">in-depth guides to using\nDjango</a>, as well as\npitching in on the Social Media working group to help grow Django's\naudience.</p>\n<h4 id=\"s-which-django-libraries-are-your-favorite-core-or-3rd-party\">Which Django libraries are your favorite (core or 3rd party)?</h4>\n<p>It's hard to go with anything other than the ORM (and migrations\nframework), which I still feel is Django's greatest and most important\nfeature. It just fits my brain much better than SQLAlchemy or other\noptions I've used.</p>\n<p>One lesser-known library I'll shout out that I have been enjoying lately\nis <a href=\"https://django-cotton.com/\">django-cotton</a>, which\nprovides a nice little layer of syntactic sugar and tooling that makes\nworking with components in Django templates much nicer.</p>\n<h4 id=\"s-what-are-the-top-three-things-in-django-that-you-like\">What are the top three things in Django that you like?</h4>\n<ol>\n<li>\n<p>The ORM + migrations.</p>\n</li>\n<li>\n<p>The community.</p>\n</li>\n<li>\n<p>That nearly every backend use case I have already has a feature\n    that's been built to accommodate it (e.g. middleware, messages,\n    i18n, etc.). I feel like the modern JavaScript frameworks I've used\n    are way behind on this front.</p>\n</li>\n</ol>\n<h4 id=\"s-what-would-you-recommend-to-someone-who-wants-to-start-out-as-an-entrepreneur-like-you\">What would you recommend to someone who wants to start out as an entrepreneur like you?</h4>\n<p>I have an <a href=\"https://www.coryzue.com/writing/solopreneur/\">entire talk/article about\nthis</a>!</p>\n<p>But if I were to emphasize the most important part that worked for me,\nit was creating enough space in my life for deep, uninterrupted work and\nstructuring it in a way that I never ran out of money or energy while I\nwas trying (by working part time while I was getting started). In\ngeneral, the path to success usually takes a long time, so giving\nyourself plenty of time is really important. The tactics you can figure\nout as you go, but the space and time to do it is the most important\nthing to have in place. Your main goal is not to quit.</p>\n<h4 id=\"s-is-there-anything-else-youd-like-to-say\">Is there anything else you'd like to say?</h4>\n<p>Thank you for including me in this series!</p>\n<hr>\n<p><strong>Thank you for doing the interview, Cory!</strong></p> Sarah Abderemane Fri, 14 Mar 2025 06:53:00 -0500 https://www.djangoproject.com/weblog/2025/mar/14/dsf-member-of-the-month-cory-zue/ Accessibility and inclusivity at FOSDEM 2025 https://www.djangoproject.com/weblog/2025/mar/13/accessibility-and-inclusivity-at-fosdem-2025/ <p><meta name=\"twitter:card\" content=\"summary_large_image\" />\n<meta name=\"twitter:image:alt\" content=\"Panorama of the room during a talk, taken from the back. It\u2019s a classroom with multiple rows of tables and seats. Some people are standing on the side. The speaker is in front of their slides at the front of the room.\" />\n<meta name=\"twitter:image\" content=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/inclusive-web-devroom-panorama.jpg\" />\n<meta property=\"og:image\" content=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/inclusive-web-devroom-panorama.jpg\" />\n<meta property=\"og:image:width\" content=\"1536\" />\n<meta property=\"og:image:height\" content=\"768\" /></p>\n<p>For this year\u2019s FOSDEM conference, our Django accessibility team organized the \"Inclusive Web\" track. Here\u2019s a recap of how it went!</p>\n<p>The idea for the <a href=\"https://fosdem.org/2025/schedule/track/inclusive-web/\">Inclusive Web devroom</a> started at FOSDEM 2024, where we discussed the importance of showcasing accessibility and inclusivity work in open source, in web development and beyond. The <a href=\"https://www.djangoproject.com/foundation/teams/#accessibility-team\">Django accessibility team</a> got to work on a FOSDEM 2025 proposal. Lo and behold, it got accepted, and here we are with a room full of people interested in those topics, and a great lineup of speakers!</p>\n<p><img style=\"max-width: 100%; height: auto;\" src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/inclusive-web-devroom-panorama.jpg\" width=\"1536\" height=\"768\" alt=\"Panorama of the room during a talk, taken from the back. It\u2019s a classroom with multiple rows of tables and seats. Some people are standing on the side. The speaker is in front of their slides at the front of the room.\"></p>\n<p>The room was full for most of the day with about 70 attendees, with the conference also providing a livestream for remote participants. We had a great mix of talks, covering a lot of the aspects of the Inclusive Web that we wanted to showcase.</p>\n<h3 id=\"s-the-talks\">The talks</h3>\n<h4 id=\"s-top-accessibility-errors-found-in-open-source-through-automated-testing\"><a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-6075-top-accessibility-errors-found-in-open-source-through-automated-testing/\">Top Accessibility Errors Found in Open Source Through Automated Testing</a></h4>\n<div style=\"display: flex; flex-wrap: wrap; column-gap: clamp(1rem, 10vw, 4rem);\">\n\n<div style=\"flex: 1; min-width: min(400px, 95vw);\">\n\n<p>In the first talk of the day, Raashi Saxena shares insights on the most common accessibility errors in open-source projects, based on manual and automated testing. She highlights real-world case studies to help developers improve accessibility in their projects \u2013 and warn against the legal risks of poor accessibility!</p>\n\n</div>\n\n<figure style=\"flex: 0 0 256px;\">\n<img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/speakers/raashi-on-stage-fosdem-2025-60.webp\" width=\"256\" height=\"256\" alt=\"\">\n<figcaption><strong>Raashi getting the devroom started</strong></figcaption>\n</figure>\n\n</div>\n\n<h4 id=\"s-solving-the-worlds-localization-problems\"><a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5561-solving-the-world-s-localization-problems/\">Solving the world\u2019s (localization) problems</a></h4>\n<div style=\"display: flex; flex-wrap: wrap; column-gap: clamp(1rem, 10vw, 4rem);\">\n\n<div style=\"flex: 1; min-width: min(400px, 95vw);\">\n\n<p>Eemeli Aro and Ujjwal Sharma introduce <a href=\"https://messageformat.dev/\">MessageFormat 2</a>, a new standard to address long-standing localization challenges. They discuss its potential applications and the tools being built around it. This standard is very promising for Django developers working on multilingual applications to provide better translations for users, and better capabilities for translators.</p>\n\n</div>\n\n<figure style=\"flex: 0 0 256px;\">\n<img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/speakers/ujjwal-and-eemeli-on-stage-fosdem-2025-60.webp\" width=\"256\" height=\"256\" alt=\"\">\n<figcaption><strong>Eemeli and Ujjwal introduce themselves</strong></figcaption>\n</figure>\n\n</div>\n\n<h4 id=\"s-alternative-text-for-images-how-bad-are-our-alt-text-anyway\"><a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-4709-alternative-text-for-images-how-bad-are-our-alt-text-anyway-/\">Alternative Text for Images: How Bad Are Our Alt-Text Anyway?</a></h4>\n<div style=\"display: flex; flex-wrap: wrap; column-gap: clamp(1rem, 10vw, 4rem);\">\n\n<div style=\"flex: 1; min-width: min(400px, 95vw);\">\n\n<p>Mike Gifford explores the importance of alt text in web accessibility and how often it misses the mark. He demonstrates his <a href=\"https://github.com/CivicActions/site-evaluation-tools/blob/main/alt-text-scan.py.md\">alt text scan Python script</a> for auditing alt-text across websites. Alt text is a common issue on Django projects, and the AI generation showcased by Mike has the potential to move the needle.</p>\n\n</div>\n\n<figure style=\"flex: 0 0 256px;\">\n<img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/speakers/mike-on-stage-fosdem-2025-60.webp\" width=\"256\" height=\"256\" alt=\"\">\n<figcaption><strong>Mike shares his experiments</strong></figcaption>\n</figure>\n\n</div>\n\n<h4 id=\"s-secure-and-inclusive-webauthn-for-multi-factor-authentication\"><a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5777-secure-and-inclusive-webauthn-for-multi-factor-authentication/\">Secure and Inclusive: WebAuthn for (Multi-Factor) Authentication</a></h4>\n<div style=\"display: flex; flex-wrap: wrap; column-gap: clamp(1rem, 10vw, 4rem);\">\n\n<div style=\"flex: 1; min-width: min(400px, 95vw);\">\n\n<p>Storm Heg explains how WebAuthn (Passkeys) offers a secure and user-friendly alternative to traditional authentication methods. This talk covers how it works, its accessibility benefits, and how Django developers can integrate it into their projects. Storm showcases his <a href=\"https://github.com/Stormbase/django-otp-webauthn\">django-otp-webauthn</a> package and other alternatives.</p>\n\n</div>\n\n<figure style=\"flex: 0 0 256px;\">\n<img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/speakers/storm-on-stage-fosdem-2025-60.webp\" width=\"256\" height=\"256\" alt=\"\">\n<figcaption><strong>Storm\u2019s whoami output</strong></figcaption>\n</figure>\n\n</div>\n\n<h4 id=\"s-how-do-we-work-out-the-environmental-savings-from-accessibility\"><a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5292-how-do-we-work-out-the-environmental-savings-from-accessibility-/\">How do we work out the environmental savings from accessibility?</a></h4>\n<div style=\"display: flex; flex-wrap: wrap; column-gap: clamp(1rem, 10vw, 4rem);\">\n\n<div style=\"flex: 1; min-width: min(400px, 95vw);\">\n\n<p>Chris Adams discusses how supporting older devices through accessible digital services can reduce e-waste. He explores research on hardware obsolescence, data-driven methods for measuring environmental impact, and policy changes in digital sustainability. This builds upon previous work by Chris <a href=\"https://archive.fosdem.org/2021/schedule/event/webperf_building_a_greener_web/\">showcasing the parallels between web accessibility and sustainability</a>.</p>\n\n</div>\n\n<figure style=\"flex: 0 0 256px;\">\n<img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/speakers/chris-on-stage-fosdem-2025-60.webp\" width=\"256\" height=\"256\" alt=\"\">\n<figcaption><strong>Chris with his cover slide</strong></figcaption>\n</figure>\n\n</div>\n\n<h4 id=\"s-growing-inclusive-communities-djangonaut-space-program\"><a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5237-growing-inclusive-communities-djangonaut-space-program/\">Growing inclusive communities: Djangonaut Space program</a></h4>\n<div style=\"display: flex; flex-wrap: wrap; column-gap: clamp(1rem, 10vw, 4rem);\">\n\n<div style=\"flex: 1; min-width: min(400px, 95vw);\">\n\n<p>Raffaella Suardini shares the success of the <a href=\"https://djangonaut.space/\">Djangonaut Space</a> mentorship program in fostering sustainable contributions and welcoming new contributors. She provides strategies for building inclusive tech communities, which are crucial to the success of open-source projects like Django \ud83d\udc9c.</p>\n\n</div>\n\n<figure style=\"flex: 0 0 256px;\">\n<img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/speakers/raffaella-on-stage-fosdem-2025-60.webp\" width=\"256\" height=\"256\" alt=\"\">\n<figcaption><strong>Raffaella taking questions</strong></figcaption>\n</figure>\n\n</div>\n\n<h4 id=\"s-multilingual-speech-technologies-that-understand-you\"><a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5948-multilingual-speech-technologies-that-understand-you/\">Multilingual Speech Technologies That Understand You</a></h4>\n<div style=\"display: flex; flex-wrap: wrap; column-gap: clamp(1rem, 10vw, 4rem);\">\n\n<div style=\"flex: 1; min-width: min(400px, 95vw);\">\n\n<p>Jessica Rose discusses how <a href=\"https://commonvoice.mozilla.org/en\">Common Voice</a>\u2019s <a href=\"https://github.com/common-voice/common-voice\">crowdsourced speech dataset</a> helps developers build speech technologies for underrepresented languages. She highlights the challenges of linguistic diversity in tech \u2013 which are very relevant for a project with such an international and multiligual user base as Django.</p>\n\n</div>\n\n<figure style=\"flex: 0 0 256px;\">\n<img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/speakers/jessica-on-stage-fosdem-2025-60.webp\" width=\"256\" height=\"256\" alt=\"\">\n<figcaption><strong>Jessica showcases project challenges</strong></figcaption>\n</figure>\n\n</div>\n\n<h4 id=\"s-atag-accessibility-audits-worth-your-while\"><a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5806-atag-accessibility-audits-worth-your-while/\">ATAG accessibility audits: worth your while</a></h4>\n<div style=\"display: flex; flex-wrap: wrap; column-gap: clamp(1rem, 10vw, 4rem);\">\n\n<div style=\"flex: 1; min-width: min(400px, 95vw);\">\n\n<p>Thibaud Colas introduces the Authoring Tool Accessibility Guidelines (ATAG) and explains why they are essential for content creation tools, like the Django admin. He shares highlights of where projects can learn a lot from ATAG, making this talk valuable for Django developers working with content publishing.</p>\n\n</div>\n\n<figure style=\"flex: 0 0 256px;\">\n<img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/speakers/thibaud-on-stage-fosdem-2025-60.webp\" width=\"256\" height=\"256\" alt=\"\">\n<figcaption><strong>Thibaud lists accessibility standards</strong></figcaption>\n</figure>\n\n</div>\n\n<h3 id=\"s-all-recordings\">All recordings</h3>\n<p>You can watch them all on the FOSDEM website:</p>\n<div style=\"display: grid; text-align: center; gap: 1rem; row-gap: 3vw; margin-top: 3vw; grid-template-columns: repeat(auto-fit, minmax(min-content, 320px));\">\n<a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-6075-top-accessibility-errors-found-in-open-source-through-automated-testing/\">\n    <figure>\n        <img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/thumbnails/top-accessibility-errors-found-in-open-source-through-automated-testing.webp\" width=\"256\" height=\"180\" alt=\"Raashi to the side of her slides, titled 'Accessibility', with examples of what accessibility means\">\n        <figcaption>Raashi Saxena - Top Accessibility Errors Found in Open Source Through Automated Testing | FOSDEM 2025</figcaption>\n    </figure>\n</a>\n<a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5561-solving-the-world-s-localization-problems/\">\n    <figure>\n        <img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/thumbnails/solving-the-world-s-localization-problems.webp\" width=\"256\" height=\"180\" alt=\"Eemeli and Ujjwal in front of Ujjwal\u2019s introduction slide, with audience members in the foreground\">\n        <figcaption>Eemeli Aro and\u00a0Ujjwal Sharm - Solving the world\u2019s (localization) problems | FOSDEM 2025</figcaption>\n    </figure>\n</a>\n<a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-4709-alternative-text-for-images-how-bad-are-our-alt-text-anyway-/\">\n    <figure>\n        <img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/thumbnails/alternative-text-for-images-how-bad-are-our-alt-text-anyway.webp\" width=\"256\" height=\"180\" alt=\"Mike to the right of his slides, titled 'Initial experiment with proprietary tools', with attendees in the foreground\">\n        <figcaption>Mike Gifford - Alternative Text for Images: How Bad Are Our Alt-Text Anyway? | FOSDEM 2025</figcaption>\n    </figure>\n</a>\n<a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5777-secure-and-inclusive-webauthn-for-multi-factor-authentication/\">\n    <figure>\n        <img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/thumbnails/secure-and-inclusive-webauthn-for-multi-factor-authentication.webp\" width=\"256\" height=\"180\" alt=\"Storm in front of his slides, with audience members in the foreground\">\n        <figcaption>Storm Heg - Secure and Inclusive: WebAuthn for (Multi-Factor) Authentication | FOSDEM 2025</figcaption>\n    </figure>\n</a>\n<a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5292-how-do-we-work-out-the-environmental-savings-from-accessibility-/\">\n    <figure>\n        <img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/thumbnails/how-do-we-work-out-the-environmental-savings-from-accessibility.webp\" width=\"256\" height=\"180\" alt=\"Chris is to the right of his slide, titled 'How do we work out the environmental savings from accessibility?'\">\n        <figcaption>Chris Adams - How do we work out the environmental savings from accessibility? | FOSDEM 2025</figcaption>\n    </figure>\n</a>\n<a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5237-growing-inclusive-communities-djangonaut-space-program/\">\n    <figure>\n        <img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/thumbnails/growing-inclusive-communities-djangonaut-space-program.webp\" width=\"256\" height=\"180\" alt=\"Raffaella in front of a slide titled 'Thank you'\">\n        <figcaption>Raffaella Suardini - Growing inclusive communities: Djangonaut Space program | FOSDEM 2025</figcaption>\n    </figure>\n</a>\n<a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5948-multilingual-speech-technologies-that-understand-you/\">\n    <figure>\n        <img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/thumbnails/multilingual-speech-technologies-that-understand-you.webp\" width=\"256\" height=\"180\" alt=\"Jessica in front of a slide titled 'Why are these problems?'\">\n        <figcaption>Jessica Rose - Multilingual Speech Technologies That Understand You | FOSDEM 2025</figcaption>\n    </figure>\n</a>\n<a href=\"https://fosdem.org/2025/schedule/event/fosdem-2025-5806-atag-accessibility-audits-worth-your-while/\">\n    <figure>\n        <img src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/thumbnails/atag-accessibility-audits-worth-your-while.webp\" width=\"256\" height=\"180\" alt=\"Thibaud in a pineapple hoodie in front of his slides\">\n        <figcaption>Thibaud Colas - ATAG accessibility audits: worth your while | FOSDEM 2025</figcaption>\n    </figure>\n</a>\n</div>\n\n<h3 id=\"s-see-you-in-2026\">See you in 2026</h3>\n<p>We had a blast running this devroom, and we\u2019re looking forward to doing it again in 2026 if we get the chance! Thank you to our speakers, devroom organizers (Saptak, Tom, Sarah, Thibaud, Eli), and helpers (Alex and Storm) for making this event a success! \ud83c\udf89</p>\n<figure>\n<img style=\"max-width: 100%; height: auto;\" src=\"https://thib.me/images/blog/accessibility-and-inclusivity-at-fosdem-2025/fosdem-2025-inclusive-web-organizers-helpers-speakers-collage.jpg\" width=\"512\" height=\"512\" alt=\"Collage of Inclusive Web devroom organizers, helpers, and speakers. With three separate pictures of people smiling, in different areas of the conference venue. Top: Raffaella, Sarah, Thibaud, Alex. Then Saptak, Storm, Sarah, Thibaud. Then at the bottom Storm, Thibaud, Sarah, Alex.\">\n<figcaption>Our 2025 devroom speakers, organizers, and helpers. Top left to right: Raffaella, Sarah, Thibaud, Alex, Saptak, Storm</figcaption>\n</figure> Thibaud Colas Thu, 13 Mar 2025 09:00:00 -0500 https://www.djangoproject.com/weblog/2025/mar/13/accessibility-and-inclusivity-at-fosdem-2025/ Happy International Women&#x27;s Day! \ud83c\udf89 \ud83d\udc9c https://www.djangoproject.com/weblog/2025/mar/08/happy-international-womens-day/ <p>This International Women's Day, we're celebrating a historic milestone in Django\u2019s journey! \ud83d\ude80</p>\n<p>For the first time ever, Django has women in every leadership position within the project:</p>\n<ul>\n<li>2 Django Steering Council members \ud83d\udc9c</li>\n<li>2 DSF Board members \ud83d\udc9c</li>\n<li>2 Django Fellows \ud83d\udc9c</li>\n</ul>\n<p>This moment is not just about numbers \u2014 it\u2019s about the impact of years of effort to create a more inclusive and welcoming Django community.</p>\n<p>A huge shoutout to <a href=\"https://djangogirls.org/en/\">Django Girls</a> for introducing countless women to tech and Django, and to <a href=\"https://djangonaut.space/\">Djangonaut Space</a> for mentoring a diverse set of contributors\u2014many of whom have stepped into leadership roles. In fact, 4 out of 6 women who put their name forward in the <a href=\"https://www.djangoproject.com/weblog/2024/oct/28/2025-dsf-board-candidates/\">latest Board elections</a> were Djangonaut Space alumni.</p>\n<p>Django thrives when our community grows more diverse, more representative, and more empowered. Today, we celebrate the progress, the leaders, and everyone working to make Django a space where everyone belongs.</p>\n<p>Happy International Women's Day! \ud83c\udf89 \ud83d\udc9c</p> Bhuvnesh Sharma & Sarah Boyce Sat, 08 Mar 2025 03:32:59 -0600 https://www.djangoproject.com/weblog/2025/mar/08/happy-international-womens-day/ Django security releases issued: 5.1.7, 5.0.13 and 4.2.20 https://www.djangoproject.com/weblog/2025/mar/06/security-releases/ <p>In accordance with <a class=\"reference external\" href=\"https://docs.djangoproject.com/en/dev/internals/security/\">our security release policy</a>, the Django team\nis issuing releases for\n<a class=\"reference external\" href=\"https://docs.djangoproject.com/en/dev/releases/5.1.7/\">Django 5.1.7</a>,\n<a class=\"reference external\" href=\"https://docs.djangoproject.com/en/dev/releases/5.0.13/\">Django 5.0.13</a> and\n<a class=\"reference external\" href=\"https://docs.djangoproject.com/en/dev/releases/4.2.20/\">Django 4.2.20</a>.\nThese releases address the security issues detailed below. We encourage all\nusers of Django to upgrade as soon as possible.</p>\n<div class=\"section\" id=\"s-cve-2025-26699-potential-denial-of-service-in-django-utils-text-wrap\">\n<h3>CVE-2025-26699: Potential denial-of-service in <tt class=\"docutils literal\">django.utils.text.wrap()</tt></h3>\n<p>The <tt class=\"docutils literal\">django.utils.text.wrap()</tt> and <tt class=\"docutils literal\">wordwrap</tt> template filter\nwere subject to a potential denial-of-service attack when used with\nvery long strings.</p>\n<p>Thanks to sw0rd1ight for the report.</p>\n<p>This issue has severity &quot;moderate&quot; according to the Django security policy.</p>\n</div>\n<div class=\"section\" id=\"s-affected-supported-versions\">\n<h3>Affected supported versions</h3>\n<ul class=\"simple\">\n<li>Django main</li>\n<li>Django 5.2 (currently at pre-release beta status)</li>\n<li>Django 5.1</li>\n<li>Django 5.0</li>\n<li>Django 4.2</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-resolution\">\n<h3>Resolution</h3>\n<p>Patches to resolve the issue have been applied to Django's\nmain, 5.2, 5.1, 5.0, and 4.2 branches.\nThe patches may be obtained from the following changesets.</p>\n<div class=\"section\" id=\"s-cve-2025-26699-potential-denial-of-service-in-django-utils-text-wrap-1\">\n<h4>CVE-2025-26699: Potential denial-of-service in <tt class=\"docutils literal\">django.utils.text.wrap()</tt></h4>\n<ul class=\"simple\">\n<li>On the <a class=\"reference external\" href=\"https://github.com/django/django/commit/55d89e25f4115c5674cdd9b9bcba2bb2bb6d820b\">main branch</a></li>\n<li>On the <a class=\"reference external\" href=\"https://github.com/django/django/commit/3cfa472644d4ce764d84fed739177b5765ea4b8a\">5.2 branch</a></li>\n<li>On the <a class=\"reference external\" href=\"https://github.com/django/django/commit/8dbb44d34271637099258391dfc79df33951b841\">5.1 branch</a></li>\n<li>On the <a class=\"reference external\" href=\"https://github.com/django/django/commit/4f2765232336b8ad0afd8017d9d912ae93470017\">5.0 branch</a></li>\n<li>On the <a class=\"reference external\" href=\"https://github.com/django/django/commit/e88f7376fe68dbf4ebaf11fad1513ce700b45860\">4.2 branch</a></li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-the-following-releases-have-been-issued\">\n<h3>The following releases have been issued</h3>\n<ul class=\"simple\">\n<li>Django 5.1.7 (<a class=\"reference external\" href=\"https://www.djangoproject.com/m/releases/5.1/Django-5.1.7.tar.gz\">download Django 5.1.7</a> |\n<a class=\"reference external\" href=\"https://www.djangoproject.com/m/pgp/Django-5.1.7.checksum.txt\">5.1.7 checksums</a>)</li>\n<li>Django 5.0.13 (<a class=\"reference external\" href=\"https://www.djangoproject.com/m/releases/5.0/Django-5.0.13.tar.gz\">download Django 5.0.13</a> |\n<a class=\"reference external\" href=\"https://www.djangoproject.com/m/pgp/Django-5.0.13.checksum.txt\">5.0.13 checksums</a>)</li>\n<li>Django 4.2.20 (<a class=\"reference external\" href=\"https://www.djangoproject.com/m/releases/4.2/Django-4.2.20.tar.gz\">download Django 4.2.20</a> |\n<a class=\"reference external\" href=\"https://www.djangoproject.com/m/pgp/Django-4.2.20.checksum.txt\">4.2.20 checksums</a>)</li>\n</ul>\n<p>The PGP key ID used for this release is Sarah Boyce: <a class=\"reference external\" href=\"https://github.com/sarahboyce.gpg\">3955B19851EA96EF</a></p>\n</div>\n<div class=\"section\" id=\"s-general-notes-regarding-security-reporting\">\n<h3>General notes regarding security reporting</h3>\n<p>As always, we ask that potential security issues be reported via private email\nto <tt class=\"docutils literal\">security&#64;djangoproject.com</tt>, and not via Django's Trac instance, nor via\nthe Django Forum. Please see <a class=\"reference external\" href=\"https://www.djangoproject.com/security/\">our security policies</a>\nfor further information.</p>\n</div> Sarah Boyce Thu, 06 Mar 2025 06:35:38 -0600 https://www.djangoproject.com/weblog/2025/mar/06/security-releases/ Call for Proposals for DjangoCon Africa 2025 is now open! https://www.djangoproject.com/weblog/2025/feb/24/cfp-for-djangocon-africa-2025-is-now-open/ <p>The call for proposals for DjangoCon Africa 2025 is officially open! \ud83d\udc83\ud83c\udffb Come be a part of this headline event by submitting a talk.</p>\n<p><a class=\"cta\" href=\"https://pretalx.com/djangocon-africa-2025/cfp\">Submit a proposal for DjangoCon Africa 2025</a></p>\n<h4 id=\"s-why-speak-at-djangocon-africa\">Why speak at DjangoCon Africa</h4>\n<p>Simply put, it\u2019s an excellent opportunity to put your ideas out there, share knowledge with fellow Djangonauts, and give back to our community. You get to reach both a passitonate local audience, and the global Django community once your talk is published online.</p>\n<p>If you\u2019re interested in <a href=\"https://2025.djangocon.africa/opportunity_grants\">our Opportunity Grants</a>, being an approved speaker or tutorial presenter also puts you first in line to receive that.</p>\n<h4 id=\"s-what-to-cover\">What to cover</h4>\n<p>We\u2019re looking for proposals from first-time speakers as well as veterans. We want talks (20 - 45 min), workshops and tutorials, (60 - 90 min), and also lightning talks (5 min). As far as topics, here are suggested ones:</p>\n<ul>\n<li>Django internals and challenges in modern web development.</li>\n<li>Wild ideas, clever hacks, surprising or cool use cases.</li>\n<li>Improving Django and Python developers\u2019 lives.</li>\n<li>Pushing Django to its limits.</li>\n<li>The Django and Python community, culture, history, past, present &amp; future, the why, the who and the what of it all.</li>\n<li>Security</li>\n<li>Emerging technologies and industries \u2013 AI, Blockchain, Open Source etc.</li>\n<li>Diversity, Equity and Inclusion</li>\n<li>Whatever you deem appropriate - it\u2019s your conference after all</li>\n</ul>\n<h5 id=\"s-ubuntu\">Ubuntu</h5>\n<p>In addition to Django, this year's edition will feature a new Pan-African open source event running alongside DjangoCon Africa - UbuCon at DjangoCon Africa!</p>\n<p>We invite proposals on any of these topics, and more: Desktop, Cloud and Infrastructure, Linux Containers and Container Orchestration, DevOps, Virtualisation, Automation, Networking Windows Subsystem for Linux(WSL), IoT, Embedded, Robotics, Appliances, Packaging, Documentation, QA and Bug triage, Security, Compliance and Kernel, Data and AI, Video, Audio and Image editing, Open source tools, Community, Diversity, Local Outreach and Social Context.</p>\n<h4 id=\"s-im-in-what-do-i-do\">I\u2019m in! What do I do?</h4>\n<p>Great! \ud83e\udd18 Go <a href=\"https://pretalx.com/djangocon-africa-2025/cfp\">submit your proposal</a>. You have until the end of March to do that but no need to wait \u2013 <strong>submit now</strong> and you can always edit the proposal later.</p>\n<p>And if you\u2019d like to increase your changes, make sure to review our <a href=\"https://2025.djangocon.africa/speaking\">Speaking at DjangoCon Africa 2025</a> documentation, and the <a href=\"https://2025.djangocon.africa/speaker_resources\">Speakers resources</a>.</p>\n<p><a class=\"cta\" href=\"https://pretalx.com/djangocon-africa-2025/cfp\">Submit a proposal for DjangoCon Africa 2025</a></p>\n<hr>\n<p>Not convinved yet? Check out our <a href=\"https://www.youtube.com/watch?v=ohTNwfVmx0A\">Connections that count: Reflecting on DjangoCon Africa 2023 in Zanzibar</a> to hear from our 2023 participants on what the conference meant for them.</p>\n<iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/ohTNwfVmx0A?si=oHlJPiiYBeOF9-rj\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe> DjangoCon Africa 2025 organizers Mon, 24 Feb 2025 03:05:03 -0600 https://www.djangoproject.com/weblog/2025/feb/24/cfp-for-djangocon-africa-2025-is-now-open/ Django 5.2 beta 1 released https://www.djangoproject.com/weblog/2025/feb/19/django-52-beta-1-released/ <p>Django 5.2 beta 1 is now available. It represents the second stage in the 5.2\nrelease cycle and is an opportunity for you to try out the changes coming in\nDjango 5.2.</p>\n<p>Django 5.2 brings a composite of new features which you can read about in\n<a class=\"reference external\" href=\"https://docs.djangoproject.com/en/dev/releases/5.2/\">the in-development 5.2 release notes</a>.</p>\n<p>Only bugs in new features and regressions from earlier versions of Django will\nbe fixed between now and the 5.2 final release. Translations will be updated\nfollowing the &quot;string freeze&quot;, which occurs when the release candidate is\nissued. The <a class=\"reference external\" href=\"https://code.djangoproject.com/wiki/Version5.2Roadmap#schedule\">current release schedule</a> calls for a\nrelease candidate in a month from now, and a final release to follow about two\nweeks after that, scheduled for April 2nd.</p>\n<p>Early and frequent testing from the community will help minimize the number of\nbugs in the release. Updates on the release schedule are available <a class=\"reference external\" href=\"https://forum.djangoproject.com/t/django-5-2-release-status-and-next-steps/37131\">on the\nDjango forum</a>.</p>\n<p>As with all alpha and beta packages, this is <strong>not</strong> for production use. But if\nyou'd like to take some of the new features for a spin, or to help find and fix\nbugs (which should be reported to <a class=\"reference external\" href=\"https://code.djangoproject.com/newticket\">the issue tracker</a>), you can grab a copy of the beta\npackage from <a class=\"reference external\" href=\"https://www.djangoproject.com/download/\">our downloads page</a> or\non PyPI.</p>\n<p>The PGP key ID used for this release is Sarah Boyce: <a class=\"reference external\" href=\"https://github.com/sarahboyce.gpg\">3955B19851EA96EF</a></p> Sarah Boyce Wed, 19 Feb 2025 01:55:07 -0600 https://www.djangoproject.com/weblog/2025/feb/19/django-52-beta-1-released/ DjangoCongress JP 2025 Announcement and Live Streaming! https://www.djangoproject.com/weblog/2025/feb/14/djangocongress-jp-2025-announcement-and-livestream/ <p><a href=\"https://djangocongress.jp/\">DjangoCongress JP 2025</a>, to be held on Saturday, February 22, 2025  at 10 am (<a href=\"https://www.timeanddate.com/time/zones/jst\">Japan Standard Time</a>), will be broadcast live!</p>\n<p>It will be streamed on the following YouTube Live channels:</p>\n<ul>\n<li><a href=\"https://youtube.com/live/P2UWAuKHI3Y\">DjangoCongress JP 2025 ROOM1</a></li>\n<li><a href=\"https://youtube.com/live/aL4tCmAP7kE\">DjangoCongress JP 2025 ROOM2</a></li>\n</ul>\n<p>This year there will be talks not only about Django, but also about FastAPI and other asynchronous web topics. There will also be talks on Django core development, Django Software Foundation (DSF) governance, and other topics from around the world. Simultaneous translation will be provided in both English and Japanese.</p>\n<h4 id=\"s-schedule\">Schedule</h4>\n<h5 id=\"s-room1\">ROOM1</h5>\n<ul>\n<li><span lang=\"ja\">DRF\u3092\u5c11\u3057\u305a\u3064\u30aa\u30cb\u30aa\u30f3\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5bc4\u305b\u3066\u3044\u304f</span></li>\n<li>The Async Django ORM: Where Is it?</li>\n<li><span lang=\"ja\">FastAPI\u306e\u73fe\u5834\u304b\u3089</span></li>\n<li>Speed at Scale for Django Web Applications</li>\n<li><span lang=\"ja\">Django Ninja\u306b\u3088\u308bAPI\u958b\u767a\u306e\u52b9\u7387\u5316\u3068\u30ea\u30d7\u30ec\u30fc\u30b9\u306e\u5b9f\u8df5</span></li>\n<li>Implementing Agentic AI Solutions in Django from scratch</li>\n<li>Diving into DSF governance: past, present and future</li>\n</ul>\n<h5 id=\"s-room2\">ROOM2</h5>\n<ul>\n<li><span lang=\"ja\">\u751f\u6210AI\u3067Django\u30a2\u30d7\u30ea\u304c\u4f5c\u308c\u308b\u306e\u304b\u3069\u3046\u304b\uff08FastAPI\u3067\u3082\u3084\u3063\u3066\u307f\u3088\u3046\uff09</span></li>\n<li><span lang=\"ja\">DX\u306b\u304a\u3051\u308bDjango\u306e\u90e8\u5206\u7684\u5229\u7528</span></li>\n<li><span lang=\"ja\">\u3067\u304d\u308b\uff01Django\u30c6\u30b9\u30c8\uff082025\uff09</span></li>\n<li><span lang=\"ja\">Django\u306b\u304a\u3051\u308b\u8907\u6570\u30e6\u30fc\u30b6\u30fc\u7a2e\u5225\u8a8d\u8a3c\u306e\u8a2d\u8a08\u30a2\u30d7\u30ed\u30fc\u30c1</span></li>\n<li>Getting Knowledge from Django Hits: Using Grafana and Prometheus</li>\n<li>Culture Eats Strategy for Breakfast: Why Psychological Safety Matters in Open Source</li>\n<li>\u00b5Django. The next step in the evolution of asynchronous microservices technology.</li>\n</ul>\n<p>A public viewing of the event will also be held in Tokyo. A reception will also be held, so please check the following connpass page if you plan to attend.</p>\n<p>Registration (connpass page): <span lang=\"ja\"><a href=\"https://django.connpass.com/event/345417/\">DjangoCongress JP 2025\u30d1\u30d6\u30ea\u30c3\u30af\u30d3\u30e5\u30fc\u30a4\u30f3\u30b0</a></span></p> DjangoCongress JP team Fri, 14 Feb 2025 16:12:10 -0600 https://www.djangoproject.com/weblog/2025/feb/14/djangocongress-jp-2025-announcement-and-livestream/ DSF member of the month - Lily Foote https://www.djangoproject.com/weblog/2025/feb/10/dsf-member-of-the-month-lily-foote/ <p>For February 2025, we welcome Lily Foote (<a href=\"https://fosstodon.org/@lilyf\">@lilyf</a>) as our DSF member of the month! \u2b50</p>\n<p>Lily Foote is a contributor to Django core for many years, especially on the ORM. She is currently a member of the Django 6.x <a href=\"https://docs.djangoproject.com/en/dev/internals/organization/#steering-council\">Steering Council</a> and she has been a DSF member since March 2021. <br>\nYou can learn more about Lily by visiting <a href=\"https://github.com/LilyFoote\">her GitHub profile</a>.</p>\n<p>Let\u2019s spend some time getting to know Lily better!</p>\n<h4 id=\"s-can-you-tell-us-a-little-about-yourself-hobbies-education-etc\">Can you tell us a little about yourself (hobbies, education, etc)</h4>\n<p>My name is Lily Foote and I\u2019ve been contributing to Django for most of my career. I\u2019ve also recently got into Rust and I\u2019m excited about using Rust in Python projects. When I\u2019m not programming, I love hiking, climbing and dancing (Ceilidh)! I also really enjoying playing board games and role playing games (e.g. Dungeons and Dragons).</p>\n<h4 id=\"s-how-did-you-start-using-django\">How did you start using Django?</h4>\n<p>I\u2019d taught myself Python in my final year at university by doing <a href=\"https://projecteuler.net/\">Project Euler</a> problems and then decided I wanted to learn how to make a website. Django was the first Python web framework I looked at and it worked really well for me.</p>\n<h4 id=\"s-what-other-framework-do-you-know-and-if-there-is-anything-you-would-like-to-have-in-django-if-you-had-magical-powers\">What other framework do you know and if there is anything you would like to have in Django if you had magical powers?</h4>\n<p>I\u2019ve done a small amount with Flask and FastAPI. More than any new features, I think the thing that I\u2019d most like to see is more long-term contributors to spread the work of keeping Django awesome.</p>\n<h4 id=\"s-what-projects-are-you-working-on-now\">What projects are you working on now?</h4>\n<p>The side project I\u2019m most excited about is <a href=\"https://github.com/LilyFoote/django-rusty-templates\">Django Rusty Templates</a>, which is a re-implementation of Django\u2019s templating language in Rust.</p>\n<h4 id=\"s-which-django-libraries-are-your-favorite-core-or-3rd-party\">Which Django libraries are your favorite (core or 3rd party)?</h4>\n<p>The ORM of course!</p>\n<h4 id=\"s-what-are-the-top-three-things-in-django-that-you-like\">What are the top three things in Django that you like?</h4>\n<p>Django Conferences, the mentorship program Djangonaut Space and the whole community!</p>\n<h4 id=\"s-you-have-been-a-mentor-multiple-times-with-gsoc-and-djangonaut-space-program-what-is-required-according-to-you-to-be-a-good-mentor\">You have been a mentor multiple times with GSoC and Djangonaut Space program, what is required according to you to be a good mentor?</h4>\n<p>I think being willing to invest time is really important. Checking in with your mentees frequently and being an early reviewer of their work. I think this helps keep their motivation up and allows for small corrections early on.</p>\n<h4 id=\"s-any-advice-for-future-contributors\">Any advice for future contributors?</h4>\n<p>Start small and as you get more familiar with Django and the process of contributing you can take on bigger issues. Also be patient with reviewers \u2013 Django has high standards, but is mostly maintained by volunteers with limited time.</p>\n<h4 id=\"s-you-are-now-part-of-the-steering-council-congratulations-again-do-you-have-any-words-to-share-related-to-that\">You are now part of the Steering Council, congratulations again! Do you have any words to share related to that?</h4>\n<p>Yes! It\u2019s a huge honour! Since January, we\u2019ve been meeting weekly and it feels like we\u2019ve hardly scratched the surface of what we want to achieve. The biggest thing we\u2019re trying to tackle is how to improve the contribution experience \u2013 especially evaluating new feature ideas \u2013 without draining everyone\u2019s time and energy.</p>\n<h4 id=\"s-you-have-a-lot-of-knowledge-in-the-django-orm-how-did-you-start-to-contribute-to-this-part\">You have a lot of knowledge in the Django ORM, how did you start to contribute to this part?</h4>\n<p>I added the Greatest and Least expressions in Django 1.9, with the support of one of the core team at the time. After that, I kept showing up (especially at conference sprints) and finding a new thing to tackle.</p>\n<h4 id=\"s-is-there-anything-else-youd-like-to-say\">Is there anything else you\u2019d like to say?</h4>\n<p>Thanks for having me on!</p>\n<hr>\n<p><strong>Thank you for doing the interview, Lily!</strong></p> Sarah Abderemane Mon, 10 Feb 2025 22:51:31 -0600 https://www.djangoproject.com/weblog/2025/feb/10/dsf-member-of-the-month-lily-foote/ Django bugfix releases issued: 5.1.6, 5.0.12, and 4.2.19 https://www.djangoproject.com/weblog/2025/feb/05/bugfix-releases/ <p>Today we've issued\n<a class=\"reference external\" href=\"https://docs.djangoproject.com/en/stable/releases/5.1.6/\">5.1.6</a>,\n<a class=\"reference external\" href=\"https://docs.djangoproject.com/en/stable/releases/5.0.12/\">5.0.12</a>, and\n<a class=\"reference external\" href=\"https://docs.djangoproject.com/en/stable/releases/4.2.19/\">4.2.19</a> bugfix releases.</p>\n<p>The release package and checksums are available from <a class=\"reference external\" href=\"/download/\">our downloads page</a>, as well as from the Python Package Index. The PGP key ID used for this release is Natalia Bidart: <a class=\"reference external\" href=\"https://github.com/nessita.gpg\">2EE82A8D9470983E</a>.</p> Natalia Bidart Wed, 05 Feb 2025 06:00:00 -0600 https://www.djangoproject.com/weblog/2025/feb/05/bugfix-releases/"
  },
  "https://django.threadless.com/": {
    "url": "https://django.threadless.com/",
    "content": "Django Software Foundation Store | Featuring custom t-shirts, prints, and more Skip to main content Shop original art created and sold by Django Software Foundation Store Menu View your Shopping Cart Django Software Foundation Store Men's T-Shirts \u25b2 Regular Classic Extra Soft Triblend Premium Ringer Performance Champion\u00ae Vintage Wash V-Necks Longsleeve T-Shirts \u25b2 Regular Baseball Triblend Sweatshirts \u25b2 Classic Fleece French Terry Sponge Fleece Pullover Hoodies \u25b2 Classic Fleece French Terry Sponge Fleece Zip-Up Hoodies \u25b2 Classic Fleece French Terry Sponge Fleece Jackets \u25b2 Zip-Up Windbreaker Pullover Windbreaker Bomber Jacket Coach's Jacket Tanks \u25b2 Regular Triblend Women's T-Shirts \u25b2 Fitted Regular Unisex Classic Unisex Extra Soft Triblend Premium Ringer Unisex Performance Unisex Champion\u00ae Unisex Vintage Wash Unisex V-Necks \u25b2 Regular Deep V-Neck Scoop Necks \u25b2 Regular Dolman Longsleeve T-Shirts \u25b2 Baseball Triblend Regular Unisex Sweatshirts \u25b2 Classic Fleece French Terry Sponge Fleece Pullover Hoodies \u25b2 Classic Fleece French Terry Sponge Fleece Zip-Up Hoodies \u25b2 Classic Fleece French Terry Sponge Fleece Jackets \u25b2 Zip-Up Windbreaker Pullover Windbreaker Bomber Jacket Coach's Jacket Tanks \u25b2 Racerback Racerback Triblend Muscle Kids T-Shirts Pullover Hoodies Longsleeve T-Shirts Baby T-Shirts Baby Longsleeve Bodysuits Baby Bodysuits Toddler T-Shirts Home Fine Art Prints Framed Fine Art Prints Mini Art Prints \u25b2 Framed Art Print Art Print Art Print with Stand Stretched Canvases Tapestries Throw Pillows Blankets \u25b2 Fleece Blanket Sherpa Blanket Duvets Bath Mats Shower Curtains Rugs Mounted Aluminum Prints Mounted Acrylic Prints Accessories Stickers \u25b2 White Clear Mugs \u25b2 Standard Latte Travel Buttons Bags \u25b2 Tote Bag Weekender Bag Drawstring Bag Laundry Bag Zip Pouches Magnets Notebooks \u25b2 Blank Journal Lined Journal Lined Spiral Phone Cases Greeting Cards Mouse Pads \u25b2 Mouse Pad Desk Mat Scarves Beach Towels Jigsaw Puzzles Skateboards \u25b2 Deck Only Complete - Basic Complete - Premium Complete - Pro With Hanging Hardware Collections DjangoCon AU 2023 About DjangoCon AU 2023 Triblend T-Shirt  - Front + Back DjangoCon AU 2023 (Alt) French Terry Zip-Up Hoody  - Crest + Back Django Logo Triblend T-Shirt Django Logo Regular T-Shirt Django Logo French Terry Pullover Hoody Django Logo French Terry Sweatshirt \u00a9 Django Software Foundation Store Help & Returns Legal Loading Cart Contents By using this website, you agree to our use of cookies . We use cookies to provide you with a great experience and to help our website run effectively. Ok"
  },
  "https://fosstodon.org/@django": {
    "url": "https://fosstodon.org/@django",
    "content": "Django (@django@fosstodon.org) - Fosstodon To use the Mastodon web application, please enable JavaScript. Alternatively, try one of the native apps for Mastodon for your platform."
  },
  "https://dashboard.djangoproject.com/": {
    "url": "https://dashboard.djangoproject.com/",
    "content": "Development dashboard | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Development dashboard Activity New tickets today 2 Commits today 6 New tickets this week 9 Commits in the last week 23 Release blockers 1 Patches \"Easy\" tickets 10 Open pull requests 301 Patches needing review 36 Doc. patches needing review 2 Tickets by triage stage Unreviewed tickets 0 Accepted tickets 977 Tickets someday/maybe 71 Tickets ready for commit 4 Accepted tickets by type Bugs 354 Feature requests 343 Cleanups and optimizations 279 Uncategorized 0 Updated 4\u00a0minutes ago. Back to Top Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/download/": {
    "url": "https://www.djangoproject.com/download/",
    "content": "Download Django | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Download How to get Django Django is available open-source under the BSD license .\n    We recommend using the latest version of Python 3. The last version to\n    support Python 2.7 is Django 1.11 LTS. See the FAQ for the Python versions supported by each version of Django.\n    Here\u2019s how to get it: Option 1: Get the latest official version The latest official version is 5.1.7. Read the 5.1.7 release notes , then install it with pip : Linux / macOS: python -m pip install Django==5.1.7 Windows: py -m pip install Django==5.1.7 Option 2: Get the release candidate for 5.2 As part of the Django 5.2 development process , Django\n        5.2rc1 is available. This release is only for users who\n        want to try the new version and help identify remaining bugs before the\n        5.2 release. Please read the 5.2 release notes before using this package. Install the release candidate with pip : pip install --pre django Option 3: Get the latest development version The latest and greatest Django version is the one that\u2019s in our Git repository (our revision-control system). This is only for experienced users who want to try incoming changes and help identify bugs before an official release. Get it using this shell command, which requires Git : git clone https://github.com/django/django.git You can also download a gzipped tarball of the development version. This archive is updated\n    every time we commit code. After you get it See the installation guide for further instructions. Make sure you read the documentation that corresponds to the version of Django you\u2019ve just installed. And be sure to sign up to the Django Forum , where other Django users and the Django developers themselves all hang out to help each other. Supported Versions Feature releases (A.B, A.B+1, etc.) will happen roughly every eight months.\n    These releases will contain new features, improvements to existing features, and such. Patch releases (A.B.C, etc.) will be issued as needed, to\n    fix bugs and/or security issues. These releases will be 100% compatible with\n    the associated feature release, unless this is impossible for security\n    reasons or to prevent data loss. So the answer to \"should I upgrade to the\n    latest patch release?\u201d will always be \"yes.\" Certain feature releases will be designated as long-term support\n    (LTS) releases . These releases will get security and data loss\n    fixes applied for a guaranteed period of time, typically three years. See the supported versions policy for detailed guidelines about what fixes will be backported. Release Series Latest Release End of mainstream support 1 End of extended support 2 5.1 5.1.7 April 2025 December 2025 5.0 5.0.13 August 7, 2024 April 2025 4.2 LTS 4.2.20 December 4, 2023 April 2026 Future Roadmap Release Series Release Date End of mainstream support 1 End of extended support 2 6.1 August 2026 April 2027 December 2027 6.0 December 2025 August 2026 April 2027 5.2 LTS April 2025 December 2025 April 2028 Unsupported previous releases These release series no longer receive security updates or bug fixes. Release Series Latest Release End of mainstream support 1 End of extended support 2 4.1 4.1.13 April 5, 2023 December 1, 2023 4.0 4.0.10 August 3, 2022 April 1, 2023 3.2 LTS 3.2.25 December 7, 2021 April 1, 2024 3.1 3.1.14 April 6, 2021 December 7, 2021 3.0 3.0.14 August 3, 2020 April 6, 2021 2.2 LTS 2.2.28 December 2, 2019 April 11, 2022 2.1 2.1.15 April 1, 2019 December 2, 2019 2.0 2.0.13 August 1, 2018 April 1, 2019 1.11 LTS 3 1.11.29 December 2, 2017 April 1, 2020 1.10 1.10.8 April 4, 2017 December 2, 2017 1.9 1.9.13 August 1, 2016 April 4, 2017 1.8 LTS 1.8.19 December 1, 2015 April 1, 2018 1.7 1.7.11 April 1, 2015 December 1, 2015 1.6 1.6.11 September 2, 2014 April 1, 2015 1.5 1.5.12 November 6, 2013 September 2, 2014 1.4 LTS 1.4.22 February 26, 2013 October 1, 2015 1.3 1.3.7 March 23, 2012 February 26, 2013 [1] Security fixes, data loss bugs, crashing bugs, major functionality\n      bugs in newly-introduced features, and regressions from older versions of Django. [2] Security fixes and data loss bugs. [3] Last version to support Python 2.7. Back to Top Additional Information Diamond and Platinum Members Sentry Sentry gives developers insight into the issues that affect their production applications. JetBrains JetBrains delivers intelligent software solutions that make developers more productive by simplifying their challenging tasks, automating the routine, and helping them adopt the best development practices. PyCharm is the Python IDE for Professional Developers by JetBrains providing a complete set of tools for productive Python, Web and scientific development. Support Django! John Teague donated to the Django Software Foundation to support Django development. Donate today! For the impatient: Latest release: releases/5.1/Django-5.1.7.tar.gz Checksums: pgp/Django-5.1.7.checksum.txt Release notes: Online documentation Preview release: releases/5.2/Django-5.2rc1.tar.gz Checksums: pgp/Django-5.2rc1.checksum.txt Release notes: Online documentation Which version is better? We improve Django almost every day and are pretty good about keeping the code stable. Thus, using the latest development code is a safe and easy way to get access to new features as they\u2019re added. If you choose to follow the development version, keep in mind that there will occasionally be backwards-incompatible changes. You\u2019ll want to pay close attention to the commits by watching Django on GitHub or subscribing to django-updates . If you\u2019re just looking for a stable deployment target and don\u2019t mind waiting for the next release, you\u2019ll want to stick with the latest official release (which will always include detailed notes on any changes you\u2019ll need to make while upgrading). Previous releases Django 5.0.13: releases/5.0/Django-5.0.13.tar.gz Checksums: pgp/Django-5.0.13.checksum.txt Release notes: Online documentation Django 4.2.20 (LTS): releases/4.2/Django-4.2.20.tar.gz Checksums: pgp/Django-4.2.20.checksum.txt Release notes: Online documentation Unsupported previous releases (no longer receive security updates or bug fixes) Django 4.1.13: releases/4.1/Django-4.1.13.tar.gz Checksums: pgp/Django-4.1.13.checksum.txt Release notes: Online documentation Django 4.0.10: releases/4.0/Django-4.0.10.tar.gz Checksums: pgp/Django-4.0.10.checksum.txt Release notes: Online documentation Django 3.2.25: releases/3.2/Django-3.2.25.tar.gz Checksums: pgp/Django-3.2.25.checksum.txt Release notes: Online documentation Django 3.1.14: releases/3.1/Django-3.1.14.tar.gz Checksums: pgp/Django-3.1.14.checksum.txt Release notes: Online documentation Django 3.0.14: releases/3.0/Django-3.0.14.tar.gz Checksums: pgp/Django-3.0.14.checksum.txt Release notes: Online documentation Django 2.2.28: releases/2.2/Django-2.2.28.tar.gz Checksums: pgp/Django-2.2.28.checksum.txt Release notes: Online documentation Django 2.1.15: releases/2.1/Django-2.1.15.tar.gz Checksums: pgp/Django-2.1.15.checksum.txt Release notes: Online documentation Django 2.0.13: releases/2.0/Django-2.0.13.tar.gz Checksums: pgp/Django-2.0.13.checksum.txt Release notes: Online documentation Django 1.11.29: releases/1.11/Django-1.11.29.tar.gz Checksums: pgp/Django-1.11.29.checksum.txt Release notes: Online documentation Django 1.10.8: releases/1.10/Django-1.10.8.tar.gz Checksums: pgp/Django-1.10.8.checksum.txt Release notes: Online documentation Django 1.9.13: releases/1.9/Django-1.9.13.tar.gz Checksums: pgp/Django-1.9.13.checksum.txt Release notes: Online documentation Django 1.8.19: releases/1.8/Django-1.8.19.tar.gz Checksums: pgp/Django-1.8.19.checksum.txt Release notes: Online documentation Django 1.7.11: releases/1.7/Django-1.7.11.tar.gz Checksums: pgp/Django-1.7.11.checksum.txt Release notes: Online documentation Django 1.6.11: releases/1.6/Django-1.6.11.tar.gz Checksums: pgp/Django-1.6.11.checksum.txt Release notes: Online documentation Django 1.5.12: releases/1.5/Django-1.5.12.tar.gz Checksums: pgp/Django-1.5.12.checksum.txt Release notes: Online documentation Django 1.4.22: releases/1.4/Django-1.4.22.tar.gz Checksums: pgp/Django-1.4.22.checksum.txt Release notes: Online documentation Django 1.3.7: releases/1.3/Django-1.3.7.tar.gz Checksums: pgp/Django-1.3.7.checksum.txt Release notes: Online documentation Django 1.2.7: releases/1.2/Django-1.2.7.tar.gz Checksums: pgp/Django-1.2.7.checksum.txt Release notes: Online documentation Django 1.1.4: releases/1.1/Django-1.1.4.tar.gz Checksums: pgp/Django-1.1.4.checksum.txt Release notes: Online documentation Django 1.0.4: releases/1.0/Django-1.0.4.tar.gz Checksums: pgp/Django-1.0.4.checksum.txt Release notes: Online documentation Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://docs.djangoproject.com/en/stable/topics/i18n/": {
    "url": "https://docs.djangoproject.com/en/stable/topics/i18n/",
    "content": "Internationalization and localization | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help el es fr id it ja ko pl pt-br zh-hans Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.2 dev Documentation version: 5.1 Internationalization and localization \u00b6 Overview \u00b6 The goal of internationalization and localization is to allow a single web\napplication to offer its content in languages and formats tailored to the\naudience. Django has full support for translation of text , formatting of dates, times and numbers , and time zones . Essentially, Django does two things: It allows developers and template authors to specify which parts of their apps\nshould be translated or formatted for local languages and cultures. It uses these hooks to localize web apps for particular users according to\ntheir preferences. Translation depends on the target language, and formatting usually depends on\nthe target country. This information is provided by browsers in the Accept-Language header. However, the time zone isn\u2019t readily available. Definitions \u00b6 The words \u201cinternationalization\u201d and \u201clocalization\u201d often cause confusion;\nhere\u2019s a simplified definition: internationalization \u00b6 Preparing the software for localization. Usually done by developers. localization \u00b6 Writing the translations and local formats. Usually done by translators. More details can be found in the W3C Web Internationalization FAQ , the Wikipedia article or the GNU gettext documentation . Warning Translation is controlled by the USE_I18N setting. However, it\ninvolves internationalization and localization. The name of the setting is\nan unfortunate result of Django\u2019s history. Here are some other terms that will help us to handle a common language: locale name \u00b6 A locale name, either a language specification of the form ll or a\ncombined language and country specification of the form ll_CC .\nExamples: it , de_AT , es , pt_BR , sr_Latn . The language\npart is always in lowercase. The country part is in titlecase if it has\nmore than 2 characters, otherwise it\u2019s in uppercase. The separator is an\nunderscore. language code \u00b6 Represents the name of a language. Browsers send the names of the\nlanguages they accept in the Accept-Language HTTP header using this\nformat. Examples: it , de-at , es , pt-br . Language codes\nare generally represented in lowercase, but the HTTP Accept-Language header is case-insensitive. The separator is a dash. message file \u00b6 A message file is a plain-text file, representing a single language,\nthat contains all available translation strings and how they should be represented in the given\nlanguage. Message files have a .po file extension. translation string \u00b6 A literal that can be translated. format file \u00b6 A format file is a Python module that defines the data formats for a given\nlocale. Previous page and next page Sending email Translation Back to Top Additional Information Support Django! Dan Poirier donated to the Django Software Foundation to support Django development. Donate today! Contents Internationalization and localization Overview Definitions Browse Prev: Sending email Next: Translation Table of contents General Index Python Module Index You are here: Django 5.1 documentation Using Django Internationalization and localization Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (Django 5.1): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/foundation/": {
    "url": "https://www.djangoproject.com/foundation/",
    "content": "About the Django Software Foundation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Django Software Foundation About the Django Software Foundation Development of Django is supported by an independent foundation established as a 501(c)(3) non-profit. Like most\r\n    open-source foundations, the goal of the Django Software Foundation is to promote, support, and advance its\r\n    open-source project: in our case, the Django Web framework. The foundation's goals are to: Support development of Django by sponsoring sprints, meetups, gatherings and community events. Promote the use of Django among the World Wide Web development community. Protect the intellectual property and the framework's long-term viability. Advance the state of the art in Web development. Corporate Members \u00b6 The Django Software Foundation would not be able to operate without the generous financial support of our corporate members . If you are interested in becoming a corporate\r\n    member of the DSF, you can find out more on our corporate membership\r\n        page Individual Members \u00b6 Individual members are appointed to the Django Software Foundation in\r\n    recognition of their contributions to the Django community. If you know of someone that you think should be a\r\n    member, including yourself, please fill out this form and the DSF membership will enter them into consideration. Support for events The DSF is happy to provide financial and other support to Django events around the world. Find out how the DSF can support your conference or other event . Code of Conduct requirement The DSF will only endorse or support events which publish and adhere to a suitable Code of Conduct . Prizes The DSF awards prizes to recognize the contributions of volunteers in the Django\r\n    community. Board \u00b6 The 2025 board of directors are: Thibaud Colas 1 , President Sarah Abderemane 1 , Vice President Tom Carrick 2 , Secretary Jacob Kaplan-Moss 1 , Treasurer Abigail Afi Gbadago 2 Jeff Triplett 2 Paolo Melchiorre 2 1 Up for election in 2025 2 Up for election in 2026 Board history \u00b6 President Vice President Secretary Treasurer Board Members 2025 Thibaud Colas Sarah Abderemane Tom Carrick Jacob Kaplan-Moss Abigail Afi Gbadago Jeff Triplett Paolo Melchiorre 2024 Chaim Kirby \u00c7a\u011f\u0131l Ulu\u015fahin Sonmez Thibaud Colas Jacob Kaplan-Moss Sarah Abderemane Katie McLaughlin K\u00e1tia Nakamura 2023 Chaim Kirby \u00c7a\u011f\u0131l Ulu\u015fahin Sonmez Katie McLaughlin Peter Baumgartner Aaron Bassett Jacob Kaplan-Moss K\u00e1tia Yoshime Nakamura 2022 Anna Makarudze Chaim Kirby Mfon Eti-mfon William Vincent Aaron Bassett K\u00e1tia Nakamura \u017dan Anderle 2021 Anna Makarudze Aaron Bassett Chaim Kirby William Vincent K\u00e1tia Nakamura Mfon Eti-mfon \u017dan Anderle 2020 Frank Wiles Anna Makarudze James Bennett William Vincent Aaron Bassett K\u00e1tia Nakamura Sayantika Banik 2019 Frank Wiles Anna Makarudze James Bennett Jessica 'Deatz' Deaton Katie McLaughlin Ola Tarkowska Catherine Holmes 2018 Frank Wiles Daniele Procida Katie McLaughlin Rebecca Conley Anna Makarudze James Bennett 2017 Frank Wiles Daniele Procida Ken W. Alger Rebecca Conley James Bennett Kenneth Love 2016 Frank Wiles - Andy McKay Christophe Pettus Karen Tracey Daniele Procida James Bennett 2015 Russell Keith-Magee - Andy McKay Stacey Haysler Karen Tracey Ola Sitarska Jannis Leidel Previous board Prior to 2015, the Board of Directors\r\n    was not annually elected, but members were added and removed as required. This listing shows\r\n    these announcements, alongside the relative view of the board at the time. President Secretary Treasurer Board Members June 2014 Jannis\r\n                elected Russell Keith-Magee Andy McKay Joseph Kocherhans Adrian Holovaty Jannis Leidel Karen Tracy May 2014 Jeremy\r\n                resigns Russell Keith-Magee Andy McKay Joseph Kocherhans Adrian Holovaty Karen Tracy June 2013 Jeremy\r\n                elected, moves to non-officer. Andy elected to Secretary Russell Keith-Magee Andy McKay Joseph Kocherhans Jeremy Dunck Adrian Holovaty Karen Tracy April 2013 Alex\r\n                resigns Russell Keith-Magee Jeremy Dunck Joseph Kocherhans Adrian Holovaty Karen Tracy December 2012 Karen\r\n                elected Russell Keith-Magee Jeremy Dunck Joseph Kocherhans Adrian Holovaty Alex Gaynor Karen Tracy October 2012 Jacob\r\n                resigns Russell Keith-Magee Jeremy Dunck Joseph Kocherhans Adrian Holovaty Alex Gaynor July 2012 Alex\r\n                elected Russell Keith-Magee Jeremy Dunck Joseph Kocherhans Adrian Holovaty Alex Gaynor Jacob Kaplan-Moss June 2012 Dan\r\n                resigns Russell Keith-Magee Jeremy Dunck Joseph Kocherhans Adrian Holovaty Jacob Kaplan-Moss Nov 2011 New President introduced Russell Keith-Magee Jeremy Dunck Joseph Kocherhans Adrian Holovaty Dan Cox Jacob Kaplan-Moss Sept 2008 Officers Introduced Jacob Kaplan-Moss Jeremy Dunck Joseph Kocherhans Adrian Holovaty Dan Cox June 2007 Inaugural Board - - - Adrian Holovaty Dan Cox Jacob Kaplan-Moss Questions? Get in touch! Back to Top Additional Information Support Django! Ald\u00e1n Creo Mari\u00f1o donated to the Django Software Foundation to support Django development. Donate today! About the foundation FAQ Records Contact us Contributor license agreements Organizing a Django conference Latest DSF meeting minutes DSF Board monthly meeting, March 13, 2025 New and Ongoing business Confirmation for community Booth at PyCon US 2025 Contributor License Agreement or alternative Djangonaut Space session at PyCon Italia 2025 Proposed bylaws changes Read more DSF Board monthly meeting, February 13, 2025 New and Ongoing business Contributor License Agreement or alternative Django accessibility statement Django active developers sprints Executive Director update Online Community Working Group proposal Proposed bylaws changes Sarah Boyce requests access to add external members to Google Groups Space reserved for Django at PyCon Italia 2025 Vote on new Fellowship Working Group members Website Working Group proposal Read more More meeting minutes Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/": {
    "url": "https://www.djangoproject.com/",
    "content": "The web framework for perfectionists with deadlines | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Django makes it easier to build better web apps more quickly and with less code. Get started with Django Meet Django Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source. Ridiculously fast. Django was designed to help developers take applications from concept to completion as quickly as possible. Reassuringly secure. Django takes security seriously and helps developers avoid many common security mistakes. Exceedingly scalable. Some of the busiest sites on the web leverage Django\u2019s ability to quickly and flexibly scale. Learn more about Django Join the Community Forum - Post a question Discord - Chat with us Back to Top Additional Information Additional Information Download latest release: 5.1.7 Django documentation Support Django! Chartwell Resource Group Ltd donated to the Django Software Foundation to support Django development. Donate today! Latest news Django 5.2 release candidate 1 released Today Django 5.2 release candidate 1, a preview/testing package for the upcoming Django 5.2 release, is available. Posted by Sarah Boyce on March 19, 2025 DSF member of the month - Cory Zue Cory Zue is the DSF member of the month for March 2025. Find out more about one of Django's long-standing Django developer. Posted by Sarah Abderemane on March 14, 2025 More news New to Django? Installation guide Write your first Django app Getting started with Django The power of Django Object-relational mapper Automatic admin interface Robust template system Quick internationalization Explore more features Get involved Ticket system Report bugs and make feature requests Development dashboard see what's currently being worked on Inside the Django community Get Help Django Discord Server Join the Django Discord Community Official Django Forum Join the community on the Django Forum. The Django Software Foundation About the Foundation Our non-profit supports the project Support Django Your contribution makes Django stronger Contact the Django Software Foundation More about the DSF Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/diversity/": {
    "url": "https://www.djangoproject.com/diversity/",
    "content": "Django Community Diversity Statement | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Community Diversity Statement Django Community Diversity Statement Platitudes are cheap. We've all heard organizations say they're committed to \"diversity\" and \"tolerance\" without ever getting specific, so here's our stance on it: We welcome you. We welcome people of any gender identity or expression, race, skin color, ethnicity, age, size, nationality, sexual orientation, ability level, neurotype, religion, elder status, family structure, culture, subculture, political opinion, education level, identity, and self-identification. We welcome activists, artists, bloggers, crafters, coders, wannabe-coders, designers, entrepreneurs, documentation writers, journalists, sysadmins, teachers, ordinary people, extraordinary people, and everyone in between. We welcome you. You may wear a baby sling, hijab, a kippah, leather, an XXXL t-shirt, a pentacle, a political badge, a rainbow, a rosary, tattoos, or something we can only dream of. You may carry a guitar or walking cane or a 15 year old laptop. Conservative or liberal, libertarian or socialist \u2014 we believe it's possible for people of all viewpoints and persuasions to come together and learn from each other. We believe in the broad spectrum of individual and collective experience and in the inherent dignity of all people. We believe that amazing things happen when people from different worlds and world-views approach each other to create a conversation. We get excited about web development \u2014 from professional to amateur, from giant projects to simple apps, from the coder who's been doing this since the day Django was conceived in Kansas to the newbie who just started studying the Django tutorial today. We think accessibility for people with disabilities is a priority, not an afterthought. We think neurodiversity is a feature, not a bug. We believe in being inclusive, welcoming, and supportive of anyone who comes to us with good faith and the desire to build a community. There are a few diversity initiatives in the Django community, but there can always be more. We protect our diversity through our Code of Conduct and the team that applies it. We also call on you, as a member of the Django community, to proudly show your support. Be generous, understanding and respectful to your fellow Djangonauts. Seek out newcomers and help them feel like they belong. Listen with empathy when someone has a different perspective. Talk to someone if you notice that something could be better. We have enough experience to know that we won't get any of this perfect on the first try. But we have enough hope, energy, and idealism to want to learn things we don't know now. We may not be able to satisfy everyone, but we can certainly work to avoid excluding anyone. And we promise that if we get it wrong, we'll listen carefully and respectfully to you when you point it out to us, and we'll do our best to make good on our mistakes. We think our technical experience is important, but we think our community experience is more important. We know what goes wrong when organizations say one thing and do another, or when they refuse to say anything at all. We believe that keeping the Django Software Foundation transparent is just as important as keeping our servers stable. We work with the Django web framework, and we invite everyone to contribute, to the core Django code, the ecosystem of Django packages, and the community. Come build the web with us. Original text courtesy of the Dreamwidth . Questions? If you have questions, feel free to contact us . Back to Top Django Community Diversity Statement Diversity Statement Changes License All content on this page is licensed under a Creative Commons Attribution license. Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://docs.djangoproject.com/en/stable/topics/db/models/": {
    "url": "https://docs.djangoproject.com/en/stable/topics/db/models/",
    "content": "Models | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help el es fr id it ja ko pl pt-br zh-hans Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.2 dev Documentation version: 5.1 Models \u00b6 A model is the single, definitive source of information about your data. It\ncontains the essential fields and behaviors of the data you\u2019re storing.\nGenerally, each model maps to a single database table. The basics: Each model is a Python class that subclasses django.db.models.Model . Each attribute of the model represents a database field. With all of this, Django gives you an automatically-generated\ndatabase-access API; see Making queries . Quick example \u00b6 This example model defines a Person , which has a first_name and last_name : from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) first_name and last_name are fields of the model. Each field is\nspecified as a class attribute, and each attribute maps to a database column. The above Person model would create a database table like this: CREATE TABLE myapp_person ( \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY , \"first_name\" varchar ( 30 ) NOT NULL , \"last_name\" varchar ( 30 ) NOT NULL ); Some technical notes: The name of the table, myapp_person , is automatically derived from\nsome model metadata but can be overridden. See Table names for more\ndetails. An id field is added automatically, but this behavior can be\noverridden. See Automatic primary key fields . The CREATE TABLE SQL in this example is formatted using PostgreSQL\nsyntax, but it\u2019s worth noting Django uses SQL tailored to the database\nbackend specified in your settings file . Using models \u00b6 Once you have defined your models, you need to tell Django you\u2019re going to use those models. Do this by editing your settings file and changing the INSTALLED_APPS setting to add the name of the module that contains\nyour models.py . For example, if the models for your application live in the module myapp.models (the package structure that is created for an\napplication by the manage.py startapp script), INSTALLED_APPS should read, in part: INSTALLED_APPS = [ # ... \"myapp\" , # ... ] When you add new apps to INSTALLED_APPS , be sure to run manage.py migrate , optionally making migrations\nfor them first with manage.py makemigrations . Fields \u00b6 The most important part of a model \u2013 and the only required part of a model \u2013\nis the list of database fields it defines. Fields are specified by class\nattributes. Be careful not to choose field names that conflict with the models API like clean , save , or delete . Example: from django.db import models class Musician ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) instrument = models . CharField ( max_length = 100 ) class Album ( models . Model ): artist = models . ForeignKey ( Musician , on_delete = models . CASCADE ) name = models . CharField ( max_length = 100 ) release_date = models . DateField () num_stars = models . IntegerField () Field types \u00b6 Each field in your model should be an instance of the appropriate Field class. Django uses the field class types to\ndetermine a few things: The column type, which tells the database what kind of data to store (e.g. INTEGER , VARCHAR , TEXT ). The default HTML widget to use when rendering a form\nfield (e.g. <input type=\"text\"> , <select> ). The minimal validation requirements, used in Django\u2019s admin and in\nautomatically-generated forms. Django ships with dozens of built-in field types; you can find the complete list\nin the model field reference . You can easily write\nyour own fields if Django\u2019s built-in ones don\u2019t do the trick; see How to create custom model fields . Field options \u00b6 Each field takes a certain set of field-specific arguments (documented in the model field reference ). For example, CharField (and its subclasses) require a max_length argument which specifies the size\nof the VARCHAR database field used to store the data. There\u2019s also a set of common arguments available to all field types. All are\noptional. They\u2019re fully explained in the reference , but here\u2019s a quick summary of the most often-used\nones: null If True , Django will store empty values as NULL in the database.\nDefault is False . blank If True , the field is allowed to be blank. Default is False . Note that this is different than null . null is purely database-related, whereas blank is validation-related. If a field has blank=True , form validation will\nallow entry of an empty value. If a field has blank=False , the field will be required. choices A sequence of 2-value tuples, a mapping , an enumeration type , or a callable (that\nexpects no arguments and returns any of the previous formats), to use as\nchoices for this field. If this is given, the default form widget will be a\nselect box instead of the standard text field and will limit choices to the\nchoices given. A choices list looks like this: YEAR_IN_SCHOOL_CHOICES = [ ( \"FR\" , \"Freshman\" ), ( \"SO\" , \"Sophomore\" ), ( \"JR\" , \"Junior\" ), ( \"SR\" , \"Senior\" ), ( \"GR\" , \"Graduate\" ), ] Note A new migration is created each time the order of choices changes. The first element in each tuple is the value that will be stored in the\ndatabase. The second element is displayed by the field\u2019s form widget. Given a model instance, the display value for a field with choices can\nbe accessed using the get_FOO_display() method. For example: from django.db import models class Person ( models . Model ): SHIRT_SIZES = { \"S\" : \"Small\" , \"M\" : \"Medium\" , \"L\" : \"Large\" , } name = models . CharField ( max_length = 60 ) shirt_size = models . CharField ( max_length = 1 , choices = SHIRT_SIZES ) >>> p = Person ( name = \"Fred Flintstone\" , shirt_size = \"L\" ) >>> p . save () >>> p . shirt_size 'L' >>> p . get_shirt_size_display () 'Large' You can also use enumeration classes to define choices in a concise\nway: from django.db import models class Runner ( models . Model ): MedalType = models . TextChoices ( \"MedalType\" , \"GOLD SILVER BRONZE\" ) name = models . CharField ( max_length = 60 ) medal = models . CharField ( blank = True , choices = MedalType , max_length = 10 ) Further examples are available in the model field reference . Changed in Django 5.0: Support for mappings and callables was added. default The default value for the field. This can be a value or a callable\nobject. If callable it will be called every time a new object is\ncreated. db_default The database-computed default value for the field. This can be a literal\nvalue or a database function. If both db_default and Field.default are set, default will\ntake precedence when creating instances in Python code. db_default will\nstill be set at the database level and will be used when inserting rows\noutside of the ORM or when adding a new field in a migration. help_text Extra \u201chelp\u201d text to be displayed with the form widget. It\u2019s useful for\ndocumentation even if your field isn\u2019t used on a form. primary_key If True , this field is the primary key for the model. If you don\u2019t specify primary_key=True for\nany fields in your model, Django will automatically add an IntegerField to hold the primary key, so you don\u2019t need to set primary_key=True on any of your fields\nunless you want to override the default primary-key behavior. For more,\nsee Automatic primary key fields . The primary key field is read-only. If you change the value of the primary\nkey on an existing object and then save it, a new object will be created\nalongside the old one. For example: from django.db import models class Fruit ( models . Model ): name = models . CharField ( max_length = 100 , primary_key = True ) >>> fruit = Fruit . objects . create ( name = \"Apple\" ) >>> fruit . name = \"Pear\" >>> fruit . save () >>> Fruit . objects . values_list ( \"name\" , flat = True ) <QuerySet ['Apple', 'Pear']> unique If True , this field must be unique throughout the table. Again, these are just short descriptions of the most common field options. Full\ndetails can be found in the common model field option reference . Automatic primary key fields \u00b6 By default, Django gives each model an auto-incrementing primary key with the\ntype specified per app in AppConfig.default_auto_field or globally in the DEFAULT_AUTO_FIELD setting. For example: id = models . BigAutoField ( primary_key = True ) If you\u2019d like to specify a custom primary key, specify primary_key=True on one of your fields. If Django\nsees you\u2019ve explicitly set Field.primary_key , it won\u2019t add the automatic id column. Each model requires exactly one field to have primary_key=True (either explicitly declared or automatically added). Verbose field names \u00b6 Each field type, except for ForeignKey , ManyToManyField and OneToOneField , takes an optional first positional\nargument \u2013 a verbose name. If the verbose name isn\u2019t given, Django will\nautomatically create it using the field\u2019s attribute name, converting underscores\nto spaces. In this example, the verbose name is \"person's first name\" : first_name = models . CharField ( \"person's first name\" , max_length = 30 ) In this example, the verbose name is \"first name\" : first_name = models . CharField ( max_length = 30 ) ForeignKey , ManyToManyField and OneToOneField require the first argument to be a\nmodel class, so use the verbose_name keyword argument: poll = models . ForeignKey ( Poll , on_delete = models . CASCADE , verbose_name = \"the related poll\" , ) sites = models . ManyToManyField ( Site , verbose_name = \"list of sites\" ) place = models . OneToOneField ( Place , on_delete = models . CASCADE , verbose_name = \"related place\" , ) The convention is not to capitalize the first letter of the verbose_name . Django will automatically capitalize the first\nletter where it needs to. Relationships \u00b6 Clearly, the power of relational databases lies in relating tables to each\nother. Django offers ways to define the three most common types of database\nrelationships: many-to-one, many-to-many and one-to-one. Many-to-one relationships \u00b6 To define a many-to-one relationship, use django.db.models.ForeignKey .\nYou use it just like any other Field type: by\nincluding it as a class attribute of your model. ForeignKey requires a positional argument: the class\nto which the model is related. For example, if a Car model has a Manufacturer \u2013 that is, a Manufacturer makes multiple cars but each Car only has one Manufacturer \u2013 use the following definitions: from django.db import models class Manufacturer ( models . Model ): # ... pass class Car ( models . Model ): manufacturer = models . ForeignKey ( Manufacturer , on_delete = models . CASCADE ) # ... You can also create recursive relationships (an\nobject with a many-to-one relationship to itself) and relationships to\nmodels not yet defined ; see the model field\nreference for details. It\u2019s suggested, but not required, that the name of a ForeignKey field ( manufacturer in the example\nabove) be the name of the model, lowercase. You can call the field whatever you\nwant. For example: class Car ( models . Model ): company_that_makes_it = models . ForeignKey ( Manufacturer , on_delete = models . CASCADE , ) # ... See also ForeignKey fields accept a number of extra\narguments which are explained in the model field reference . These options help define how the relationship\nshould work; all are optional. For details on accessing backwards-related objects, see the Following relationships backward example . For sample code, see the Many-to-one relationship model example . Many-to-many relationships \u00b6 To define a many-to-many relationship, use ManyToManyField . You use it just like any other Field type: by including it as a class attribute of\nyour model. ManyToManyField requires a positional argument: the\nclass to which the model is related. For example, if a Pizza has multiple Topping objects \u2013 that is, a Topping can be on multiple pizzas and each Pizza has multiple toppings\n\u2013 here\u2019s how you\u2019d represent that: from django.db import models class Topping ( models . Model ): # ... pass class Pizza ( models . Model ): # ... toppings = models . ManyToManyField ( Topping ) As with ForeignKey , you can also create recursive relationships (an object with a\nmany-to-many relationship to itself) and relationships to models not yet\ndefined . It\u2019s suggested, but not required, that the name of a ManyToManyField ( toppings in the example above)\nbe a plural describing the set of related model objects. It doesn\u2019t matter which model has the ManyToManyField , but you should only put it in one\nof the models \u2013 not both. Generally, ManyToManyField instances should go in\nthe object that\u2019s going to be edited on a form. In the above example, toppings is in Pizza (rather than Topping having a pizzas ManyToManyField ) because it\u2019s more natural to think\nabout a pizza having toppings than a topping being on multiple pizzas. The way\nit\u2019s set up above, the Pizza form would let users select the toppings. See also See the Many-to-many relationship model example for a full example. ManyToManyField fields also accept a number of\nextra arguments which are explained in the model field reference . These options help define how the relationship\nshould work; all are optional. Extra fields on many-to-many relationships \u00b6 When you\u2019re only dealing with many-to-many relationships such as mixing and\nmatching pizzas and toppings, a standard ManyToManyField is all you need. However, sometimes\nyou may need to associate data with the relationship between two models. For example, consider the case of an application tracking the musical groups\nwhich musicians belong to. There is a many-to-many relationship between a person\nand the groups of which they are a member, so you could use a ManyToManyField to represent this relationship.\nHowever, there is a lot of detail about the membership that you might want to\ncollect, such as the date at which the person joined the group. For these situations, Django allows you to specify the model that will be used\nto govern the many-to-many relationship. You can then put extra fields on the\nintermediate model. The intermediate model is associated with the ManyToManyField using the through argument to point to the model\nthat will act as an intermediary. For our musician example, the code would look\nsomething like this: from django.db import models class Person ( models . Model ): name = models . CharField ( max_length = 128 ) def __str__ ( self ): return self . name class Group ( models . Model ): name = models . CharField ( max_length = 128 ) members = models . ManyToManyField ( Person , through = \"Membership\" ) def __str__ ( self ): return self . name class Membership ( models . Model ): person = models . ForeignKey ( Person , on_delete = models . CASCADE ) group = models . ForeignKey ( Group , on_delete = models . CASCADE ) date_joined = models . DateField () invite_reason = models . CharField ( max_length = 64 ) class Meta : constraints = [ models . UniqueConstraint ( fields = [ \"person\" , \"group\" ], name = \"unique_person_group\" ) ] When you set up the intermediary model, you explicitly specify foreign\nkeys to the models that are involved in the many-to-many relationship. This\nexplicit declaration defines how the two models are related. If you don\u2019t want multiple associations between the same instances, add a UniqueConstraint including the from and to fields. Django\u2019s automatically generated many-to-many tables include such a\nconstraint. There are a few restrictions on the intermediate model: Your intermediate model must contain one - and only one - foreign key\nto the source model (this would be Group in our example), or you must\nexplicitly specify the foreign keys Django should use for the relationship\nusing ManyToManyField.through_fields .\nIf you have more than one foreign key and through_fields is not\nspecified, a validation error will be raised. A similar restriction applies\nto the foreign key to the target model (this would be Person in our\nexample). For a model which has a many-to-many relationship to itself through an\nintermediary model, two foreign keys to the same model are permitted, but\nthey will be treated as the two (different) sides of the many-to-many\nrelationship. If there are more than two foreign keys though, you\nmust also specify through_fields as above, or a validation error\nwill be raised. Now that you have set up your ManyToManyField to use\nyour intermediary model ( Membership , in this case), you\u2019re ready to start\ncreating some many-to-many relationships. You do this by creating instances of\nthe intermediate model: >>> ringo = Person . objects . create ( name = \"Ringo Starr\" ) >>> paul = Person . objects . create ( name = \"Paul McCartney\" ) >>> beatles = Group . objects . create ( name = \"The Beatles\" ) >>> m1 = Membership ( ... person = ringo , ... group = beatles , ... date_joined = date ( 1962 , 8 , 16 ), ... invite_reason = \"Needed a new drummer.\" , ... ) >>> m1 . save () >>> beatles . members . all () <QuerySet [<Person: Ringo Starr>]> >>> ringo . group_set . all () <QuerySet [<Group: The Beatles>]> >>> m2 = Membership . objects . create ( ... person = paul , ... group = beatles , ... date_joined = date ( 1960 , 8 , 1 ), ... invite_reason = \"Wanted to form a band.\" , ... ) >>> beatles . members . all () <QuerySet [<Person: Ringo Starr>, <Person: Paul McCartney>]> You can also use add() , create() , or set() to create\nrelationships, as long as you specify through_defaults for any required\nfields: >>> beatles . members . add ( john , through_defaults = { \"date_joined\" : date ( 1960 , 8 , 1 )}) >>> beatles . members . create ( ... name = \"George Harrison\" , through_defaults = { \"date_joined\" : date ( 1960 , 8 , 1 )} ... ) >>> beatles . members . set ( ... [ john , paul , ringo , george ], through_defaults = { \"date_joined\" : date ( 1960 , 8 , 1 )} ... ) You may prefer to create instances of the intermediate model directly. If the custom through table defined by the intermediate model does not enforce\nuniqueness on the (model1, model2) pair, allowing multiple values, the remove() call will\nremove all intermediate model instances: >>> Membership . objects . create ( ... person = ringo , ... group = beatles , ... date_joined = date ( 1968 , 9 , 4 ), ... invite_reason = \"You've been gone for a month and we miss you.\" , ... ) >>> beatles . members . all () <QuerySet [<Person: Ringo Starr>, <Person: Paul McCartney>, <Person: Ringo Starr>]> >>> # This deletes both of the intermediate model instances for Ringo Starr >>> beatles . members . remove ( ringo ) >>> beatles . members . all () <QuerySet [<Person: Paul McCartney>]> The clear() method can be used to remove all many-to-many relationships for an instance: >>> # Beatles have broken up >>> beatles . members . clear () >>> # Note that this deletes the intermediate model instances >>> Membership . objects . all () <QuerySet []> Once you have established the many-to-many relationships, you can issue\nqueries. Just as with normal many-to-many relationships, you can query using\nthe attributes of the many-to-many-related model: # Find all the groups with a member whose name starts with 'Paul' >>> Group . objects . filter ( members__name__startswith = \"Paul\" ) <QuerySet [<Group: The Beatles>]> As you are using an intermediate model, you can also query on its attributes: # Find all the members of the Beatles that joined after 1 Jan 1961 >>> Person . objects . filter ( ... group__name = \"The Beatles\" , membership__date_joined__gt = date ( 1961 , 1 , 1 ) ... ) <QuerySet [<Person: Ringo Starr]> If you need to access a membership\u2019s information you may do so by directly\nquerying the Membership model: >>> ringos_membership = Membership . objects . get ( group = beatles , person = ringo ) >>> ringos_membership . date_joined datetime.date(1962, 8, 16) >>> ringos_membership . invite_reason 'Needed a new drummer.' Another way to access the same information is by querying the many-to-many reverse relationship from a Person object: >>> ringos_membership = ringo . membership_set . get ( group = beatles ) >>> ringos_membership . date_joined datetime.date(1962, 8, 16) >>> ringos_membership . invite_reason 'Needed a new drummer.' One-to-one relationships \u00b6 To define a one-to-one relationship, use OneToOneField . You use it just like any other Field type: by including it as a class attribute of your model. This is most useful on the primary key of an object when that object \u201cextends\u201d\nanother object in some way. OneToOneField requires a positional argument: the\nclass to which the model is related. For example, if you were building a database of \u201cplaces\u201d, you would\nbuild pretty standard stuff such as address, phone number, etc. in the\ndatabase. Then, if you wanted to build a database of restaurants on\ntop of the places, instead of repeating yourself and replicating those\nfields in the Restaurant model, you could make Restaurant have\na OneToOneField to Place (because a\nrestaurant \u201cis a\u201d place; in fact, to handle this you\u2019d typically use inheritance , which involves an implicit\none-to-one relation). As with ForeignKey , a recursive relationship can be defined and references to as-yet\nundefined models can be made. See also See the One-to-one relationship model example for a full example. OneToOneField fields also accept an optional parent_link argument. OneToOneField classes used to automatically become\nthe primary key on a model. This is no longer true (although you can manually\npass in the primary_key argument if you like).\nThus, it\u2019s now possible to have multiple fields of type OneToOneField on a single model. Models across files \u00b6 It\u2019s perfectly OK to relate a model to one from another app. To do this, import\nthe related model at the top of the file where your model is defined. Then,\nrefer to the other model class wherever needed. For example: from django.db import models from geography.models import ZipCode class Restaurant ( models . Model ): # ... zip_code = models . ForeignKey ( ZipCode , on_delete = models . SET_NULL , blank = True , null = True , ) Alternatively, you can use a lazy reference to the related model, specified as\na string in the format \"app_label.ModelName\" . This does not require the\nrelated model to be imported. For example: from django.db import models class Restaurant ( models . Model ): # ... zip_code = models . ForeignKey ( \"geography.ZipCode\" , on_delete = models . SET_NULL , blank = True , null = True , ) See lazy relationships for more details. Field name restrictions \u00b6 Django places some restrictions on model field names: A field name cannot be a Python reserved word, because that would result\nin a Python syntax error. For example: class Example(models.Model):\n    pass = models.IntegerField() # 'pass' is a reserved word! A field name cannot contain more than one underscore in a row, due to\nthe way Django\u2019s query lookup syntax works. For example: class Example ( models . Model ): foo__bar = models . IntegerField () # 'foo__bar' has two underscores! A field name cannot end with an underscore, for similar reasons. These limitations can be worked around, though, because your field name doesn\u2019t\nnecessarily have to match your database column name. See the db_column option. SQL reserved words, such as join , where or select , are allowed as\nmodel field names, because Django escapes all database table names and column\nnames in every underlying SQL query. It uses the quoting syntax of your\nparticular database engine. Custom field types \u00b6 If one of the existing model fields cannot be used to fit your purposes, or if\nyou wish to take advantage of some less common database column types, you can\ncreate your own field class. Full coverage of creating your own fields is\nprovided in How to create custom model fields . Meta options \u00b6 Give your model metadata by using an inner class Meta , like so: from django.db import models class Ox ( models . Model ): horn_length = models . IntegerField () class Meta : ordering = [ \"horn_length\" ] verbose_name_plural = \"oxen\" Model metadata is \u201canything that\u2019s not a field\u201d, such as ordering options\n( ordering ), database table name ( db_table ), or\nhuman-readable singular and plural names ( verbose_name and verbose_name_plural ). None are required, and adding class Meta to a model is completely optional. A complete list of all possible Meta options can be found in the model\noption reference . Model attributes \u00b6 objects The most important attribute of a model is the Manager . It\u2019s the interface through which\ndatabase query operations are provided to Django models and is used to retrieve the instances from the database. If no\ncustom Manager is defined, the default name is objects . Managers are only accessible via\nmodel classes, not the model instances. Model methods \u00b6 Define custom methods on a model to add custom \u201crow-level\u201d functionality to your\nobjects. Whereas Manager methods are intended to do\n\u201ctable-wide\u201d things, model methods should act on a particular model instance. This is a valuable technique for keeping business logic in one place \u2013 the\nmodel. For example, this model has a few custom methods: from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 50 ) last_name = models . CharField ( max_length = 50 ) birth_date = models . DateField () def baby_boomer_status ( self ): \"Returns the person's baby-boomer status.\" import datetime if self . birth_date < datetime . date ( 1945 , 8 , 1 ): return \"Pre-boomer\" elif self . birth_date < datetime . date ( 1965 , 1 , 1 ): return \"Baby boomer\" else : return \"Post-boomer\" @property def full_name ( self ): \"Returns the person's full name.\" return f \" { self . first_name } { self . last_name } \" The last method in this example is a property . The model instance reference has a complete list\nof methods automatically given to each model .\nYou can override most of these \u2013 see overriding predefined model methods ,\nbelow \u2013 but there are a couple that you\u2019ll almost always want to define: __str__() A Python \u201cmagic method\u201d that returns a string representation of any\nobject. This is what Python and Django will use whenever a model\ninstance needs to be coerced and displayed as a plain string. Most\nnotably, this happens when you display an object in an interactive\nconsole or in the admin. You\u2019ll always want to define this method; the default isn\u2019t very helpful\nat all. get_absolute_url() This tells Django how to calculate the URL for an object. Django uses\nthis in its admin interface, and any time it needs to figure out a URL\nfor an object. Any object that has a URL that uniquely identifies it should define this\nmethod. Overriding predefined model methods \u00b6 There\u2019s another set of model methods that\nencapsulate a bunch of database behavior that you\u2019ll want to customize. In\nparticular you\u2019ll often want to change the way save() and delete() work. You\u2019re free to override these methods (and any other model method) to alter\nbehavior. A classic use-case for overriding the built-in methods is if you want something\nto happen whenever you save an object. For example (see save() for documentation of the parameters it accepts): from django.db import models class Blog ( models . Model ): name = models . CharField ( max_length = 100 ) tagline = models . TextField () def save ( self , ** kwargs ): do_something () super () . save ( ** kwargs ) # Call the \"real\" save() method. do_something_else () You can also prevent saving: from django.db import models class Blog ( models . Model ): name = models . CharField ( max_length = 100 ) tagline = models . TextField () def save ( self , ** kwargs ): if self . name == \"Yoko Ono's blog\" : return # Yoko shall never have her own blog! else : super () . save ( ** kwargs ) # Call the \"real\" save() method. It\u2019s important to remember to call the superclass method \u2013 that\u2019s\nthat super().save(**kwargs) business \u2013 to ensure that the object still\ngets saved into the database. If you forget to call the superclass method, the\ndefault behavior won\u2019t happen and the database won\u2019t get touched. It\u2019s also important that you pass through the arguments that can be\npassed to the model method \u2013 that\u2019s what the **kwargs bit does. Django\nwill, from time to time, extend the capabilities of built-in model methods,\nadding new keyword arguments. If you use **kwargs in your method\ndefinitions, you are guaranteed that your code will automatically support those\narguments when they are added. If you wish to update a field value in the save() method, you may\nalso want to have this field added to the update_fields keyword argument.\nThis will ensure the field is saved when update_fields is specified. For\nexample: from django.db import models from django.utils.text import slugify class Blog ( models . Model ): name = models . CharField ( max_length = 100 ) slug = models . TextField () def save ( self , ** kwargs ): self . slug = slugify ( self . name ) if ( update_fields := kwargs . get ( \"update_fields\" ) ) is not None and \"name\" in update_fields : kwargs [ \"update_fields\" ] = { \"slug\" } . union ( update_fields ) super () . save ( ** kwargs ) See Specifying which fields to save for more details. Overridden model methods are not called on bulk operations Note that the delete() method for an object is not\nnecessarily called when deleting objects in bulk using a\nQuerySet or as a result of a cascading delete . To ensure customized\ndelete logic gets executed, you can use pre_delete and/or post_delete signals. Unfortunately, there isn\u2019t a workaround when creating or updating objects in bulk,\nsince none of save() , pre_save , and post_save are called. Executing custom SQL \u00b6 Another common pattern is writing custom SQL statements in model methods and\nmodule-level methods. For more details on using raw SQL, see the documentation\non using raw SQL . Model inheritance \u00b6 Model inheritance in Django works almost identically to the way normal\nclass inheritance works in Python, but the basics at the beginning of the page\nshould still be followed. That means the base class should subclass django.db.models.Model . The only decision you have to make is whether you want the parent models to be\nmodels in their own right (with their own database tables), or if the parents\nare just holders of common information that will only be visible through the\nchild models. There are three styles of inheritance that are possible in Django. Often, you will just want to use the parent class to hold information that\nyou don\u2019t want to have to type out for each child model. This class isn\u2019t\ngoing to ever be used in isolation, so Abstract base classes are\nwhat you\u2019re after. If you\u2019re subclassing an existing model (perhaps something from another\napplication entirely) and want each model to have its own database table, Multi-table inheritance is the way to go. Finally, if you only want to modify the Python-level behavior of a model,\nwithout changing the models fields in any way, you can use Proxy models . Abstract base classes \u00b6 Abstract base classes are useful when you want to put some common\ninformation into a number of other models. You write your base class\nand put abstract=True in the Meta class. This model will then not be used to create any database\ntable. Instead, when it is used as a base class for other models, its\nfields will be added to those of the child class. An example: from django.db import models class CommonInfo ( models . Model ): name = models . CharField ( max_length = 100 ) age = models . PositiveIntegerField () class Meta : abstract = True class Student ( CommonInfo ): home_group = models . CharField ( max_length = 5 ) The Student model will have three fields: name , age and home_group . The CommonInfo model cannot be used as a normal Django\nmodel, since it is an abstract base class. It does not generate a database\ntable or have a manager, and cannot be instantiated or saved directly. Fields inherited from abstract base classes can be overridden with another\nfield or value, or be removed with None . For many uses, this type of model inheritance will be exactly what you want.\nIt provides a way to factor out common information at the Python level, while\nstill only creating one database table per child model at the database level. Meta inheritance \u00b6 When an abstract base class is created, Django makes any Meta inner class you declared in the base class available as an\nattribute. If a child class does not declare its own Meta class, it will inherit the parent\u2019s Meta . If the child wants to\nextend the parent\u2019s Meta class, it can subclass it. For example: from django.db import models class CommonInfo ( models . Model ): # ... class Meta : abstract = True ordering = [ \"name\" ] class Student ( CommonInfo ): # ... class Meta ( CommonInfo . Meta ): db_table = \"student_info\" Django does make one adjustment to the Meta class of an\nabstract base class: before installing the Meta attribute, it sets abstract=False . This means that children of abstract\nbase classes don\u2019t automatically become abstract classes themselves. To make\nan abstract base class that inherits from another abstract base class, you need\nto explicitly set abstract=True on the child. Some attributes won\u2019t make sense to include in the Meta class of an\nabstract base class. For example, including db_table would mean that all\nthe child classes (the ones that don\u2019t specify their own Meta ) would use\nthe same database table, which is almost certainly not what you want. Due to the way Python inheritance works, if a child class inherits from\nmultiple abstract base classes, only the Meta options\nfrom the first listed class will be inherited by default. To inherit Meta options from multiple abstract base classes, you must\nexplicitly declare the Meta inheritance. For example: from django.db import models class CommonInfo ( models . Model ): name = models . CharField ( max_length = 100 ) age = models . PositiveIntegerField () class Meta : abstract = True ordering = [ \"name\" ] class Unmanaged ( models . Model ): class Meta : abstract = True managed = False class Student ( CommonInfo , Unmanaged ): home_group = models . CharField ( max_length = 5 ) class Meta ( CommonInfo . Meta , Unmanaged . Meta ): pass Be careful with related_name and related_query_name \u00b6 If you are using related_name or related_query_name on a ForeignKey or ManyToManyField , you must always specify a unique reverse name and query\nname for the field. This would normally cause a problem in abstract base\nclasses, since the fields on this class are included into each of the child\nclasses, with exactly the same values for the attributes (including related_name and related_query_name ) each time. To work around this problem, when you are using related_name or related_query_name in an abstract base\nclass (only), part of the value should contain '%(app_label)s' and '%(class)s' . '%(class)s' is replaced by the lowercased name of the child class that\nthe field is used in. '%(app_label)s' is replaced by the lowercased name of the app the child\nclass is contained within. Each installed application name must be unique and\nthe model class names within each app must also be unique, therefore the\nresulting name will end up being different. For example, given an app common/models.py : from django.db import models class Base ( models . Model ): m2m = models . ManyToManyField ( OtherModel , related_name = \" %(app_label)s _ %(class)s _related\" , related_query_name = \" %(app_label)s _ %(class)s s\" , ) class Meta : abstract = True class ChildA ( Base ): pass class ChildB ( Base ): pass Along with another app rare/models.py : from common.models import Base class ChildB ( Base ): pass The reverse name of the common.ChildA.m2m field will be common_childa_related and the reverse query name will be common_childas .\nThe reverse name of the common.ChildB.m2m field will be common_childb_related and the reverse query name will be common_childbs . Finally, the reverse name of the rare.ChildB.m2m field\nwill be rare_childb_related and the reverse query name will be rare_childbs . It\u2019s up to you how you use the '%(class)s' and '%(app_label)s' portion to construct your related name or related query name\nbut if you forget to use it, Django will raise errors when you perform system\nchecks (or run migrate ). If you don\u2019t specify a related_name attribute for a field in an abstract base class, the default reverse name will\nbe the name of the child class followed by '_set' , just as it normally\nwould be if you\u2019d declared the field directly on the child class. For example,\nin the above code, if the related_name attribute was omitted, the reverse name for the m2m field would be childa_set in the ChildA case and childb_set for the ChildB field. Multi-table inheritance \u00b6 The second type of model inheritance supported by Django is when each model in\nthe hierarchy is a model all by itself. Each model corresponds to its own\ndatabase table and can be queried and created individually. The inheritance\nrelationship introduces links between the child model and each of its parents\n(via an automatically-created OneToOneField ).\nFor example: from django.db import models class Place ( models . Model ): name = models . CharField ( max_length = 50 ) address = models . CharField ( max_length = 80 ) class Restaurant ( Place ): serves_hot_dogs = models . BooleanField ( default = False ) serves_pizza = models . BooleanField ( default = False ) All of the fields of Place will also be available in Restaurant ,\nalthough the data will reside in a different database table. So these are both\npossible: >>> Place . objects . filter ( name = \"Bob's Cafe\" ) >>> Restaurant . objects . filter ( name = \"Bob's Cafe\" ) If you have a Place that is also a Restaurant , you can get from the Place object to the Restaurant object by using the lowercase version of\nthe model name: >>> p = Place . objects . get ( id = 12 ) # If p is a Restaurant object, this will give the child class: >>> p . restaurant <Restaurant: ...> However, if p in the above example was not a Restaurant (it had been\ncreated directly as a Place object or was the parent of some other class),\nreferring to p.restaurant would raise a Restaurant.DoesNotExist exception. The automatically-created OneToOneField on Restaurant that links it to Place looks like this: place_ptr = models . OneToOneField ( Place , on_delete = models . CASCADE , parent_link = True , primary_key = True , ) You can override that field by declaring your own OneToOneField with parent_link=True on Restaurant . Meta and multi-table inheritance \u00b6 In the multi-table inheritance situation, it doesn\u2019t make sense for a child\nclass to inherit from its parent\u2019s Meta class. All the Meta options\nhave already been applied to the parent class and applying them again would\nnormally only lead to contradictory behavior (this is in contrast with the\nabstract base class case, where the base class doesn\u2019t exist in its own\nright). So a child model does not have access to its parent\u2019s Meta class. However, there are a few limited cases where the child\ninherits behavior from the parent: if the child does not specify an ordering attribute or a get_latest_by attribute, it will inherit\nthese from its parent. If the parent has an ordering and you don\u2019t want the child to have any natural\nordering, you can explicitly disable it: class ChildModel ( ParentModel ): # ... class Meta : # Remove parent's ordering effect ordering = [] Inheritance and reverse relations \u00b6 Because multi-table inheritance uses an implicit OneToOneField to link the child and\nthe parent, it\u2019s possible to move from the parent down to the child,\nas in the above example. However, this uses up the name that is the\ndefault related_name value for ForeignKey and ManyToManyField relations.  If you\nare putting those types of relations on a subclass of the parent model, you must specify the related_name attribute on each such field. If you forget, Django will raise a validation\nerror. For example, using the above Place class again, let\u2019s create another\nsubclass with a ManyToManyField : class Supplier ( Place ): customers = models . ManyToManyField ( Place ) This results in the error: Reverse query name for 'Supplier.customers' clashes with reverse query name for 'Supplier.place_ptr'. HINT: Add or change a related_name argument to the definition for 'Supplier.customers' or 'Supplier.place_ptr'. Adding related_name to the customers field as follows would resolve the\nerror: models.ManyToManyField(Place, related_name='provider') . Specifying the parent link field \u00b6 As mentioned, Django will automatically create a OneToOneField linking your child\nclass back to any non-abstract parent models. If you want to control the\nname of the attribute linking back to the parent, you can create your\nown OneToOneField and set parent_link=True to indicate that your field is the link back to the parent class. Proxy models \u00b6 When using multi-table inheritance , a new\ndatabase table is created for each subclass of a model. This is usually the\ndesired behavior, since the subclass needs a place to store any additional\ndata fields that are not present on the base class. Sometimes, however, you\nonly want to change the Python behavior of a model \u2013 perhaps to change the\ndefault manager, or add a new method. This is what proxy model inheritance is for: creating a proxy for the\noriginal model. You can create, delete and update instances of the proxy model\nand all the data will be saved as if you were using the original (non-proxied)\nmodel. The difference is that you can change things like the default model\nordering or the default manager in the proxy, without having to alter the\noriginal. Proxy models are declared like normal models. You tell Django that it\u2019s a\nproxy model by setting the proxy attribute of\nthe Meta class to True . For example, suppose you want to add a method to the Person model. You can do it like this: from django.db import models class Person ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) class MyPerson ( Person ): class Meta : proxy = True def do_something ( self ): # ... pass The MyPerson class operates on the same database table as its parent Person class. In particular, any new instances of Person will also be\naccessible through MyPerson , and vice-versa: >>> p = Person . objects . create ( first_name = \"foobar\" ) >>> MyPerson . objects . get ( first_name = \"foobar\" ) <MyPerson: foobar> You could also use a proxy model to define a different default ordering on\na model. You might not always want to order the Person model, but regularly\norder by the last_name attribute when you use the proxy: class OrderedPerson ( Person ): class Meta : ordering = [ \"last_name\" ] proxy = True Now normal Person queries will be unordered\nand OrderedPerson queries will be ordered by last_name . Proxy models inherit Meta attributes in the same way as regular\nmodels . QuerySet s still return the model that was requested \u00b6 There is no way to have Django return, say, a MyPerson object whenever you\nquery for Person objects. A queryset for Person objects will return\nthose types of objects. The whole point of proxy objects is that code relying\non the original Person will use those and your own code can use the\nextensions you included (that no other code is relying on anyway). It is not\na way to replace the Person (or any other) model everywhere with something\nof your own creation. Base class restrictions \u00b6 A proxy model must inherit from exactly one non-abstract model class. You\ncan\u2019t inherit from multiple non-abstract models as the proxy model doesn\u2019t\nprovide any connection between the rows in the different database tables. A\nproxy model can inherit from any number of abstract model classes, providing\nthey do not define any model fields. A proxy model may also inherit from any\nnumber of proxy models that share a common non-abstract parent class. Proxy model managers \u00b6 If you don\u2019t specify any model managers on a proxy model, it inherits the\nmanagers from its model parents. If you define a manager on the proxy model,\nit will become the default, although any managers defined on the parent\nclasses will still be available. Continuing our example from above, you could change the default manager used\nwhen you query the Person model like this: from django.db import models class NewManager ( models . Manager ): # ... pass class MyPerson ( Person ): objects = NewManager () class Meta : proxy = True If you wanted to add a new manager to the Proxy, without replacing the\nexisting default, you can use the techniques described in the custom\nmanager documentation: create a base class\ncontaining the new managers and inherit that after the primary base class: # Create an abstract class for the new manager. class ExtraManagers ( models . Model ): secondary = NewManager () class Meta : abstract = True class MyPerson ( Person , ExtraManagers ): class Meta : proxy = True You probably won\u2019t need to do this very often, but, when you do, it\u2019s\npossible. Differences between proxy inheritance and unmanaged models \u00b6 Proxy model inheritance might look fairly similar to creating an unmanaged\nmodel, using the managed attribute on a\nmodel\u2019s Meta class. With careful setting of Meta.db_table you could create an unmanaged model that\nshadows an existing model and adds Python methods to it. However, that would be\nvery repetitive and fragile as you need to keep both copies synchronized if you\nmake any changes. On the other hand, proxy models are intended to behave exactly like the model\nthey are proxying for. They are always in sync with the parent model since they\ndirectly inherit its fields and managers. The general rules are: If you are mirroring an existing model or database table and don\u2019t want\nall the original database table columns, use Meta.managed=False .\nThat option is normally useful for modeling database views and tables\nnot under the control of Django. If you are wanting to change the Python-only behavior of a model, but\nkeep all the same fields as in the original, use Meta.proxy=True .\nThis sets things up so that the proxy model is an exact copy of the\nstorage structure of the original model when data is saved. Multiple inheritance \u00b6 Just as with Python\u2019s subclassing, it\u2019s possible for a Django model to inherit\nfrom multiple parent models. Keep in mind that normal Python name resolution\nrules apply. The first base class that a particular name (e.g. Meta ) appears in will be the one that is used; for example, this\nmeans that if multiple parents contain a Meta class,\nonly the first one is going to be used, and all others will be ignored. Generally, you won\u2019t need to inherit from multiple parents. The main use-case\nwhere this is useful is for \u201cmix-in\u201d classes: adding a particular extra\nfield or method to every class that inherits the mix-in. Try to keep your\ninheritance hierarchies as simple and straightforward as possible so that you\nwon\u2019t have to struggle to work out where a particular piece of information is\ncoming from. Note that inheriting from multiple models that have a common id primary\nkey field will raise an error. To properly use multiple inheritance, you can\nuse an explicit AutoField in the base models: class Article ( models . Model ): article_id = models . AutoField ( primary_key = True ) ... class Book ( models . Model ): book_id = models . AutoField ( primary_key = True ) ... class BookReview ( Book , Article ): pass Or use a common ancestor to hold the AutoField . This\nrequires using an explicit OneToOneField from each\nparent model to the common ancestor to avoid a clash between the fields that\nare automatically generated and inherited by the child: class Piece ( models . Model ): pass class Article ( Piece ): article_piece = models . OneToOneField ( Piece , on_delete = models . CASCADE , parent_link = True ) ... class Book ( Piece ): book_piece = models . OneToOneField ( Piece , on_delete = models . CASCADE , parent_link = True ) ... class BookReview ( Book , Article ): pass Field name \u201chiding\u201d is not permitted \u00b6 In normal Python class inheritance, it is permissible for a child class to\noverride any attribute from the parent class. In Django, this isn\u2019t usually\npermitted for model fields. If a non-abstract model base class has a field\ncalled author , you can\u2019t create another model field or define\nan attribute called author in any class that inherits from that base class. This restriction doesn\u2019t apply to model fields inherited from an abstract\nmodel. Such fields may be overridden with another field or value, or be removed\nby setting field_name = None . Warning Model managers are inherited from abstract base classes. Overriding an\ninherited field which is referenced by an inherited Manager may cause subtle bugs. See custom\nmanagers and model inheritance . Note Some fields define extra attributes on the model, e.g. a ForeignKey defines an extra attribute with _id appended to the field name, as well as related_name and related_query_name on the foreign model. These extra attributes cannot be overridden unless the field that defines\nit is changed or removed so that it no longer defines the extra attribute. Overriding fields in a parent model leads to difficulties in areas such as\ninitializing new instances (specifying which field is being initialized in Model.__init__ ) and serialization. These are features which normal Python\nclass inheritance doesn\u2019t have to deal with in quite the same way, so the\ndifference between Django model inheritance and Python class inheritance isn\u2019t\narbitrary. This restriction only applies to attributes which are Field instances. Normal Python attributes\ncan be overridden if you wish. It also only applies to the name of the\nattribute as Python sees it: if you are manually specifying the database\ncolumn name, you can have the same column name appearing in both a child and\nan ancestor model for multi-table inheritance (they are columns in two\ndifferent database tables). Django will raise a FieldError if you override\nany model field in any ancestor model. Note that because of the way fields are resolved during class definition, model\nfields inherited from multiple abstract parent models are resolved in a strict\ndepth-first order. This contrasts with standard Python MRO, which is resolved\nbreadth-first in cases of diamond shaped inheritance. This difference only\naffects complex model hierarchies, which (as per the advice above) you should\ntry to avoid. Organizing models in a package \u00b6 The manage.py startapp command creates an application\nstructure that includes a models.py file. If you have many models,\norganizing them in separate files may be useful. To do so, create a models package. Remove models.py and create a myapp/models/ directory with an __init__.py file and the files to\nstore your models. You must import the models in the __init__.py file. For example, if you had organic.py and synthetic.py in the models directory: myapp/models/__init__.py \u00b6 from .organic import Person from .synthetic import Robot Explicitly importing each model rather than using from .models import * has the advantages of not cluttering the namespace, making code more readable,\nand keeping code analysis tools useful. See also The Models Reference Covers all the model related APIs including model fields, related\nobjects, and QuerySet . Previous page and next page Models and databases Making queries Back to Top Additional Information Support Django! TWMO donated to the Django Software Foundation to support Django development. Donate today! Contents Models Quick example Using models Fields Field types Field options Automatic primary key fields Verbose field names Relationships Many-to-one relationships Many-to-many relationships Extra fields on many-to-many relationships One-to-one relationships Models across files Field name restrictions Custom field types Meta options Model attributes Model methods Overriding predefined model methods Executing custom SQL Model inheritance Abstract base classes Meta inheritance Be careful with related_name and related_query_name Multi-table inheritance Meta and multi-table inheritance Inheritance and reverse relations Specifying the parent link field Proxy models QuerySet s still return the model that was requested Base class restrictions Proxy model managers Differences between proxy inheritance and unmanaged models Multiple inheritance Field name \u201chiding\u201d is not permitted Organizing models in a package Browse Prev: Models and databases Next: Making queries Table of contents General Index Python Module Index You are here: Django 5.1 documentation Using Django Models and databases Models Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (Django 5.1): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://docs.djangoproject.com/en/dev/internals/organization/": {
    "url": "https://docs.djangoproject.com/en/dev/internals/organization/",
    "content": "Organization of the Django Project | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.1 5.2 Documentation version: development Organization of the Django Project \u00b6 Principles \u00b6 The Django Project is managed by a team of volunteers pursuing three goals: Driving the development of the Django web framework, Fostering the ecosystem of Django-related software, Leading the Django community in accordance with the values described in the Django Code of Conduct . The Django Project isn\u2019t a legal entity. The Django Software Foundation , a\nnon-profit organization, handles financial and legal matters related to the\nDjango Project. Other than that, the Django Software Foundation lets the\nDjango Project manage the development of the Django framework, its ecosystem\nand its community. Mergers \u00b6 Role \u00b6 Mergers are a small set of people who merge pull requests to the Django Git\nrepository . Prerogatives \u00b6 Mergers hold the following prerogatives: Merging any pull request which constitutes a minor change (small enough\nnot to require the use of the DEP process ). A Merger must not merge a\nchange primarily authored by that Merger, unless the pull request has been\napproved by: another Merger, a steering council member, a member of the triage & review team , or a member of the security team . Initiating discussion of a minor change in the appropriate venue, and request\nthat other Mergers refrain from merging it while discussion proceeds. Requesting a vote of the steering council regarding any minor change if, in\nthe Merger\u2019s opinion, discussion has failed to reach a consensus. Requesting a vote of the steering council when a major change (significant\nenough to require the use of the DEP process ) reaches one of its\nimplementation milestones and is intended to merge. Membership \u00b6 The steering council selects Mergers as necessary to maintain their number\nat a minimum of three, in order to spread the workload and avoid over-burdening\nor burning out any individual Merger. There is no upper limit to the number of\nMergers. It\u2019s not a requirement that a Merger is also a Django Fellow, but the Django\nSoftware Foundation has the power to use funding of Fellow positions as a way\nto make the role of Merger sustainable. The following restrictions apply to the role of Merger: A person must not simultaneously serve as a member of the steering council. If\na Merger is elected to the steering council, they shall cease to be a Merger\nimmediately upon taking up membership in the steering council. A person may serve in the roles of Releaser and Merger simultaneously. The selection process, when a vacancy occurs or when the steering council deems\nit necessary to select additional persons for such a role, occur as follows: Any member in good standing of an appropriate discussion venue, or the Django\nSoftware Foundation board acting with the input of the DSF\u2019s Fellowship\ncommittee, may suggest a person for consideration. The steering council considers the suggestions put forth, and then any member\nof the steering council formally nominates a candidate for the role. The steering council votes on nominees. Mergers may resign their role at any time, but should endeavor to provide some\nadvance notice in order to allow the selection of a replacement. Termination of\nthe contract of a Django Fellow by the Django Software Foundation temporarily\nsuspends that person\u2019s Merger role until such time as the steering council can\nvote on their nomination. Otherwise, a Merger may be removed by: Becoming disqualified due to election to the steering council. Becoming disqualified due to actions taken by the Code of Conduct committee\nof the Django Software Foundation. A vote of the steering council. Releasers \u00b6 Role \u00b6 Releasers are a small set of people who have the authority to upload packaged\nreleases of Django to the Python Package Index and to the djangoproject.com website. Prerogatives \u00b6 Releasers build Django releases and\nupload them to the Python Package Index and to the djangoproject.com website. Membership \u00b6 The steering council selects Releasers as necessary to maintain their number\nat a minimum of three, in order to spread the workload and avoid over-burdening\nor burning out any individual Releaser. There is no upper limit to the number\nof Releasers. It\u2019s not a requirement that a Releaser is also a Django Fellow, but the Django\nSoftware Foundation has the power to use funding of Fellow positions as a way\nto make the role of Releaser sustainable. A person may serve in the roles of Releaser and Merger simultaneously. The selection process, when a vacancy occurs or when the steering council deems\nit necessary to select additional persons for such a role, occur as follows: Any member in good standing of an appropriate discussion venue, or the Django\nSoftware Foundation board acting with the input of the DSF\u2019s Fellowship\ncommittee, may suggest a person for consideration. The steering council considers the suggestions put forth, and then any member\nof the steering council formally nominates a candidate for the role. The steering council votes on nominees. Releasers may resign their role at any time, but should endeavor to provide\nsome advance notice in order to allow the selection of a replacement.\nTermination of the contract of a Django Fellow by the Django Software\nFoundation temporarily suspends that person\u2019s Releaser role until such time as\nthe steering council can vote on their nomination. Otherwise, a Releaser may be removed by: Becoming disqualified due to actions taken by the Code of Conduct committee\nof the Django Software Foundation. A vote of the steering council. Steering council \u00b6 Role \u00b6 The steering council is a group of experienced contributors who: provide oversight of Django\u2019s development and release process, assist in setting the direction of feature development and releases, select Mergers and Releasers, and have a tie-breaking vote when other decision-making processes fail. Their main concern is to maintain the quality and stability of the Django Web\nFramework. Prerogatives \u00b6 The steering council holds the following prerogatives: Making a binding decision regarding any question of a technical change to\nDjango. Vetoing the merging of any particular piece of code into Django or ordering\nthe reversion of any particular merge or commit. Announcing calls for proposals and ideas for the future technical direction\nof Django. Selecting and removing mergers and releasers. Participating in the removal of members of the steering council, when deemed\nappropriate. Calling elections of the steering council outside of those which are\nautomatically triggered, at times when the steering council deems an election\nis appropriate. Participating in modifying Django\u2019s governance (see Changing the organization ). Declining to vote on a matter the steering council feels is unripe for a\nbinding decision, or which the steering council feels is outside the scope of\nits powers. Taking charge of the governance of other technical teams within the Django\nopen-source project, and governing those teams accordingly. Membership \u00b6 The steering council is an elected group of five experienced contributors\nwho demonstrate: A history of substantive contributions to Django or the Django ecosystem.\nThis history must begin at least 18 months prior to the individual\u2019s\ncandidacy for the Steering Council, and include substantive contributions in\nat least two of these bullet points: Code contributions to Django projects or major third-party packages in the\nDjango ecosystem Reviewing pull requests and/or triaging Django project tickets Documentation, tutorials or blog posts Discussions about Django on the Django Forum Running Django-related events or user groups A history of engagement with the direction and future of Django. This does\nnot need to be recent, but candidates who have not engaged in the past three\nyears must still demonstrate an understanding of Django\u2019s changes and\ndirection within those three years. A new council is elected after each release cycle of Django. The election process\nworks as follows: The steering council directs one of its members to notify the Secretary of the\nDjango Software Foundation, in writing, of the triggering of the election,\nand the condition which triggered it. The Secretary post to the appropriate\nvenue \u2013 the Django Forum to announce the election and its timeline. As soon as the election is announced, the DSF Board begin a period of\nvoter registration. All individual members of the DSF are automatically\nregistered and need not explicitly register. All other persons who believe\nthemselves eligible to vote, but who have not yet registered to vote, may\nmake an application to the DSF Board for voting privileges. The voter\nregistration form and roll of voters is maintained by the DSF Board. The DSF\nBoard may challenge and reject the registration of voters it believes are\nregistering in bad faith or who it believes have falsified their\nqualifications or are otherwise unqualified. Registration of voters close one week after the announcement of the\nelection. At that point, registration of candidates begin. Any qualified\nperson may register as a candidate. The candidate registration form and\nroster of candidates are maintained by the DSF Board, and candidates must\nprovide evidence of their qualifications as part of registration. The DSF\nBoard may challenge and reject the registration of candidates it believes do\nnot meet the qualifications of members of the Steering Council, or who it\nbelieves are registering in bad faith. Registration of candidates close one week after it has opened. One week\nafter registration of candidates closes, the Secretary of the DSF publishes\nthe roster of candidates to the Django Forum , and the election begins.\nThe DSF Board provides a voting form accessible to registered voters, and is\nthe custodian of the votes. Voting is by secret ballot containing the roster of candidates, and any\nrelevant materials regarding the candidates, in a randomized order. Each\nvoter may vote for up to five candidates on the ballot. The election conclude one week after it begins. The DSF Board then tally the\nvotes and produce a summary, including the total number of votes cast and\nthe number received by each candidate. This summary is ratified by a\nmajority vote of the DSF Board, then posted by the Secretary of the DSF to\nthe Django Forum . The five candidates with the highest vote totals\nimmediately become the new steering council. A member of the steering council may be removed by: Becoming disqualified due to actions taken by the Code of Conduct committee\nof the Django Software Foundation. Determining that they did not possess the qualifications of a member of the\nsteering council. This determination must be made jointly by the other members\nof the steering council, and the DSF Board . A valid determination of\nineligibility requires that all other members of the steering council and all\nmembers of the DSF Board vote who can vote on the issue (the affected person,\nif a DSF Board member, must not vote) vote \u201cyes\u201d on a motion that the person\nin question is ineligible. Changing the organization \u00b6 Changes to this document require the use of the DEP process , with\nmodifications described in DEP 0010 . Previous page and next page Mailing lists and Forum Django\u2019s security policies Back to Top Additional Information Support Django! Marek Belski donated to the Django Software Foundation to support Django development. Donate today! Contents Organization of the Django Project Principles Mergers Role Prerogatives Membership Releasers Role Prerogatives Membership Steering council Role Prerogatives Membership Changing the organization Browse Prev: Mailing lists and Forum Next: Django\u2019s security policies Table of contents General Index Python Module Index You are here: Django dev documentation Django internals Organization of the Django Project Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (development version): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://docs.djangoproject.com/en/dev/internals/security/#reporting-security-issues": {
    "url": "https://docs.djangoproject.com/en/dev/internals/security/#reporting-security-issues",
    "content": "Django\u2019s security policies | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.1 5.2 Documentation version: development Django\u2019s security policies \u00b6 Django\u2019s development team is strongly committed to responsible\nreporting and disclosure of security-related issues. As such, we\u2019ve\nadopted and follow a set of policies which conform to that ideal and\nare geared toward allowing us to deliver timely security updates to\nthe official distribution of Django, as well as to third-party\ndistributions. Reporting security issues \u00b6 Short version: please report security issues by emailing\nsecurity@djangoproject.com . Most normal bugs in Django are reported to our public Trac instance , but\ndue to the sensitive nature of security issues, we ask that they not be\npublicly reported in this fashion. Instead, if you believe you\u2019ve found something in Django which has security\nimplications, please send a description of the issue via email to security@djangoproject.com . Mail sent to that address reaches the security\nteam . Once you\u2019ve submitted an issue via email, you should receive an acknowledgment\nfrom a member of the security team within 3 working days. After that, the\nsecurity team will begin their analysis. Depending on the action to be taken,\nyou may receive followup emails. It can take several weeks before the security\nteam comes to a conclusion. There is no need to chase the security team unless\nyou discover new, relevant information. All reports aim to be resolved within\nthe industry-standard 90 days. Confirmed vulnerabilities with a high severity level will be addressed promptly. Sending encrypted reports If you want to send an encrypted email ( optional ), the public key ID for security@djangoproject.com is 0xfcb84b8d1d17f80b , and this public\nkey is available from most commonly-used keyservers. Reporting guidelines \u00b6 Include a runnable proof of concept \u00b6 Please privately share a minimal Django project or code snippet that\ndemonstrates the potential vulnerability. Include clear instructions on how to\nset up, run, and reproduce the issue. Please do not attach screenshots of code. User input must be sanitized \u00b6 Reports based on a failure to sanitize user input are not valid security\nvulnerabilities. It is the developer\u2019s responsibility to properly handle user\ninput. This principle is explained in our security documentation . For example, the following is not considered valid because email has\nnot been sanitized: from django.core.mail import send_mail from django.http import JsonResponse def my_proof_of_concept ( request ): email = request . GET . get ( \"email\" , \"\" ) send_mail ( \"Email subject\" , \"Email body\" , email , [ \"admin@example.com\" ]) return JsonResponse ( status = 200 ) Developers must always validate and sanitize input before using it. The\ncorrect approach would be to use a Django form to ensure email is properly\nvalidated: from django import forms from django.core.mail import send_mail from django.http import JsonResponse class EmailForm ( forms . Form ): email = forms . EmailField () def my_proof_of_concept ( request ): form = EmailForm ( request . GET ) if form . is_valid (): send_mail ( \"Email subject\" , \"Email body\" , form . cleaned_data [ \"email\" ], [ \"admin@example.com\" ], ) return JsonResponse ( status = 200 ) return JsonResponse ( form . errors , status = 400 ) Similarly, as Django\u2019s raw SQL constructs (such as extra() and RawSQL expression) provide developers with full control over the\nquery, they are insecure if user input is not properly handled. As explained in\nour security documentation , it is the\ndeveloper\u2019s responsibility to safely process user input for these functions. For instance, the following is not considered valid because query has\nnot been sanitized: from django.shortcuts import HttpResponse from .models import MyModel def my_proof_of_concept ( request ): query = request . GET . get ( \"query\" , \"\" ) q = MyModel . objects . extra ( select = { \"id\" : query }) return HttpResponse ( q . values ()) Request headers and URLs must be under 8K bytes \u00b6 To prevent denial-of-service (DoS) attacks, production-grade servers impose\nlimits on request header and URL sizes. For example, by default Gunicorn allows\nup to roughly: 4k bytes for a URL 8K bytes for a request header Other web servers, such as Nginx and Apache, have similar restrictions to\nprevent excessive resource consumption. Consequently, the Django security team will not consider reports that rely on\nrequest headers or URLs exceeding 8K bytes, as such inputs are already\nmitigated at the server level in production environments. runserver should never be used in production Django\u2019s built-in development server does not enforce these limits because\nit is not designed to be a production server. The request body must be under 2.5 MB \u00b6 The DATA_UPLOAD_MAX_MEMORY_SIZE setting limits the default maximum\nrequest body size to 2.5 MB. As this is enforced on all production-grade Django projects by default, a proof\nof concept must not exceed 2.5 MB in the request body to be considered valid. Issues resulting from large, but potentially reasonable setting values, should\nbe reported using the public ticket tracker for hardening. Code under test must feasibly exist in a Django project \u00b6 The proof of concept must plausibly occur in a production-grade Django\napplication, reflecting real-world scenarios and following standard development\npractices. Django contains many private and undocumented functions that are not part of\nits public API. If a vulnerability depends on directly calling these internal\nfunctions in an unsafe way, it will not be considered a valid security issue. Content displayed by the Django Template Language must be under 100 KB \u00b6 The Django Template Language (DTL) is designed for building the content needed\nto display web pages. In particular its text filters are meant for that kind of\nusage. For reference, the complete works of Shakespeare have about 3.5 million bytes\nin plain-text ASCII encoding. Displaying such in a single request is beyond the\nscope of almost all websites, and so outside the scope of the DTL too. Text processing is expensive. Django makes no guarantee that DTL text filters\nare never subject to degraded performance if passed deliberately crafted,\nsufficiently large inputs. Under default configurations, Django makes it\ndifficult for sites to accidentally accept such payloads from untrusted\nsources, but, if it is necessary to display large amounts of user-provided\ncontent, it\u2019s important that basic security measures are taken. User-provided content should always be constrained to known maximum length. It\nshould be filtered to remove malicious content, and validated to match expected\nformats. It should then be processed offline, if necessary, before being\ndisplayed. Proof of concepts which use over 100 KB of data to be processed by the DTL will\nbe considered invalid. How does Django evaluate a report \u00b6 These are criteria used by the security team when evaluating whether a report\nrequires a security release: The vulnerability is within a supported version of\nDjango. The vulnerability does not depend on manual actions that rely on code\nexternal to Django. This includes actions performed by a project\u2019s developer\nor maintainer using developer tools or the Django CLI. For example, attacks\nthat require running management commands with uncommon or insecure options\ndo not qualify. The vulnerability applies to a production-grade Django application. This\nmeans the following scenarios do not require a security release: Exploits that only affect local development, for example when using runserver . Exploits which fail to follow security best practices, such as failure to\nsanitize user input. For other examples, see our security\ndocumentation . Exploits in AI generated code that do not adhere to security best practices. The security team may conclude that the source of the vulnerability is within\nthe Python standard library, in which case the reporter will be asked to report\nthe vulnerability to the Python core team. For further details see the Python\nsecurity guidelines . On occasion, a security release may be issued to help resolve a security\nvulnerability within a popular third-party package. These reports should come\nfrom the package maintainers. If you are unsure whether your finding meets these criteria, please still report\nit privately by emailing security@djangoproject.com . The security team will review your report and\nrecommend the correct course of action. Supported versions \u00b6 At any given time, the Django team provides official security support\nfor several versions of Django: The main development branch , hosted on GitHub, which will become the\nnext major release of Django, receives security support. Security issues that\nonly affect the main development branch and not any stable released versions\nare fixed in public without going through the disclosure process . The two most recent Django release series receive security\nsupport. For example, during the development cycle leading to the\nrelease of Django 1.5, support will be provided for Django 1.4 and\nDjango 1.3. Upon the release of Django 1.5, Django 1.3\u2019s security\nsupport will end. Long-term support release s will receive security updates for a\nspecified period. When new releases are issued for security reasons, the accompanying\nnotice will include a list of affected versions. This list is\ncomprised solely of supported versions of Django: older versions may\nalso be affected, but we do not investigate to determine that, and\nwill not issue patches or new releases for those versions. Security issue severity levels \u00b6 The severity level of a security vulnerability is determined by the attack\ntype. Severity levels are: High Remote code execution SQL injection Moderate Cross site scripting (XSS) Cross site request forgery (CSRF) Denial-of-service attacks Broken authentication Low Sensitive data exposure Broken session management Unvalidated redirects/forwards Issues requiring an uncommon configuration option How Django discloses security issues \u00b6 Our process for taking a security issue from private discussion to\npublic disclosure involves multiple steps. Approximately one week before public disclosure, we send two notifications: First, we notify django-announce of the date and approximate time of the\nupcoming security release, as well as the severity of the issues. This is to\naid organizations that need to ensure they have staff available to handle\ntriaging our announcement and upgrade Django as needed. Second, we notify a list of people and organizations , primarily composed of operating-system vendors and\nother distributors of Django. This email is signed with the PGP key of someone\nfrom Django\u2019s release team and consists of: A full description of the issue and the affected versions of Django. The steps we will be taking to remedy the issue. The patch(es), if any, that will be applied to Django. The date on which the Django team will apply these patches, issue\nnew releases and publicly disclose the issue. On the day of disclosure, we will take the following steps: Apply the relevant patch(es) to Django\u2019s codebase. Issue the relevant release(s), by placing new packages on the Python\nPackage Index and on the djangoproject.com website , and tagging the new release(s)\nin Django\u2019s git repository. Post a public entry on the official Django development blog ,\ndescribing the issue and its resolution in detail, pointing to the\nrelevant patches and new releases, and crediting the reporter of\nthe issue (if the reporter wishes to be publicly identified). Post a notice to the django-announce and oss-security @ lists . openwall . com mailing lists that links to the blog post. If a reported issue is believed to be particularly time-sensitive \u2013\ndue to a known exploit in the wild, for example \u2013 the time between\nadvance notification and public disclosure may be shortened\nconsiderably. Additionally, if we have reason to believe that an issue reported to\nus affects other frameworks or tools in the Python/web ecosystem, we\nmay privately contact and discuss those issues with the appropriate\nmaintainers, and coordinate our own disclosure and resolution with\ntheirs. The Django team also maintains an archive of security issues\ndisclosed in Django . Who receives advance notification \u00b6 The full list of people and organizations who receive advance\nnotification of security issues is not and will not be made public. We also aim to keep this list as small as effectively possible, in\norder to better manage the flow of confidential information prior to\ndisclosure. As such, our notification list is not simply a list of\nusers of Django, and being a user of Django is not sufficient reason\nto be placed on the notification list. In broad terms, recipients of security notifications fall into three\ngroups: Operating-system vendors and other distributors of Django who\nprovide a suitably-generic (i.e., not an individual\u2019s personal\nemail address) contact address for reporting issues with their\nDjango package, or for general security reporting. In either case,\nsuch addresses must not forward to public mailing lists or bug\ntrackers. Addresses which forward to the private email of an\nindividual maintainer or security-response contact are acceptable,\nalthough private security trackers or security-response groups are\nstrongly preferred. On a case-by-case basis, individual package maintainers who have\ndemonstrated a commitment to responding to and responsibly acting\non these notifications. On a case-by-case basis, other entities who, in the judgment of the\nDjango development team, need to be made aware of a pending\nsecurity issue. Typically, membership in this group will consist of\nsome of the largest and/or most likely to be severely impacted\nknown users or distributors of Django, and will require a\ndemonstrated ability to responsibly receive, keep confidential and\nact on these notifications. Security audit and scanning entities As a policy, we do not add these types of entities to the notification\nlist. Requesting notifications \u00b6 If you believe that you, or an organization you are authorized to\nrepresent, fall into one of the groups listed above, you can ask to be\nadded to Django\u2019s notification list by emailing security@djangoproject.com . Please use the subject line \u201cSecurity\nnotification request\u201d. Your request must include the following information: Your full, real name and the name of the organization you represent,\nif applicable, as well as your role within that organization. A detailed explanation of how you or your organization fit at least\none set of criteria listed above. A detailed explanation of why you are requesting security notifications.\nAgain, please keep in mind that this is not simply a list for users of\nDjango, and the overwhelming majority of users should subscribe to django-announce to receive advanced notice of when a security release will\nhappen, without the details of the issues, rather than request detailed\nnotifications. The email address you would like to have added to our notification\nlist. An explanation of who will be receiving/reviewing mail sent to that\naddress, as well as information regarding any automated actions that\nwill be taken (i.e., filing of a confidential issue in a bug\ntracker). For individuals, the ID of a public key associated with your address\nwhich can be used to verify email received from you and encrypt\nemail sent to you, as needed. Once submitted, your request will be considered by the Django\ndevelopment team; you will receive a reply notifying you of the result\nof your request within 30 days. Please also bear in mind that for any individual or organization,\nreceiving security notifications is a privilege granted at the sole\ndiscretion of the Django development team, and that this privilege can\nbe revoked at any time, with or without explanation. Provide all required information A failure to provide the required information in your initial contact\nwill count against you when making the decision on whether or not to\napprove your request. Previous page and next page Organization of the Django Project Django\u2019s release process Back to Top Additional Information Support Django! SecurityGladiators.com donated to the Django Software Foundation to support Django development. Donate today! Contents Django\u2019s security policies Reporting security issues Reporting guidelines Include a runnable proof of concept User input must be sanitized Request headers and URLs must be under 8K bytes The request body must be under 2.5 MB Code under test must feasibly exist in a Django project Content displayed by the Django Template Language must be under 100 KB How does Django evaluate a report Supported versions Security issue severity levels How Django discloses security issues Who receives advance notification Requesting notifications Browse Prev: Organization of the Django Project Next: Django\u2019s release process Table of contents General Index Python Module Index You are here: Django dev documentation Django internals Django\u2019s security policies Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (development version): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/trademarks/": {
    "url": "https://www.djangoproject.com/trademarks/",
    "content": "Django Trademark License Agreement | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Django Software Foundation Django Trademark License Agreement The Django Software Foundation (DSF) is the owner of the Django trademark, and as such, it is necessary for us to protect this mark. Part of this protection is to clearly define criteria that must be satisfied in order to use the Django trademark. Django is an Open Source project, and as such it is important to the Django Software Foundation that the uses of the Django trademark are in the spirit of Open Source. This license attempts to codify the practices generally accepted in an Open Source community regarding the use of a trademark. Broadly speaking, this means that the community should be allowed to use the trademark to identify related products, libraries, community organizations, events, or education and training materials, as long as that activity doesn't violate the spirit of Open Source. The license also attempts to place some light social pressure on those directly using the Django trademark to make money. Anyone making a profit by using the Django trademark is required to report what proportion of that money will be contributed back to the community. It's also important to note that this license only applies if you intend to use (or are already using) a trademark of your own that incorporates the Django name, and/or incorporates the official logo/colors of the Django project. If your usage of the Django name is purely nominative, you don't need to license the Django trademark -- nominative use is an allowed use under trademark law. For more detailed answers to questions about this license, please read the F.A.Q. The text of this trademark license is released under the Creative Commons Attribution-ShareAlike 3.0 Unported License . Django Trademark License The Django Software Foundation , as the owner of registered and common law trademarks in the Django name and logo, licenses the use of the Django trademarks to the community under the following conditions: 1. Service Identification You may use the Django name and logo on a list of services, tools, or supported platforms, or as an identifier that a product or service is Django-related, provided that the usage of the logo does not imply that the organization is official or otherwise endorsed by the DSF, or by the Django Core team as representatives of the Django project, and the logo acts as a hyperlink to the main Django Project website wherever technically possible. 2. Django-related software projects You may use the Django name in the form \"DJANGO-FOO\" or \"FOO-DJANGO\" in any software library that can be used to augment or extend the capabilities of official Django project software, provided that: The project is distributed under the terms of an OSI-approved open source license ; and The website for the project does not imply that it is official or otherwise endorsed by the DSF, or by the Django Core team as representatives of the Django project. 3. Groups and Events You may incorporate the Django name into the name of any group or event, provided that: The purpose of the group or event is to educate, provide networking opportunities, or provide a social outlet for Django users; The name of the group or event is formed by combining the name \"Django\" with other words that qualify the geographical location, intended audience, or the activities of the group or event. The only exception to this is the name \"DjangoCon\", which must not be used without the permission of the DSF; If the group or event requires fees for membership or attendance, it must be made clear at time the fee is paid what income organizers will be deriving from the event, and what proportion of event profits, if any, will be returned to the DSF as a donation; The website for the group or event does not imply that it is official or otherwise endorsed by the DSF, or by the Django Core team as representatives of the Django project; The group or event agrees to adhere to the Django Community code of conduct ; and The group or event also adopts a specific Code of Conduct governing the behavior of participants. A group or event may use a logo that incorporates the Django logo by adding a word or picture that identifies the locality (for example, the name of a city, or a stylized image of an identifiable city landmark), audience, or activities of the group or event. 4. Merchandise You may produce merchandise displaying the Django name or logo, provided that: Artwork to be printed on merchandise has been formally approved by the DSF; The products on which the artwork is to appear has been formally approved by the DSF; and If the product is to be sold, the individual or organization producing the product must make a clear statement declaring what proportion of the sale price will be retained by the organizers, and what proportion, if any, will be contributed back to the DSF. To obtain formal approval for your merchandise sale, please submit an electronic copy of the proof artwork, plus a list of all products to be sold, to foundation@djangoproject.com . 5. Products and services serving the community You may incorporate the Django name into any website or product whose purpose is to organize, educate or inform the Django community, provided that: The website or product does not use the official Django logo or color palette in its design, except as provided for by Section 1 of this license; The website or product does not imply that it is official or otherwise endorsed by the DSF, or by the Django Core team as representatives of the Django project; and If a fee is to be charged for the product, or for access to any or all of the material on the website, a clear statement must exist declaring what proportion of those fees will be retained by the authors, and what proportion, if any, will be contributed back to the DSF. A link to this statement must be prominently displayed on the website or product. 6. Other Commercial activity You may not use the Django name in the registered name of any company, regardless of whether it offers Django-related services. You may not incorporate the Django name or logo into the name of any product to be sold by a commercial entity, regardless of whether that product or service is Django-related. 7. Domain Names You may use the Django name in any internet domain or subdomain: For any Django-related project meeting the requirements of Section 2 of this license; For any group or event meeting the requirements of Section 3 of this license; Any merchandise provider meeting the requirements of Section 4 of this license, provided the products sold under that domain are exclusively Django merchandise; and Any website or product meeting the requirements of Section 5 of this license. 8. Uses outside of this license If your usage, or proposed usage, of the Django name or trademark does not meet these criteria, a specific license may be granted to your organization, at the DSF's discretion. Please contact foundation@djangoproject.com with the details of your proposed usage, and a license may be granted. 9. Community standards Notwithstanding the above, licensees of the Django mark must not use that mark to cast the Django product or Django community into disrepute, or engage in business practices that reflect poorly on the Django product or community. 10. Interpretation The DSF reserves the right to determine if a usage of the Django trademark meets the requirements and standards of this license. Back to Top Additional Information Support Django! arSensa Inc donated to the Django Software Foundation to support Django development. Donate today! About the foundation FAQ Records Contact us Contributor license agreements Organizing a Django conference Latest DSF meeting minutes DSF Board monthly meeting, March 13, 2025 New and Ongoing business Confirmation for community Booth at PyCon US 2025 Contributor License Agreement or alternative Djangonaut Space session at PyCon Italia 2025 Proposed bylaws changes Read more DSF Board monthly meeting, February 13, 2025 New and Ongoing business Contributor License Agreement or alternative Django accessibility statement Django active developers sprints Executive Director update Online Community Working Group proposal Proposed bylaws changes Sarah Boyce requests access to add external members to Google Groups Space reserved for Django at PyCon Italia 2025 Vote on new Fellowship Working Group members Website Working Group proposal Read more More meeting minutes Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/weblog/2025/mar/19/django-52-rc1/": {
    "url": "https://www.djangoproject.com/weblog/2025/mar/19/django-52-rc1/",
    "content": "Django 5.2 release candidate 1 released | Weblog | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme News & Events Django 5.2 release candidate 1 released Posted by Sarah Boyce on March 19, 2025 Django 5.2 release candidate 1 is the final opportunity for you to\ntry out a composite of new features before Django 5.2 is released. The release candidate stage marks the string freeze and the call for\ntranslators to submit translations .\nProvided no major bugs are discovered that can't be solved in the next two\nweeks, Django 5.2 will be released on or around\nApril 2. Any  delays will be communicated\non the on the Django forum . Please use this opportunity to help find and fix bugs (which should be reported\nto the issue tracker ), you can\ngrab a copy of the release candidate package from our downloads page or on PyPI. The PGP key ID used for this release is Sarah Boyce: 3955B19851EA96EF Back to Top Additional Information Support Django! Alexander Blank donated to the Django Software Foundation to support Django development. Donate today! Upcoming Events DjangoCon Europe 2025 April 23, 2025 |  Dublin, Ireland \ud83c\uddee\ud83c\uddea DjangoCon Africa 2025 Aug. 11, 2025 |  Arusha, Tanzania \ud83c\uddf9\ud83c\uddff DjangoDay India Sept. 7, 2025 |  Bangalore, India \ud83c\uddee\ud83c\uddf3 Want your event listed here? Archives 2025 March 2025 February 2025 January 2025 2024 December 2024 November 2024 October 2024 September 2024 August 2024 July 2024 June 2024 May 2024 April 2024 March 2024 February 2024 January 2024 2023 December 2023 November 2023 October 2023 September 2023 August 2023 July 2023 June 2023 May 2023 April 2023 March 2023 February 2023 January 2023 2022 December 2022 November 2022 October 2022 September 2022 August 2022 July 2022 June 2022 May 2022 April 2022 March 2022 February 2022 January 2022 2021 December 2021 November 2021 October 2021 September 2021 August 2021 July 2021 June 2021 May 2021 April 2021 March 2021 February 2021 January 2021 2020 December 2020 November 2020 October 2020 September 2020 August 2020 July 2020 June 2020 May 2020 April 2020 March 2020 February 2020 January 2020 2019 December 2019 November 2019 October 2019 September 2019 August 2019 July 2019 June 2019 May 2019 April 2019 March 2019 February 2019 January 2019 2018 December 2018 November 2018 October 2018 August 2018 July 2018 June 2018 May 2018 April 2018 March 2018 February 2018 January 2018 2017 December 2017 November 2017 October 2017 September 2017 August 2017 July 2017 June 2017 May 2017 April 2017 March 2017 February 2017 January 2017 2016 December 2016 November 2016 October 2016 September 2016 August 2016 July 2016 June 2016 May 2016 April 2016 March 2016 February 2016 January 2016 2015 December 2015 November 2015 October 2015 September 2015 August 2015 July 2015 June 2015 May 2015 April 2015 March 2015 February 2015 January 2015 2014 December 2014 November 2014 October 2014 September 2014 August 2014 July 2014 June 2014 May 2014 April 2014 March 2014 February 2014 January 2014 2013 December 2013 November 2013 October 2013 September 2013 August 2013 July 2013 June 2013 May 2013 April 2013 March 2013 February 2013 January 2013 2012 December 2012 November 2012 October 2012 September 2012 August 2012 July 2012 June 2012 May 2012 April 2012 March 2012 February 2012 January 2012 2011 December 2011 November 2011 September 2011 August 2011 June 2011 April 2011 March 2011 February 2011 January 2011 2010 December 2010 November 2010 October 2010 September 2010 May 2010 April 2010 March 2010 February 2010 January 2010 2009 December 2009 October 2009 August 2009 July 2009 May 2009 March 2009 February 2009 2008 November 2008 October 2008 September 2008 August 2008 July 2008 June 2008 May 2008 April 2008 January 2008 2007 December 2007 November 2007 October 2007 September 2007 August 2007 July 2007 June 2007 May 2007 April 2007 March 2007 February 2007 January 2007 2006 December 2006 November 2006 October 2006 September 2006 August 2006 July 2006 June 2006 May 2006 April 2006 March 2006 February 2006 January 2006 2005 December 2005 November 2005 October 2005 September 2005 August 2005 July 2005 RSS Feeds Latest news entries Recent code changes Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://docs.djangoproject.com/en/dev/internals/contributing/bugs-and-features/": {
    "url": "https://docs.djangoproject.com/en/dev/internals/contributing/bugs-and-features/",
    "content": "Reporting bugs and requesting features | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.1 5.2 Documentation version: development Reporting bugs and requesting features \u00b6 Important Please report security issues only to security @ djangoproject . com .  This is a private list only open to\nlong-time, highly trusted Django developers, and its archives are\nnot public. For further details, please see our security\npolicies . Otherwise, before reporting a bug or requesting a new feature on the ticket tracker , consider these points: Check that someone hasn\u2019t already filed the bug or feature request by searching or running custom queries in the ticket tracker. Don\u2019t use the ticket system to ask support questions. Use the Django Forum or the Django Discord server for that. Don\u2019t reopen issues that have been marked \u201cwontfix\u201d without finding consensus\nto do so on the Django Forum . Don\u2019t use the ticket tracker for lengthy discussions, because they\u2019re\nlikely to get lost. If a particular ticket is controversial, please move the\ndiscussion to the Django Forum . Reporting bugs \u00b6 Well-written bug reports are incredibly helpful. However, there\u2019s a certain\namount of overhead involved in working with any bug tracking system so your\nhelp in keeping our ticket tracker as useful as possible is appreciated. In\nparticular: Do read the FAQ to see if your issue might\nbe a well-known question. Do ask on Django Forum or the Django Discord server first if\nyou\u2019re not sure if what you\u2019re seeing is a bug. Do write complete, reproducible, specific bug reports. You must\ninclude a clear, concise description of the problem, and a set of\ninstructions for replicating it. Add as much debug information as you can:\ncode snippets, test cases, exception backtraces, screenshots, etc. A nice\nsmall test case is the best way to report a bug, as it gives us a\nhelpful way to confirm the bug quickly. Don\u2019t post to Django Forum only to announce that you have filed a\nbug report. All the tickets are mailed to another list, django-updates ,\nwhich is tracked by developers and interested community members; we see them\nas they are filed. To understand the lifecycle of your ticket once you have created it, refer to Triaging tickets . Reporting user interface bugs and features \u00b6 If your bug or feature request touches on anything visual in nature, there\nare a few additional guidelines to follow: Include screenshots in your ticket which are the visual equivalent of a\nminimal test case. Show off the issue, not the crazy customizations\nyou\u2019ve made to your browser. If the issue is difficult to show off using a still image, consider\ncapturing a brief screencast. If your software permits it, capture only\nthe relevant area of the screen. If you\u2019re offering a patch that changes the look or behavior of Django\u2019s\nUI, you must attach before and after screenshots/screencasts.\nTickets lacking these are difficult for triagers to assess quickly. Screenshots don\u2019t absolve you of other good reporting practices. Make sure\nto include URLs, code snippets, and step-by-step instructions on how to\nreproduce the behavior visible in the screenshots. Make sure to set the UI/UX flag on the ticket so interested parties can\nfind your ticket. Requesting features \u00b6 We\u2019re always trying to make Django better, and your feature requests are a key\npart of that. Here are some tips on how to make a request most effectively: Make sure the feature actually requires changes in Django\u2019s core. If your\nidea can be developed as an independent application or module \u2014 for\ninstance, you want to support another database engine \u2014 we\u2019ll probably\nsuggest that you develop it independently. Then, if your project gathers\nsufficient community support, we may consider it for inclusion in Django. First request the feature on the Django Forum , not in the ticket tracker.\nIt\u2019ll get read more closely and reach a larger audience. This is even more\nimportant for large-scale feature requests. We like to discuss any big\nchanges to Django\u2019s core before actually working on them. Describe clearly and concisely what the missing feature is and how you\u2019d\nlike to see it implemented. Include example code (non-functional is OK)\nif possible. Explain why you\u2019d like the feature. Explaining a minimal use case will help\nothers understand where it fits in, and if there are already other ways of\nachieving the same thing. If there\u2019s a consensus agreement on the feature, then it\u2019s appropriate to\ncreate a ticket. Include a link to the discussion in the ticket description. See also: Documenting new features . Requesting performance optimizations \u00b6 Reports of a performance regression, or suggested performance optimizations,\nshould provide benchmarks and commands for the ticket triager to reproduce. See the django-asv benchmarks for more details of Django\u2019s existing\nbenchmarks. How we make decisions \u00b6 Whenever possible, we strive for a rough consensus. To that end, we\u2019ll often\nhave informal votes on the Django Forum about a feature. In these votes we\nfollow the voting style invented by Apache and used on Python itself, where\nvotes are given as +1, +0, -0, or -1.\nRoughly translated, these votes mean: +1: \u201cI love the idea and I\u2019m strongly committed to it.\u201d +0: \u201cSounds OK to me.\u201d -0: \u201cI\u2019m not thrilled, but I won\u2019t stand in the way.\u201d -1: \u201cI strongly disagree and would be very unhappy to see the idea turn\ninto reality.\u201d Although these votes are informal, they\u2019ll be taken very seriously. After a\nsuitable voting period, if an obvious consensus arises we\u2019ll follow the votes. However, consensus is not always possible. If consensus cannot be reached, or\nif the discussion toward a consensus fizzles out without a concrete decision,\nthe decision may be deferred to the steering council . Internally, the steering council will use the same voting mechanism. A\nproposition will be considered carried if: There are at least three \u201c+1\u201d votes from members of the steering council. There is no \u201c-1\u201d vote from any member of the steering council. Votes should be submitted within a week. Since this process allows any steering council member to veto a proposal, a\n\u201c-1\u201d vote should be accompanied by an explanation of what it would take to\nconvert that \u201c-1\u201d into at least a \u201c+0\u201d. Votes on technical matters should be announced and held in public on the Django Forum . Previous page and next page Localizing Django Triaging tickets Back to Top Additional Information Support Django! twoXAR, Inc, donated to the Django Software Foundation to support Django development. Donate today! Contents Reporting bugs and requesting features Reporting bugs Reporting user interface bugs and features Requesting features Requesting performance optimizations How we make decisions Browse Prev: Localizing Django Next: Triaging tickets Table of contents General Index Python Module Index You are here: Django dev documentation Django internals Contributing to Django Reporting bugs and requesting features Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (development version): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://docs.djangoproject.com/en/stable/faq/": {
    "url": "https://docs.djangoproject.com/en/stable/faq/",
    "content": "Django FAQ | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help el es fr id it ja ko pl pt-br zh-hans Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.2 dev Documentation version: 5.1 Django FAQ \u00b6 FAQ: General Why does this project exist? What does \u201cDjango\u201d mean, and how do you pronounce it? Is Django stable? Does Django scale? Who\u2019s behind this? How is Django licensed? Why does Django include Python\u2019s license file? Which sites use Django? Django appears to be a MVC framework, but you call the Controller the \u201cview\u201d, and the View the \u201ctemplate\u201d. How come you don\u2019t use the standard names? <Framework X> does <feature Y> \u2013 why doesn\u2019t Django? Why did you write all of Django from scratch, instead of using other Python libraries? Is Django a content-management-system (CMS)? How can I download the Django documentation to read it offline? How do I cite Django? FAQ: Installation How do I get started? What are Django\u2019s prerequisites? What Python version can I use with Django? What Python version should I use with Django? Should I use the stable version or development version? FAQ: Using Django Why do I get an error about importing DJANGO_SETTINGS_MODULE ? I can\u2019t stand your template language. Do I have to use it? Do I have to use your model/database layer? How do I use image and file fields? How do I make a variable available to all my templates? FAQ: Getting Help How do I do X? Why doesn\u2019t Y work? Where can I go to get help? Nobody answered my question! What should I do? I think I\u2019ve found a bug! What should I do? I think I\u2019ve found a security problem! What should I do? FAQ: Databases and models How can I see the raw SQL queries Django is running? Can I use Django with a preexisting database? If I make changes to a model, how do I update the database? Do Django models support multiple-column primary keys? Does Django support NoSQL databases? How do I add database-specific options to my CREATE TABLE statements, such as specifying MyISAM as the table type? FAQ: The admin I can\u2019t log in. When I enter a valid username and password, it just brings up the login page again, with no error messages. I can\u2019t log in. When I enter a valid username and password, it brings up the login page again, with a \u201cPlease enter a correct username and password\u201d error. How do I automatically set a field\u2019s value to the user who last edited the object in the admin? How do I limit admin access so that objects can only be edited by the users who created them? My admin-site CSS and images showed up fine using the development server, but they\u2019re not displaying when using mod_wsgi. My \u201clist_filter\u201d contains a ManyToManyField, but the filter doesn\u2019t display. Some objects aren\u2019t appearing in the admin. How can I customize the functionality of the admin interface? The dynamically-generated admin site is ugly! How can I change it? What browsers are supported for using the admin? What assistive technologies are supported for using the admin? FAQ: Contributing code How can I get started contributing code to Django? I submitted a bug fix several weeks ago. Why are you ignoring my contribution? When and how might I remind the team of a change I care about? But I\u2019ve reminded you several times and you keep ignoring my contribution! I\u2019m sure my ticket is absolutely 100% perfect, can I mark it as \u201cReady For Checkin\u201d myself? Troubleshooting Problems running django-admin Miscellaneous Previous page and next page How to write a custom storage class FAQ: General Back to Top Additional Information Support Django! Aircon Dealer Singapore donated to the Django Software Foundation to support Django development. Donate today! Contents Django FAQ Browse Prev: How to write a custom storage class Next: FAQ: General Table of contents General Index Python Module Index You are here: Django 5.1 documentation Django FAQ Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (Django 5.1): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/conduct/": {
    "url": "https://www.djangoproject.com/conduct/",
    "content": "Django Code of Conduct | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Code of Conduct Django Code of Conduct Like the technical community as a whole, the Django team and community is made up of a mixture of professionals and volunteers from all over the world, working on every aspect of the mission - including mentorship, teaching, and connecting people. Diversity is one of our huge strengths, but it can also lead to communication issues and unhappiness. To that end, we have a few ground rules that we ask people to adhere to. This code applies equally to founders, mentors and those seeking help and guidance. This isn\u2019t an exhaustive list of things that you can\u2019t do. Rather, take it in the spirit in which it\u2019s intended - a guide to make it easier to enrich all of us and the technical communities in which we participate. This code of conduct applies to all spaces managed by the Django project or Django Software Foundation. This includes the issue tracker, DSF events, and any other forums created by the project team which the community uses for communication. In addition, violations of this code outside these spaces may affect a person's ability to participate within them. If you believe someone is violating the code of conduct, we ask that you report it by emailing conduct@djangoproject.com . For more details please see our Reporting Guidelines Be friendly and patient. Be welcoming. We strive to be a community that welcomes and supports people of all backgrounds and identities. This includes, but is not limited to members of any race, ethnicity, culture, national origin, colour, immigration status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical ability. Be considerate. Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary language. Be respectful. Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It\u2019s important to remember that a community where people feel uncomfortable or threatened is not a productive one. Members of the Django community should be respectful when dealing with other members as well as with people outside the Django community. Be careful in the words that you choose. We are a community of professionals, and we conduct ourselves professionally. Be kind to others. Do not insult or put down other participants. Harassment and other exclusionary behavior aren't acceptable. This includes, but is not limited to: Violent threats or language directed against another person. Discriminatory jokes and language. Posting sexually explicit or violent material. Posting (or threatening to post) other people's personally identifying information (\"doxing\"). Personal insults, especially those using racist or sexist terms. Unwelcome sexual attention. Advocating for, or encouraging, any of the above behavior. Repeated harassment of others. In general, if someone asks you to stop, then stop. When we disagree, try to understand why. Disagreements, both social and technical, happen all the time and Django is no exception. It is important that we resolve disagreements and differing views constructively. Remember that we\u2019re different. The strength of Django comes from its varied community, people from a wide range of backgrounds. Different people have different perspectives on issues. Being unable to understand why someone holds a viewpoint doesn\u2019t mean that they\u2019re wrong. Don\u2019t forget that it is human to err and blaming each other doesn\u2019t get us anywhere. Instead, focus on helping to resolve issues and learning from mistakes. Original text courtesy of the Speak Up! project . Questions? If you have questions, please see the FAQ . If that doesn't answer your questions, feel free to contact us . Back to Top Django Community Code of Conduct Code of Conduct Committee Frequently Asked Questions Reporting Guide Enforcement Manual Changes License All content on this page is licensed under a Creative Commons Attribution license. Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://forum.djangoproject.com/": {
    "url": "https://forum.djangoproject.com/",
    "content": "Django Forum Django Forum Category Topics Announcements Announcements and invited feedback about the forum. 19 Using Django For discussions about using Django, building sites and projects. 3357 Django Internals For discussing the development of Django itself. 432 Show & Tell Show off your projects, ask for feedback, and discover new things written in Django! 423 Events Discuss Django conferences, sprints, meetups and other events! 52 Home Categories Guidelines Terms of Service Privacy Policy Powered by Discourse , best viewed with JavaScript enabled"
  },
  "https://docs.djangoproject.com/en/stable/intro/tutorial02/": {
    "url": "https://docs.djangoproject.com/en/stable/intro/tutorial02/",
    "content": "Writing your first Django app, part 2 | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help el es fr id it ja ko pl pt-br zh-hans Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.2 dev Documentation version: 5.1 Writing your first Django app, part 2 \u00b6 This tutorial begins where Tutorial 1 left off.\nWe\u2019ll set up the database, create your first model, and get a quick\nintroduction to Django\u2019s automatically-generated admin site. Where to get help: If you\u2019re having trouble going through this tutorial, please head over to\nthe Getting Help section of the FAQ. Database setup \u00b6 Now, open up mysite/settings.py . It\u2019s a normal Python module with\nmodule-level variables representing Django settings. By default, the DATABASES configuration uses SQLite. If you\u2019re new\nto databases, or you\u2019re just interested in trying Django, this is the easiest\nchoice. SQLite is included in Python, so you won\u2019t need to install anything\nelse to support your database. When starting your first real project, however,\nyou may want to use a more scalable database like PostgreSQL, to avoid\ndatabase-switching headaches down the road. If you wish to use another database, see details to customize and get\nyour database running . While you\u2019re editing mysite/settings.py , set TIME_ZONE to\nyour time zone. Also, note the INSTALLED_APPS setting at the top of the file. That\nholds the names of all Django applications that are activated in this Django\ninstance. Apps can be used in multiple projects, and you can package and\ndistribute them for use by others in their projects. By default, INSTALLED_APPS contains the following apps, all of which\ncome with Django: django.contrib.admin \u2013 The admin site. You\u2019ll use it shortly. django.contrib.auth \u2013 An authentication system. django.contrib.contenttypes \u2013 A framework for content types. django.contrib.sessions \u2013 A session framework. django.contrib.messages \u2013 A messaging framework. django.contrib.staticfiles \u2013 A framework for managing\nstatic files. These applications are included by default as a convenience for the common case. Some of these applications make use of at least one database table, though,\nso we need to create the tables in the database before we can use them. To do\nthat, run the following command: \uf17c/\uf179 \uf17a $ python manage.py migrate ...\\> py manage.py migrate The migrate command looks at the INSTALLED_APPS setting\nand creates any necessary database tables according to the database settings\nin your mysite/settings.py file and the database migrations shipped\nwith the app (we\u2019ll cover those later). You\u2019ll see a message for each\nmigration it applies. If you\u2019re interested, run the command-line client for your\ndatabase and type \\dt (PostgreSQL), SHOW TABLES; (MariaDB, MySQL), .tables (SQLite), or SELECT TABLE_NAME FROM USER_TABLES; (Oracle) to\ndisplay the tables Django created. For the minimalists Like we said above, the default applications are included for the common\ncase, but not everybody needs them. If you don\u2019t need any or all of them,\nfeel free to comment-out or delete the appropriate line(s) from INSTALLED_APPS before running migrate . The migrate command will only run migrations for apps in INSTALLED_APPS . Creating models \u00b6 Now we\u2019ll define your models \u2013 essentially, your database layout, with\nadditional metadata. Philosophy A model is the single, definitive source of information about your data. It\ncontains the essential fields and behaviors of the data you\u2019re storing.\nDjango follows the DRY Principle . The goal is to define your\ndata model in one place and automatically derive things from it. This includes the migrations - unlike in Ruby On Rails, for example, migrations\nare entirely derived from your models file, and are essentially a\nhistory that Django can roll through to update your database schema to\nmatch your current models. In our poll app, we\u2019ll create two models: Question and Choice . A Question has a question and a publication date. A Choice has two\nfields: the text of the choice and a vote tally. Each Choice is associated\nwith a Question . These concepts are represented by Python classes. Edit the polls/models.py file so it looks like this: polls/models.py \u00b6 from django.db import models class Question ( models . Model ): question_text = models . CharField ( max_length = 200 ) pub_date = models . DateTimeField ( \"date published\" ) class Choice ( models . Model ): question = models . ForeignKey ( Question , on_delete = models . CASCADE ) choice_text = models . CharField ( max_length = 200 ) votes = models . IntegerField ( default = 0 ) Here, each model is represented by a class that subclasses django.db.models.Model . Each model has a number of class variables,\neach of which represents a database field in the model. Each field is represented by an instance of a Field class \u2013 e.g., CharField for character fields and DateTimeField for datetimes. This tells Django what\ntype of data each field holds. The name of each Field instance (e.g. question_text or pub_date ) is the field\u2019s name, in machine-friendly\nformat. You\u2019ll use this value in your Python code, and your database will use\nit as the column name. You can use an optional first positional argument to a Field to designate a human-readable name. That\u2019s used\nin a couple of introspective parts of Django, and it doubles as documentation.\nIf this field isn\u2019t provided, Django will use the machine-readable name. In this\nexample, we\u2019ve only defined a human-readable name for Question.pub_date .\nFor all other fields in this model, the field\u2019s machine-readable name will\nsuffice as its human-readable name. Some Field classes have required arguments. CharField , for example, requires that you give it a max_length . That\u2019s used not only in the\ndatabase schema, but in validation, as we\u2019ll soon see. A Field can also have various optional arguments; in\nthis case, we\u2019ve set the default value of votes to 0. Finally, note a relationship is defined, using ForeignKey . That tells Django each Choice is\nrelated to a single Question . Django supports all the common database\nrelationships: many-to-one, many-to-many, and one-to-one. Activating models \u00b6 That small bit of model code gives Django a lot of information. With it, Django\nis able to: Create a database schema ( CREATE TABLE statements) for this app. Create a Python database-access API for accessing Question and Choice objects. But first we need to tell our project that the polls app is installed. Philosophy Django apps are \u201cpluggable\u201d: You can use an app in multiple projects, and\nyou can distribute apps, because they don\u2019t have to be tied to a given\nDjango installation. To include the app in our project, we need to add a reference to its\nconfiguration class in the INSTALLED_APPS setting. The PollsConfig class is in the polls/apps.py file, so its dotted path\nis 'polls.apps.PollsConfig' . Edit the mysite/settings.py file and\nadd that dotted path to the INSTALLED_APPS setting. It\u2019ll look like\nthis: mysite/settings.py \u00b6 INSTALLED_APPS = [ \"polls.apps.PollsConfig\" , \"django.contrib.admin\" , \"django.contrib.auth\" , \"django.contrib.contenttypes\" , \"django.contrib.sessions\" , \"django.contrib.messages\" , \"django.contrib.staticfiles\" , ] Now Django knows to include the polls app. Let\u2019s run another command: \uf17c/\uf179 \uf17a $ python manage.py makemigrations polls ...\\> py manage.py makemigrations polls You should see something similar to the following: Migrations for 'polls':\n  polls/migrations/0001_initial.py\n    + Create model Question\n    + Create model Choice By running makemigrations , you\u2019re telling Django that you\u2019ve made\nsome changes to your models (in this case, you\u2019ve made new ones) and that\nyou\u2019d like the changes to be stored as a migration . Migrations are how Django stores changes to your models (and thus your\ndatabase schema) - they\u2019re files on disk. You can read the migration for your\nnew model if you like; it\u2019s the file polls/migrations/0001_initial.py .\nDon\u2019t worry, you\u2019re not expected to read them every time Django makes one, but\nthey\u2019re designed to be human-editable in case you want to manually tweak how\nDjango changes things. There\u2019s a command that will run the migrations for you and manage your database\nschema automatically - that\u2019s called migrate , and we\u2019ll come to it in a\nmoment - but first, let\u2019s see what SQL that migration would run. The sqlmigrate command takes migration names and returns their SQL: \uf17c/\uf179 \uf17a $ python manage.py sqlmigrate polls 0001 ...\\> py manage.py sqlmigrate polls 0001 You should see something similar to the following (we\u2019ve reformatted it for\nreadability): BEGIN ; -- -- Create model Question -- CREATE TABLE \"polls_question\" ( \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY , \"question_text\" varchar ( 200 ) NOT NULL , \"pub_date\" timestamp with time zone NOT NULL ); -- -- Create model Choice -- CREATE TABLE \"polls_choice\" ( \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY , \"choice_text\" varchar ( 200 ) NOT NULL , \"votes\" integer NOT NULL , \"question_id\" bigint NOT NULL ); ALTER TABLE \"polls_choice\" ADD CONSTRAINT \"polls_choice_question_id_c5b4b260_fk_polls_question_id\" FOREIGN KEY ( \"question_id\" ) REFERENCES \"polls_question\" ( \"id\" ) DEFERRABLE INITIALLY DEFERRED ; CREATE INDEX \"polls_choice_question_id_c5b4b260\" ON \"polls_choice\" ( \"question_id\" ); COMMIT ; Note the following: The exact output will vary depending on the database you are using. The\nexample above is generated for PostgreSQL. Table names are automatically generated by combining the name of the app\n( polls ) and the lowercase name of the model \u2013 question and choice . (You can override this behavior.) Primary keys (IDs) are added automatically. (You can override this, too.) By convention, Django appends \"_id\" to the foreign key field name.\n(Yes, you can override this, as well.) The foreign key relationship is made explicit by a FOREIGN KEY constraint. Don\u2019t worry about the DEFERRABLE parts; it\u2019s telling\nPostgreSQL to not enforce the foreign key until the end of the transaction. It\u2019s tailored to the database you\u2019re using, so database-specific field types\nsuch as auto_increment (MySQL), bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (PostgreSQL), or integer primary key autoincrement (SQLite)\nare handled for you automatically. Same goes for the quoting of field names\n\u2013 e.g., using double quotes or single quotes. The sqlmigrate command doesn\u2019t actually run the migration on your\ndatabase - instead, it prints it to the screen so that you can see what SQL\nDjango thinks is required. It\u2019s useful for checking what Django is going to\ndo or if you have database administrators who require SQL scripts for\nchanges. If you\u2019re interested, you can also run python manage.py check ; this checks for any problems in\nyour project without making migrations or touching the database. Now, run migrate again to create those model tables in your database: \uf17c/\uf179 \uf17a $ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, polls, sessions Running migrations: Rendering model states... DONE Applying polls.0001_initial... OK ...\\> py manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, polls, sessions Running migrations: Rendering model states... DONE Applying polls.0001_initial... OK The migrate command takes all the migrations that haven\u2019t been\napplied (Django tracks which ones are applied using a special table in your\ndatabase called django_migrations ) and runs them against your database -\nessentially, synchronizing the changes you made to your models with the schema\nin the database. Migrations are very powerful and let you change your models over time, as you\ndevelop your project, without the need to delete your database or tables and\nmake new ones - it specializes in upgrading your database live, without\nlosing data. We\u2019ll cover them in more depth in a later part of the tutorial,\nbut for now, remember the three-step guide to making model changes: Change your models (in models.py ). Run python manage.py makemigrations to create\nmigrations for those changes Run python manage.py migrate to apply those changes to\nthe database. The reason that there are separate commands to make and apply migrations is\nbecause you\u2019ll commit migrations to your version control system and ship them\nwith your app; they not only make your development easier, they\u2019re also\nusable by other developers and in production. Read the django-admin documentation for full\ninformation on what the manage.py utility can do. Playing with the API \u00b6 Now, let\u2019s hop into the interactive Python shell and play around with the free\nAPI Django gives you. To invoke the Python shell, use this command: \uf17c/\uf179 \uf17a $ python manage.py shell ...\\> py manage.py shell We\u2019re using this instead of simply typing \u201cpython\u201d, because manage.py sets the DJANGO_SETTINGS_MODULE environment variable, which gives\nDjango the Python import path to your mysite/settings.py file. Once you\u2019re in the shell, explore the database API : >>> from polls.models import Choice , Question # Import the model classes we just wrote. # No questions are in the system yet. >>> Question . objects . all () <QuerySet []> # Create a new Question. # Support for time zones is enabled in the default settings file, so # Django expects a datetime with tzinfo for pub_date. Use timezone.now() # instead of datetime.datetime.now() and it will do the right thing. >>> from django.utils import timezone >>> q = Question ( question_text = \"What's new?\" , pub_date = timezone . now ()) # Save the object into the database. You have to call save() explicitly. >>> q . save () # Now it has an ID. >>> q . id 1 # Access model field values via Python attributes. >>> q . question_text \"What's new?\" >>> q . pub_date datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc) # Change values by changing the attributes, then calling save(). >>> q . question_text = \"What's up?\" >>> q . save () # objects.all() displays all the questions in the database. >>> Question . objects . all () <QuerySet [<Question: Question object (1)>]> Wait a minute. <Question: Question object (1)> isn\u2019t a helpful\nrepresentation of this object. Let\u2019s fix that by editing the Question model\n(in the polls/models.py file) and adding a __str__() method to both Question and Choice : polls/models.py \u00b6 from django.db import models class Question ( models . Model ): # ... def __str__ ( self ): return self . question_text class Choice ( models . Model ): # ... def __str__ ( self ): return self . choice_text It\u2019s important to add __str__() methods to your\nmodels, not only for your own convenience when dealing with the interactive\nprompt, but also because objects\u2019 representations are used throughout Django\u2019s\nautomatically-generated admin. Let\u2019s also add a custom method to this model: polls/models.py \u00b6 import datetime from django.db import models from django.utils import timezone class Question ( models . Model ): # ... def was_published_recently ( self ): return self . pub_date >= timezone . now () - datetime . timedelta ( days = 1 ) Note the addition of import datetime and from django.utils import timezone , to reference Python\u2019s standard datetime module and Django\u2019s\ntime-zone-related utilities in django.utils.timezone , respectively. If\nyou aren\u2019t familiar with time zone handling in Python, you can learn more in\nthe time zone support docs . Save these changes and start a new Python interactive shell by running python manage.py shell again: >>> from polls.models import Choice , Question # Make sure our __str__() addition worked. >>> Question . objects . all () <QuerySet [<Question: What's up?>]> # Django provides a rich database lookup API that's entirely driven by # keyword arguments. >>> Question . objects . filter ( id = 1 ) <QuerySet [<Question: What's up?>]> >>> Question . objects . filter ( question_text__startswith = \"What\" ) <QuerySet [<Question: What's up?>]> # Get the question that was published this year. >>> from django.utils import timezone >>> current_year = timezone . now () . year >>> Question . objects . get ( pub_date__year = current_year ) <Question: What's up?> # Request an ID that doesn't exist, this will raise an exception. >>> Question . objects . get ( id = 2 ) Traceback (most recent call last): ... DoesNotExist : Question matching query does not exist. # Lookup by a primary key is the most common case, so Django provides a # shortcut for primary-key exact lookups. # The following is identical to Question.objects.get(id=1). >>> Question . objects . get ( pk = 1 ) <Question: What's up?> # Make sure our custom method worked. >>> q = Question . objects . get ( pk = 1 ) >>> q . was_published_recently () True # Give the Question a couple of Choices. The create call constructs a new # Choice object, does the INSERT statement, adds the choice to the set # of available choices and returns the new Choice object. Django creates # a set (defined as \"choice_set\") to hold the \"other side\" of a ForeignKey # relation (e.g. a question's choice) which can be accessed via the API. >>> q = Question . objects . get ( pk = 1 ) # Display any choices from the related object set -- none so far. >>> q . choice_set . all () <QuerySet []> # Create three choices. >>> q . choice_set . create ( choice_text = \"Not much\" , votes = 0 ) <Choice: Not much> >>> q . choice_set . create ( choice_text = \"The sky\" , votes = 0 ) <Choice: The sky> >>> c = q . choice_set . create ( choice_text = \"Just hacking again\" , votes = 0 ) # Choice objects have API access to their related Question objects. >>> c . question <Question: What's up?> # And vice versa: Question objects get access to Choice objects. >>> q . choice_set . all () <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]> >>> q . choice_set . count () 3 # The API automatically follows relationships as far as you need. # Use double underscores to separate relationships. # This works as many levels deep as you want; there's no limit. # Find all Choices for any question whose pub_date is in this year # (reusing the 'current_year' variable we created above). >>> Choice . objects . filter ( question__pub_date__year = current_year ) <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]> # Let's delete one of the choices. Use delete() for that. >>> c = q . choice_set . filter ( choice_text__startswith = \"Just hacking\" ) >>> c . delete () For more information on model relations, see Accessing related objects . For more on how to use double underscores to perform\nfield lookups via the API, see Field lookups . For\nfull details on the database API, see our Database API reference . Introducing the Django Admin \u00b6 Philosophy Generating admin sites for your staff or clients to add, change, and delete\ncontent is tedious work that doesn\u2019t require much creativity. For that\nreason, Django entirely automates creation of admin interfaces for models. Django was written in a newsroom environment, with a very clear separation\nbetween \u201ccontent publishers\u201d and the \u201cpublic\u201d site. Site managers use the\nsystem to add news stories, events, sports scores, etc., and that content is\ndisplayed on the public site. Django solves the problem of creating a\nunified interface for site administrators to edit content. The admin isn\u2019t intended to be used by site visitors. It\u2019s for site\nmanagers. Creating an admin user \u00b6 First we\u2019ll need to create a user who can login to the admin site. Run the\nfollowing command: \uf17c/\uf179 \uf17a $ python manage.py createsuperuser ...\\> py manage.py createsuperuser Enter your desired username and press enter. Username: admin You will then be prompted for your desired email address: Email address: admin@example.com The final step is to enter your password. You will be asked to enter your\npassword twice, the second time as a confirmation of the first. Password: **********\nPassword (again): *********\nSuperuser created successfully. Start the development server \u00b6 The Django admin site is activated by default. Let\u2019s start the development\nserver and explore it. If the server is not running start it like so: \uf17c/\uf179 \uf17a $ python manage.py runserver ...\\> py manage.py runserver Now, open a web browser and go to \u201c/admin/\u201d on your local domain \u2013 e.g., http://127.0.0.1:8000/admin/ . You should see the admin\u2019s login screen: Since translation is turned on by default, if\nyou set LANGUAGE_CODE , the login screen will be displayed in the\ngiven language (if Django has appropriate translations). Enter the admin site \u00b6 Now, try logging in with the superuser account you created in the previous step.\nYou should see the Django admin index page: You should see a few types of editable content: groups and users. They are\nprovided by django.contrib.auth , the authentication framework shipped\nby Django. Make the poll app modifiable in the admin \u00b6 But where\u2019s our poll app? It\u2019s not displayed on the admin index page. Only one more thing to do: we need to tell the admin that Question objects\nhave an admin interface. To do this, open the polls/admin.py file, and\nedit it to look like this: polls/admin.py \u00b6 from django.contrib import admin from .models import Question admin . site . register ( Question ) Explore the free admin functionality \u00b6 Now that we\u2019ve registered Question , Django knows that it should be displayed on\nthe admin index page: Click \u201cQuestions\u201d. Now you\u2019re at the \u201cchange list\u201d page for questions. This page\ndisplays all the questions in the database and lets you choose one to change it.\nThere\u2019s the \u201cWhat\u2019s up?\u201d question we created earlier: Click the \u201cWhat\u2019s up?\u201d question to edit it: Things to note here: The form is automatically generated from the Question model. The different model field types ( DateTimeField , CharField ) correspond to the appropriate HTML\ninput widget. Each type of field knows how to display itself in the Django\nadmin. Each DateTimeField gets free JavaScript\nshortcuts. Dates get a \u201cToday\u201d shortcut and calendar popup, and times get\na \u201cNow\u201d shortcut and a convenient popup that lists commonly entered times. The bottom part of the page gives you a couple of options: Save \u2013 Saves changes and returns to the change-list page for this type of\nobject. Save and continue editing \u2013 Saves changes and reloads the admin page for\nthis object. Save and add another \u2013 Saves changes and loads a new, blank form for this\ntype of object. Delete \u2013 Displays a delete confirmation page. If the value of \u201cDate published\u201d doesn\u2019t match the time when you created the\nquestion in Tutorial 1 , it probably\nmeans you forgot to set the correct value for the TIME_ZONE setting.\nChange it, reload the page and check that the correct value appears. Change the \u201cDate published\u201d by clicking the \u201cToday\u201d and \u201cNow\u201d shortcuts. Then\nclick \u201cSave and continue editing.\u201d Then click \u201cHistory\u201d in the upper right.\nYou\u2019ll see a page listing all changes made to this object via the Django admin,\nwith the timestamp and username of the person who made the change: When you\u2019re comfortable with the models API and have familiarized yourself with\nthe admin site, read part 3 of this tutorial to learn\nabout how to add more views to our polls app. Previous page and next page Writing your first Django app, part 1 Writing your first Django app, part 3 Back to Top Additional Information Support Django! Tatsuo Ikeda donated to the Django Software Foundation to support Django development. Donate today! Contents Writing your first Django app, part 2 Database setup Creating models Activating models Playing with the API Introducing the Django Admin Creating an admin user Start the development server Enter the admin site Make the poll app modifiable in the admin Explore the free admin functionality Browse Prev: Writing your first Django app, part 1 Next: Writing your first Django app, part 3 Table of contents General Index Python Module Index You are here: Django 5.1 documentation Getting started Writing your first Django app, part 2 Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (Django 5.1): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://docs.djangoproject.com/en/stable/intro/tutorial01/": {
    "url": "https://docs.djangoproject.com/en/stable/intro/tutorial01/",
    "content": "Writing your first Django app, part 1 | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help el es fr id it ja ko pl pt-br zh-hans Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.2 dev Documentation version: 5.1 Writing your first Django app, part 1 \u00b6 Let\u2019s learn by example. Throughout this tutorial, we\u2019ll walk you through the creation of a basic\npoll application. It\u2019ll consist of two parts: A public site that lets people view polls and vote in them. An admin site that lets you add, change, and delete polls. We\u2019ll assume you have Django installed already. You can\ntell Django is installed and which version by running the following command\nin a shell prompt (indicated by the $ prefix): \uf17c/\uf179 \uf17a $ python -m django --version ...\\> py -m django --version If Django is installed, you should see the version of your installation. If it\nisn\u2019t, you\u2019ll get an error telling \u201cNo module named django\u201d. This tutorial is written for Django 5.1, which supports Python 3.10 and\nlater. If the Django version doesn\u2019t match, you can refer to the tutorial for\nyour version of Django by using the version switcher at the bottom right corner\nof this page, or update Django to the newest version. If you\u2019re using an older\nversion of Python, check What Python version can I use with Django? to find a compatible\nversion of Django. Where to get help: If you\u2019re having trouble going through this tutorial, please head over to\nthe Getting Help section of the FAQ. Creating a project \u00b6 If this is your first time using Django, you\u2019ll have to take care of some\ninitial setup. Namely, you\u2019ll need to auto-generate some code that establishes a\nDjango project \u2013 a collection of settings for an instance of Django,\nincluding database configuration, Django-specific options and\napplication-specific settings. From the command line, cd into a directory where you\u2019d like to store your\ncode and create a new directory named djangotutorial . (This directory name\ndoesn\u2019t matter to Django; you can rename it to anything you like.) \uf17c/\uf179 \uf17a $ mkdir djangotutorial ...\\> mkdir djangotutorial Then, run the following command to bootstrap a new Django project: \uf17c/\uf179 \uf17a $ django-admin startproject mysite djangotutorial ...\\> django-admin startproject mysite djangotutorial This will create a project called mysite inside the djangotutorial directory. If it didn\u2019t work, see Problems running django-admin . Note You\u2019ll need to avoid naming projects after built-in Python or Django\ncomponents. In particular, this means you should avoid using names like django (which will conflict with Django itself) or test (which\nconflicts with a built-in Python package). Let\u2019s look at what startproject created: djangotutorial/\n    manage.py\n    mysite/\n        __init__.py\n        settings.py\n        urls.py\n        asgi.py\n        wsgi.py These files are: manage.py : A command-line utility that lets you interact with this\nDjango project in various ways. You can read all the details about manage.py in django-admin and manage.py . mysite/ : A directory that is the actual Python package for your\nproject. Its name is the Python package name you\u2019ll need to use to import\nanything inside it (e.g. mysite.urls ). mysite/__init__.py : An empty file that tells Python that this\ndirectory should be considered a Python package. If you\u2019re a Python beginner,\nread more about packages in the official Python docs. mysite/settings.py : Settings/configuration for this Django\nproject. Django settings will tell you all about how settings\nwork. mysite/urls.py : The URL declarations for this Django project; a\n\u201ctable of contents\u201d of your Django-powered site. You can read more about\nURLs in URL dispatcher . mysite/asgi.py : An entry-point for ASGI-compatible web servers to\nserve your project. See How to deploy with ASGI for more details. mysite/wsgi.py : An entry-point for WSGI-compatible web servers to\nserve your project. See How to deploy with WSGI for more details. The development server \u00b6 Let\u2019s verify your Django project works. Change into the djangotutorial directory, if you haven\u2019t already, and run the following commands: \uf17c/\uf179 \uf17a $ python manage.py runserver ...\\> py manage.py runserver You\u2019ll see the following output on the command line: Performing system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have unapplied migrations; your app may not work properly until they are applied.\nRun 'python manage.py migrate' to apply them.\n\nMarch 31, 2025 - 15:50:53\nDjango version 5.1, using settings 'mysite.settings'\nStarting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C. Note Ignore the warning about unapplied database migrations for now; we\u2019ll deal\nwith the database shortly. Now that the server\u2019s running, visit http://127.0.0.1:8000/ with your web\nbrowser. You\u2019ll see a \u201cCongratulations!\u201d page, with a rocket taking off.\nIt worked! You\u2019ve started the Django development server, a lightweight web server written\npurely in Python. We\u2019ve included this with Django so you can develop things\nrapidly, without having to deal with configuring a production server \u2013 such as\nApache \u2013 until you\u2019re ready for production. Now\u2019s a good time to note: don\u2019t use this server in anything resembling a\nproduction environment. It\u2019s intended only for use while developing. (We\u2019re in\nthe business of making web frameworks, not web servers.) (To serve the site on a different port, see the runserver reference.) Automatic reloading of runserver The development server automatically reloads Python code for each request\nas needed. You don\u2019t need to restart the server for code changes to take\neffect. However, some actions like adding files don\u2019t trigger a restart,\nso you\u2019ll have to restart the server in these cases. Creating the Polls app \u00b6 Now that your environment \u2013 a \u201cproject\u201d \u2013 is set up, you\u2019re set to start\ndoing work. Each application you write in Django consists of a Python package that follows\na certain convention. Django comes with a utility that automatically generates\nthe basic directory structure of an app, so you can focus on writing code\nrather than creating directories. Projects vs. apps What\u2019s the difference between a project and an app? An app is a web\napplication that does something \u2013 e.g., a blog system, a database of\npublic records or a small poll app. A project is a collection of\nconfiguration and apps for a particular website. A project can contain\nmultiple apps. An app can be in multiple projects. Your apps can live anywhere in your Python path . In\nthis tutorial, we\u2019ll create our poll app inside the djangotutorial folder. To create your app, make sure you\u2019re in the same directory as manage.py and type this command: \uf17c/\uf179 \uf17a $ python manage.py startapp polls ...\\> py manage.py startapp polls That\u2019ll create a directory polls , which is laid out like this: polls/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py This directory structure will house the poll application. Write your first view \u00b6 Let\u2019s write the first view. Open the file polls/views.py and put the following Python code in it: polls/views.py \u00b6 from django.http import HttpResponse def index ( request ): return HttpResponse ( \"Hello, world. You're at the polls index.\" ) This is the most basic view possible in Django. To access it in a browser, we\nneed to map it to a URL - and for this we need to define a URL configuration,\nor \u201cURLconf\u201d for short. These URL configurations are defined inside each\nDjango app, and they are Python files named urls.py . To define a URLconf for the polls app, create a file polls/urls.py with the following content: polls/urls.py \u00b6 from django.urls import path from . import views urlpatterns = [ path ( \"\" , views . index , name = \"index\" ), ] Your app directory should now look like: polls/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    urls.py\n    views.py The next step is to configure the global URLconf in the mysite project to\ninclude the URLconf defined in polls.urls . To do this, add an import for django.urls.include in mysite/urls.py and insert an include() in the urlpatterns list, so you have: mysite/urls.py \u00b6 from django.contrib import admin from django.urls import include , path urlpatterns = [ path ( \"polls/\" , include ( \"polls.urls\" )), path ( \"admin/\" , admin . site . urls ), ] The path() function expects at least two arguments: route and view .\nThe include() function allows referencing other URLconfs.\nWhenever Django encounters include() , it chops off whatever\npart of the URL matched up to that point and sends the remaining string to the\nincluded URLconf for further processing. The idea behind include() is to make it easy to\nplug-and-play URLs. Since polls are in their own URLconf\n( polls/urls.py ), they can be placed under \u201c/polls/\u201d, or under\n\u201c/fun_polls/\u201d, or under \u201c/content/polls/\u201d, or any other path root, and the\napp will still work. When to use include() You should always use include() when you include other URL patterns.\nThe only exception is admin.site.urls , which is a pre-built URLconf\nprovided by Django for the default admin site. You have now wired an index view into the URLconf. Verify it\u2019s working with\nthe following command: \uf17c/\uf179 \uf17a $ python manage.py runserver ...\\> py manage.py runserver Go to http://localhost:8000/polls/ in your browser, and you should see the\ntext \u201c Hello, world. You\u2019re at the polls index. \u201d, which you defined in the index view. Page not found? If you get an error page here, check that you\u2019re going to http://localhost:8000/polls/ and not http://localhost:8000/ . When you\u2019re comfortable with the basic request and response flow, read part 2 of this tutorial to start working with the\ndatabase. Previous page and next page Quick install guide Writing your first Django app, part 2 Back to Top Additional Information Support Django! David Ulevitch donated to the Django Software Foundation to support Django development. Donate today! Contents Writing your first Django app, part 1 Creating a project The development server Creating the Polls app Write your first view Browse Prev: Quick install guide Next: Writing your first Django app, part 2 Table of contents General Index Python Module Index You are here: Django 5.1 documentation Getting started Writing your first Django app, part 1 Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (Django 5.1): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://code.djangoproject.com/": {
    "url": "https://code.djangoproject.com/",
    "content": "Django Django The web framework for perfectionists with deadlines. Overview Download Documentation News Community Code Issues About \u2665 Donate Issues Login Preferences View Tickets Reports Timeline Wiki Search wiki: WikiStart Context Navigation Start Page Index History Django's bug tracker and wiki Django is an open source project, run by volunteers - people just like you! We need your help to make Django as good as it can possibly be. Django is available under the \u200b BSD license . The source code repository is stored on \u200b GitHub . Getting involved Much of Django's infrastructure is hosted on GitHub, or uses a GitHub login. To log a ticket, or add content to this wiki, log in with a GitHub account . (You may also \u200b create a DjangoProject account and log in with that account .) Once you've logged in with your GitHub account, please read \u200b our contribution guide .  This document describes how the Django community works, and the various ways you can contribute. If this document doesn't answer your questions, please file a bug ! If you've read that document, and are looking for a way to contribute, why not try one of the following: Tickets : View active tickets, make bug reports and contribute feature requests. If your bug report is a security issue, DO NOT report it with a ticket. Please read our \u200b guide to reporting security issues . \"Easy Pickings\" Tickets : Work on simple tickets to get familiar with Django's code base and the contribution process. DjangoDesign : Are you a designer rather than a coder? We still want your input. Let us know how we can improve on Django's visual/UX design. Django release process The current branch under active development is \u200b \u200b Django 6.0 . There is a roadmap document describing the process and timeline for this release. The current pre-release branch is \u200b Django 5.2 . There is a roadmap document describing the process and timeline for this release. The current stable branch is \u200b Django 5.1 . See the \u200b supported versions table for the current state of other versions. Last modified 3 months ago Last modified on Jan 15, 2025, 3:30:00 PM Note: See TracWiki for help on using the wiki. Download in other formats: Plain Text Back to Top Search: Search Useful links Contribution Guide You'd like to contribute to Django but don't know how? This document will explain our process and how to get involved. \"Easy Pickings\" First time contributor and you're looking for something manageable? The \"easy pickings\" list is a good start. Security Policy You found a security issue in Django? You'd like to know more about our security policy? It's all in there. GitHub Want to peek under the hood and see Django's source code, file or help review a pull request? It's all on GitHub. Django Dashboard Confused about Trac's filtering system? This dashboard shows easy-to-read metrics and has links to pre-set filters to get you started. Django Discord server (#contributing-getting-started) Questions about a ticket? Stuck on how to write a unit test for your pull request? Come chat with us! Django Links Learn More About Django Getting Started with Django Team Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute to Django Submit a Bug Report a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind donors Design by Threespot & \u00a9 2005-2025 Django SoftwareFoundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation."
  },
  "https://docs.djangoproject.com/en/stable/topics/templates/": {
    "url": "https://docs.djangoproject.com/en/stable/topics/templates/",
    "content": "Templates | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help el es fr id it ja ko pl pt-br zh-hans Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.2 dev Documentation version: 5.1 Templates \u00b6 Being a web framework, Django needs a convenient way to generate HTML\ndynamically. The most common approach relies on templates. A template contains\nthe static parts of the desired HTML output as well as some special syntax\ndescribing how dynamic content will be inserted. For a hands-on example of\ncreating HTML pages with templates, see Tutorial 3 . A Django project can be configured with one or several template engines (or\neven zero if you don\u2019t use templates). Django ships built-in backends for its\nown template system, creatively called the Django template language (DTL), and\nfor the popular alternative Jinja2 . Backends for other template languages may\nbe available from third-parties. You can also write your own custom backend,\nsee Custom template backend Django defines a standard API for loading and rendering templates regardless\nof the backend. Loading consists of finding the template for a given identifier\nand preprocessing it, usually compiling it to an in-memory representation.\nRendering means interpolating the template with context data and returning the\nresulting string. The Django template language is Django\u2019s own\ntemplate system. Until Django 1.8 it was the only built-in option available.\nIt\u2019s a good template library even though it\u2019s fairly opinionated and sports a\nfew idiosyncrasies. If you don\u2019t have a pressing reason to choose another\nbackend, you should use the DTL, especially if you\u2019re writing a pluggable\napplication and you intend to distribute templates. Django\u2019s contrib apps that\ninclude templates, like django.contrib.admin ,\nuse the DTL. For historical reasons, both the generic support for template engines and the\nimplementation of the Django template language live in the django.template namespace. Warning The template system isn\u2019t safe against untrusted template authors. For\nexample, a site shouldn\u2019t allow its users to provide their own templates,\nsince template authors can do things like perform XSS attacks and access\nproperties of template variables that may contain sensitive information. The Django template language \u00b6 Syntax \u00b6 About this section This is an overview of the Django template language\u2019s syntax. For details\nsee the language syntax reference . A Django template is a text document or a Python string marked-up using the\nDjango template language. Some constructs are recognized and interpreted by the\ntemplate engine. The main ones are variables and tags. A template is rendered with a context. Rendering replaces variables with their\nvalues, which are looked up in the context, and executes tags. Everything else\nis output as is. The syntax of the Django template language involves four constructs. Variables \u00b6 A variable outputs a value from the context, which is a dict-like object\nmapping keys to values. Variables are surrounded by {{ and }} like this: My first name is {{ first_name }} . My last name is {{ last_name }} . With a context of {'first_name': 'John', 'last_name': 'Doe'} , this template\nrenders to: My first name is John. My last name is Doe. Dictionary lookup, attribute lookup and list-index lookups are implemented with\na dot notation: {{ my_dict.key }} {{ my_object.attribute }} {{ my_list.0 }} If a variable resolves to a callable, the template system will call it with no\narguments and use its result instead of the callable. Tags \u00b6 Tags provide arbitrary logic in the rendering process. This definition is deliberately vague. For example, a tag can output content,\nserve as a control structure e.g. an \u201cif\u201d statement or a \u201cfor\u201d loop, grab\ncontent from a database, or even enable access to other template tags. Tags are surrounded by {% and %} like this: {% csrf_token %} Most tags accept arguments: {% cycle 'odd' 'even' %} Some tags require beginning and ending tags: {% if user.is_authenticated %} Hello, {{ user.username }} . {% endif %} A reference of built-in tags is\navailable as well as instructions for writing custom tags . Filters \u00b6 Filters transform the values of variables and tag arguments. They look like this: {{ django | title }} With a context of {'django': 'the web framework for perfectionists with deadlines'} , this template renders to: The Web Framework For Perfectionists With Deadlines Some filters take an argument: {{ my_date | date :\"Y-m-d\" }} A reference of built-in filters is\navailable as well as instructions for writing custom filters . Comments \u00b6 Comments look like this: {# this won't be rendered #} A {% comment %} tag provides multi-line comments. Components \u00b6 About this section This is an overview of the Django template language\u2019s APIs. For details\nsee the API reference . Engine \u00b6 django.template.Engine encapsulates an instance of the Django\ntemplate system. The main reason for instantiating an Engine directly is to use the Django template\nlanguage outside of a Django project. django.template.backends.django.DjangoTemplates is a thin wrapper\nadapting django.template.Engine to Django\u2019s template backend API. Template \u00b6 django.template.Template represents a compiled template. Templates are\nobtained with Engine.get_template() or Engine.from_string() . Likewise django.template.backends.django.Template is a thin wrapper\nadapting django.template.Template to the common template API. Context \u00b6 django.template.Context holds some metadata in addition to the context\ndata. It is passed to Template.render() for rendering a template. django.template.RequestContext is a subclass of Context that stores the current HttpRequest and runs template context processors. The common API doesn\u2019t have an equivalent concept. Context data is passed in a\nplain dict and the current HttpRequest is passed\nseparately if needed. Loaders \u00b6 Template loaders are responsible for locating templates, loading them, and\nreturning Template objects. Django provides several built-in template loaders and supports custom template loaders . Context processors \u00b6 Context processors are functions that receive the current HttpRequest as an argument and return a dict of\ndata to be added to the rendering context. Their main use is to add common data shared by all templates to the context\nwithout repeating code in every view. Django provides many built-in context processors ,\nand you can implement your own additional context processors, too. Support for template engines \u00b6 Configuration \u00b6 Templates engines are configured with the TEMPLATES setting. It\u2019s a\nlist of configurations, one for each engine. The default value is empty. The settings.py generated by the startproject command defines a\nmore useful value: TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"DIRS\" : [], \"APP_DIRS\" : True , \"OPTIONS\" : { # ... some options here ... }, }, ] BACKEND is a dotted Python path to a template\nengine class implementing Django\u2019s template backend API. The built-in backends\nare django.template.backends.django.DjangoTemplates and django.template.backends.jinja2.Jinja2 . Since most engines load templates from files, the top-level configuration for\neach engine contains two common settings: DIRS defines a list of directories where the\nengine should look for template source files, in search order. APP_DIRS tells whether the engine should\nlook for templates inside installed applications. Each backend defines a\nconventional name for the subdirectory inside applications where its\ntemplates should be stored. While uncommon, it\u2019s possible to configure several instances of the same\nbackend with different options. In that case you should define a unique NAME for each engine. OPTIONS contains backend-specific settings. Usage \u00b6 The django.template.loader module defines two functions to load templates. get_template ( template_name , using = None ) [source] \u00b6 This function loads the template with the given name and returns a Template object. The exact type of the return value depends on the backend that loaded the\ntemplate. Each backend has its own Template class. get_template() tries each template engine in order until one succeeds.\nIf the template cannot be found, it raises TemplateDoesNotExist . If the template is found but\ncontains invalid syntax, it raises TemplateSyntaxError . How templates are searched and loaded depends on each engine\u2019s backend and\nconfiguration. If you want to restrict the search to a particular template engine, pass\nthe engine\u2019s NAME in the using argument. select_template ( template_name_list , using = None ) [source] \u00b6 select_template() is just like get_template() , except it takes a\nlist of template names. It tries each name in order and returns the first\ntemplate that exists. If loading a template fails, the following two exceptions, defined in django.template , may be raised: exception TemplateDoesNotExist ( msg , tried = None , backend = None , chain = None ) [source] \u00b6 This exception is raised when a template cannot be found. It accepts the\nfollowing optional arguments for populating the template postmortem on the debug page: backend The template backend instance from which the exception originated. tried A list of sources that were tried when finding the template. This is\nformatted as a list of tuples containing (origin, status) , where origin is an origin-like object and status is a string with the reason the template wasn\u2019t found. chain A list of intermediate TemplateDoesNotExist exceptions raised when trying to load a template. This is used by\nfunctions, such as get_template() , that\ntry to load a given template from multiple engines. exception TemplateSyntaxError ( msg ) [source] \u00b6 This exception is raised when a template was found but contains errors. Template objects returned by get_template() and select_template() must provide a render() method with the following signature: Template. render ( context = None , request = None ) \u00b6 Renders this template with a given context. If context is provided, it must be a dict . If it isn\u2019t\nprovided, the engine will render the template with an empty context. If request is provided, it must be an HttpRequest .\nThen the engine must make it, as well as the CSRF token, available in the\ntemplate. How this is achieved is up to each backend. Here\u2019s an example of the search algorithm. For this example the TEMPLATES setting is: TEMPLATES = [ { \"BACKEND\" : \"django.template.backends.django.DjangoTemplates\" , \"DIRS\" : [ \"/home/html/example.com\" , \"/home/html/default\" , ], }, { \"BACKEND\" : \"django.template.backends.jinja2.Jinja2\" , \"DIRS\" : [ \"/home/html/jinja2\" , ], }, ] If you call get_template('story_detail.html') , here are the files Django\nwill look for, in order: /home/html/example.com/story_detail.html ( 'django' engine) /home/html/default/story_detail.html ( 'django' engine) /home/html/jinja2/story_detail.html ( 'jinja2' engine) If you call select_template(['story_253_detail.html', 'story_detail.html']) ,\nhere\u2019s what Django will look for: /home/html/example.com/story_253_detail.html ( 'django' engine) /home/html/default/story_253_detail.html ( 'django' engine) /home/html/jinja2/story_253_detail.html ( 'jinja2' engine) /home/html/example.com/story_detail.html ( 'django' engine) /home/html/default/story_detail.html ( 'django' engine) /home/html/jinja2/story_detail.html ( 'jinja2' engine) When Django finds a template that exists, it stops looking. Use django.template.loader.select_template() for more flexibility You can use select_template() for flexible\ntemplate loading. For example, if you\u2019ve written a news story and want\nsome stories to have custom templates, use something like select_template(['story_%s_detail.html' % story.id, 'story_detail.html']) . That\u2019ll allow you to use a custom template for an\nindividual story, with a fallback template for stories that don\u2019t have\ncustom templates. It\u2019s possible \u2013 and preferable \u2013 to organize templates in subdirectories\ninside each directory containing templates. The convention is to make a\nsubdirectory for each Django app, with subdirectories within those\nsubdirectories as needed. Do this for your own sanity. Storing all templates in the root level of a\nsingle directory gets messy. To load a template that\u2019s within a subdirectory, use a slash, like so: get_template ( \"news/story_detail.html\" ) Using the same TEMPLATES option as above, this will attempt to load\nthe following templates: /home/html/example.com/news/story_detail.html ( 'django' engine) /home/html/default/news/story_detail.html ( 'django' engine) /home/html/jinja2/news/story_detail.html ( 'jinja2' engine) In addition, to cut down on the repetitive nature of loading and rendering\ntemplates, Django provides a shortcut function which automates the process. render_to_string ( template_name , context = None , request = None , using = None ) [source] \u00b6 render_to_string() loads a template like get_template() and\ncalls its render() method immediately. It takes the following\narguments. template_name The name of the template to load and render. If it\u2019s a list of template\nnames, Django uses select_template() instead of get_template() to find the template. context A dict to be used as the template\u2019s context for rendering. request An optional HttpRequest that will be available\nduring the template\u2019s rendering process. using An optional template engine NAME . The\nsearch for the template will be restricted to that engine. Usage example: from django.template.loader import render_to_string rendered = render_to_string ( \"my_template.html\" , { \"foo\" : \"bar\" }) See also the render() shortcut which calls render_to_string() and feeds the result into an HttpResponse suitable for returning from a view. Finally, you can use configured engines directly: engines \u00b6 Template engines are available in django.template.engines : from django.template import engines django_engine = engines [ \"django\" ] template = django_engine . from_string ( \"Hello {{ name }}!\" ) The lookup key \u2014 'django' in this example \u2014 is the engine\u2019s NAME . Built-in backends \u00b6 class DjangoTemplates [source] \u00b6 Set BACKEND to 'django.template.backends.django.DjangoTemplates' to configure a Django\ntemplate engine. When APP_DIRS is True , DjangoTemplates engines look for templates in the templates subdirectory of installed\napplications. This generic name was kept for backwards-compatibility. DjangoTemplates engines accept the following OPTIONS : 'autoescape' : a boolean that controls whether HTML autoescaping is\nenabled. It defaults to True . Warning Only set it to False if you\u2019re rendering non-HTML templates! 'context_processors' : a list of dotted Python paths to callables that\nare used to populate the context when a template is rendered with a request.\nThese callables take a request object as their argument and return a dict of items to be merged into the context. It defaults to an empty list. See RequestContext for more information. 'debug' : a boolean that turns on/off template debug mode. If it is True , the fancy error page will display a detailed report for any\nexception raised during template rendering. This report contains the\nrelevant snippet of the template with the appropriate line highlighted. It defaults to the value of the DEBUG setting. 'loaders' : a list of dotted Python paths to template loader classes.\nEach Loader class knows how to import templates from a particular\nsource. Optionally, a tuple can be used instead of a string. The first item\nin the tuple should be the Loader class name, and subsequent items are\npassed to the Loader during initialization. The default depends on the values of DIRS and APP_DIRS . See Loader types for details. 'string_if_invalid' : the output, as a string, that the template system\nshould use for invalid (e.g. misspelled) variables. It defaults to an empty string. See How invalid variables are handled for details. 'file_charset' : the charset used to read template files on disk. It defaults to 'utf-8' . 'libraries' : A dictionary of labels and dotted Python paths of template\ntag modules to register with the template engine. This can be used to add\nnew libraries or provide alternate labels for existing ones. For example: OPTIONS = { \"libraries\" : { \"myapp_tags\" : \"path.to.myapp.tags\" , \"admin.urls\" : \"django.contrib.admin.templatetags.admin_urls\" , }, } Libraries can be loaded by passing the corresponding dictionary key to\nthe {% load %} tag. 'builtins' : A list of dotted Python paths of template tag modules to\nadd to built-ins . For example: OPTIONS = { \"builtins\" : [ \"myapp.builtins\" ], } Tags and filters from built-in libraries can be used without first calling\nthe {% load %} tag. class Jinja2 [source] \u00b6 Requires Jinja2 to be installed: \uf17c/\uf179 \uf17a $ python -m pip install Jinja2 ...\\> py -m pip install Jinja2 Set BACKEND to 'django.template.backends.jinja2.Jinja2' to configure a Jinja2 engine. When APP_DIRS is True , Jinja2 engines\nlook for templates in the jinja2 subdirectory of installed applications. The most important entry in OPTIONS is 'environment' . It\u2019s a dotted Python path to a callable returning a Jinja2\nenvironment. It defaults to 'jinja2.Environment' . Django invokes that\ncallable and passes other options as keyword arguments. Furthermore, Django\nadds defaults that differ from Jinja2\u2019s for a few options: 'autoescape' : True 'loader' : a loader configured for DIRS and APP_DIRS 'auto_reload' : settings.DEBUG 'undefined' : DebugUndefined if settings.DEBUG else Undefined Jinja2 engines also accept the following OPTIONS : 'context_processors' : a list of dotted Python paths to callables that\nare used to populate the context when a template is rendered with a request.\nThese callables take a request object as their argument and return a dict of items to be merged into the context. It defaults to an empty list. Using context processors with Jinja2 templates is discouraged. Context processors are useful with Django templates because Django templates\ndon\u2019t support calling functions with arguments. Since Jinja2 doesn\u2019t have\nthat limitation, it\u2019s recommended to put the function that you would use as a\ncontext processor in the global variables available to the template using jinja2.Environment as described below. You can then call that function in\nthe template: {{ function ( request ) }} Some Django templates context processors return a fixed value. For Jinja2\ntemplates, this layer of indirection isn\u2019t necessary since you can add\nconstants directly in jinja2.Environment . The original use case for adding context processors for Jinja2 involved: Making an expensive computation that depends on the request. Needing the result in every template. Using the result multiple times in each template. Unless all of these conditions are met, passing a function to the template is\nmore in line with the design of Jinja2. The default configuration is purposefully kept to a minimum. If a template is\nrendered with a request (e.g. when using render() ),\nthe Jinja2 backend adds the globals request , csrf_input , and csrf_token to the context. Apart from that, this backend doesn\u2019t create a\nDjango-flavored environment. It doesn\u2019t know about Django filters and tags.\nIn order to use Django-specific APIs, you must configure them into the\nenvironment. For example, you can create myproject/jinja2.py with this content: from django.templatetags.static import static from django.urls import reverse from jinja2 import Environment def environment ( ** options ): env = Environment ( ** options ) env . globals . update ( { \"static\" : static , \"url\" : reverse , } ) return env and set the 'environment' option to 'myproject.jinja2.environment' . Then you could use the following constructs in Jinja2 templates: < img src = \" {{ static ( 'path/to/company-logo.png' ) }} \" alt = \"Company Logo\" > < a href = \" {{ url ( 'admin:index' ) }} \" > Administration </ a > The concepts of tags and filters exist both in the Django template language\nand in Jinja2 but they\u2019re used differently. Since Jinja2 supports passing\narguments to callables in templates, many features that require a template tag\nor filter in Django templates can be achieved by calling a function in Jinja2\ntemplates, as shown in the example above. Jinja2\u2019s global namespace removes the\nneed for template context processors. The Django template language doesn\u2019t have\nan equivalent of Jinja2 tests. Previous page and next page Form Assets (the Media class) Class-based views Back to Top Additional Information Support Django! Sandro Milhano donated to the Django Software Foundation to support Django development. Donate today! Contents Templates The Django template language Syntax Variables Tags Filters Comments Components Engine Template Context Loaders Context processors Support for template engines Configuration Usage Built-in backends Browse Prev: Form Assets (the Media class) Next: Class-based views Table of contents General Index Python Module Index You are here: Django 5.1 documentation Using Django Templates Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (Django 5.1): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://docs.djangoproject.com/en/dev/internals/contributing/": {
    "url": "https://docs.djangoproject.com/en/dev/internals/contributing/",
    "content": "Contributing to Django | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.1 5.2 Documentation version: development Contributing to Django \u00b6 Django is a community that lives on its volunteers. As it keeps growing, we\nalways need more people to help others. You can contribute in many ways, either\non the framework itself or in the wider ecosystem. Communication channels \u00b6 We\u2019re passionate about helping Django users make the jump to contributing\nmembers of the community. Communication is key - working on Django is being\npart of a conversation. Join it, to become familiar with what we\u2019re doing and\nhow we talk about it. You\u2019ll be able to form relationships with more\nexperienced contributors who are there to help guide you towards success. Join the Django community \u00b6 There are several ways you can help the Django community and others to maintain\na great ecosystem to work in: Join the Django Forum . This forum is a place for discussing the Django\nframework and applications and projects that use it. This is also a good\nplace to ask and answer any questions related to installing, using, or\ncontributing to Django. Join the Django Discord server to discuss and answer questions. By\nexplaining Django to other users, you\u2019re going to learn a lot about the\nframework yourself. Blog about Django. We syndicate all the Django blogs we know about on\nthe community page ; if you\u2019d like to see your blog on that page you\ncan register it here . Contribute to open-source Django projects, write some documentation, or\nrelease your own code as an open-source pluggable application. The\necosystem of pluggable applications is a big strength of Django, help us\nbuild it! Getting started \u00b6 Django encourages and welcomes new contributors, and makes an effort to help\nthem become experienced, confident contributors to Open Source Software (OSS).\nOur documentation contains guidance for first-time contributors, including: An overview of the contributing process and what's involved. Work on the Django framework \u00b6 If you enjoy working with Django, wait until you start working on it.\nReally, anyone can do something to improve Django, which will improve the\nexperience of lots of people! The work on Django itself falls into three major areas: Contributing code \u00b6 Fix a bug, or add a new feature. You can make a pull request and see your\ncode in the next version of Django. Contributing code Tutorials How-to guides Related topics Contributing documentation \u00b6 Django\u2019s documentation is one of its key strengths. It\u2019s informative and\nthorough. You can help to improve the documentation and keep it relevant as the\nframework evolves. Writing documentation The Django documentation process How the documentation is organized How to start contributing documentation Writing style Commonly used terms Django-specific terminology Guidelines for reStructuredText files Django-specific markup Documenting new features Minimizing images An example Translating documentation django-admin man page Localizing Django \u00b6 Django is translated into over 100 languages - There\u2019s even some translation\nfor Klingon?! The i18n team is always looking for translators to help maintain\nand increase language reach. Localizing Django Translations Formats Documentation Other ways of contributing \u00b6 Explore additional avenues of contributing to Django beyond coding. Django\u2019s ticket tracker is the central hub for managing issues, improvements, and\ncontributions to Django. It\u2019s a valuable resource where you can report bugs you\nencounter or assist in triaging existing tickets to ensure a smooth development\nworkflow. Explore the ways you can make a difference below, and join us in\nmaking Django better for everyone. Reporting bugs and requesting features Reporting bugs Reporting user interface bugs and features Requesting features Requesting performance optimizations How we make decisions Triaging tickets Triage workflow Triage stages Other triage attributes Closing Tickets How can I help with triaging? Bisecting a regression We\u2019re looking forward to working with you. Welcome aboard! Previous page and next page Django internals Advice for new contributors Back to Top Additional Information Support Django! Marlton Premises Liability Lawyer donated to the Django Software Foundation to support Django development. Donate today! Contents Contributing to Django Communication channels Join the Django community Getting started Work on the Django framework Contributing code Contributing documentation Localizing Django Other ways of contributing Browse Prev: Django internals Next: Advice for new contributors Table of contents General Index Python Module Index You are here: Django dev documentation Django internals Contributing to Django Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (development version): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://github.com/django": {
    "url": "https://github.com/django",
    "content": "Django \u00b7 GitHub Skip to content Navigation Menu Toggle navigation Sign in django Product GitHub Copilot Write better code with AI GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert Django Verified We've verified that the organization django controls the domain: www.djangoproject.com Learn more about verified organizations 8.3k followers Internet https://www.djangoproject.com/ Mastodon @django@fosstodon.org Sponsor Overview Repositories Projects Packages People More Overview Repositories Projects Packages People README.md Django The web framework for perfectionists with deadlines. Let's go! Here are some useful links to get you started: The Django project home page . The awesome docs for the current version . The Forum in case you need some help And since you're on GitHub, the contributing guide , for getting involved. Dive into the repos below. Welcome! \u26f5\ufe0f Code of Conduct All Django projects are governed by the Django Code of Conduct . Please review that and keep it in mind in all interactions. DEI Project Badge Django has been awarded the CHAOSS DEI Bronze badge .\nThis represents our commitment to centering diversity, equity, and inclusion in our community, as found in our DEI.md file. Note that at the time of writing, CHAOSS DEI Project Badging currently offers one badge level: Bronze. Pinned Loading django django Public The Web framework for perfectionists with deadlines. Python 83k 32.4k djangoproject.com djangoproject.com Public Source code to djangoproject.com PostScript 1.9k 992 channels channels Public Developer-friendly asynchrony for Django Python 6.2k 813 deps deps Public Django Enhancement Proposals 487 84 dsf-working-groups dsf-working-groups Public Working group mechanism for the DSF 37 12 Repositories Loading Type Select type All Public Sources Forks Archived Mirrors Templates Language Select language All Dockerfile Makefile PostScript Python Sort Select order Last updated Name Stars Showing 10 of 24 repositories djangoproject.com Public Source code to djangoproject.com django/djangoproject.com\u2019s past year of commit activity PostScript 1,934 BSD-3-Clause 992 108 (14 issues need help) 51 Updated Apr 1, 2025 django Public The Web framework for perfectionists with deadlines. django/django\u2019s past year of commit activity Python 82,982 BSD-3-Clause 32,439 6 301 Updated Apr 1, 2025 django-asv Public Benchmarks for Django using asv django/django-asv\u2019s past year of commit activity Python 42 MIT 16 8 4 Updated Apr 1, 2025 channels Public Developer-friendly asynchrony for Django django/channels\u2019s past year of commit activity Python 6,207 BSD-3-Clause 813 82 24 Updated Mar 30, 2025 channels_redis Public Redis channel layer backend for Django Channels django/channels_redis\u2019s past year of commit activity Python 618 BSD-3-Clause 197 37 10 Updated Mar 30, 2025 django-docs-translations Public Translations of the Django documentation. Questions and discussions happen on https://forum.djangoproject.com/c/internals/i18n/14 . The previously used group on Google Groups is no longer being used. If you are looking for old topics, you may be able to find them at https://groups.google.com/forum/#!forum/django-i18n . django/django-docs-translations\u2019s past year of commit activity Makefile 64 34 0 0 Updated Mar 29, 2025 code.djangoproject.com Public Configuration for Django's Trac instance (code.djangoproject.com) django/code.djangoproject.com\u2019s past year of commit activity Python 52 BSD-3-Clause 53 21 6 Updated Mar 23, 2025 django-localflavor Public Country-specific Django helpers, formerly of contrib fame django/django-localflavor\u2019s past year of commit activity Python 857 BSD-3-Clause 296 15 15 Updated Mar 22, 2025 steering-council Public Meeting notes of the Django Steering Council django/steering-council\u2019s past year of commit activity 10 0 0 0 Updated Mar 19, 2025 dsf-working-groups Public Working group mechanism for the DSF django/dsf-working-groups\u2019s past year of commit activity 37 12 6 6 Updated Mar 5, 2025 View all repositories People View all Sponsors View all Top languages Python Makefile PostScript Dockerfile Most used topics Loading\u2026 Footer \u00a9 2025 GitHub,\u00a0Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can\u2019t perform that action at this time."
  },
  "https://docs.djangoproject.com/": {
    "url": "https://docs.djangoproject.com/",
    "content": "Django documentation | Django documentation | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Documentation Search: Search Getting Help el es fr id it ja ko pl pt-br zh-hans Language: en 1.8 1.10 1.11 2.0 2.1 2.2 3.0 3.1 3.2 4.0 4.1 4.2 5.0 5.2 dev Documentation version: 5.1 Django documentation \u00b6 Everything you need to know about Django. First steps \u00b6 Are you new to Django or to programming? This is the place to start! From scratch: Overview | Installation Tutorial: Part 1: Requests and responses | Part 2: Models and the admin site | Part 3: Views and templates | Part 4: Forms and generic views | Part 5: Testing | Part 6: Static files | Part 7: Customizing the admin site | Part 8: Adding third-party packages Advanced Tutorials: How to write reusable apps | Writing your first contribution to Django Getting help \u00b6 Having trouble? We\u2019d like to help! Try the FAQ \u2013 it\u2019s got answers to many common questions. Looking for specific information? Try the Index , Module Index or\nthe detailed table of contents . Not found anything? See FAQ: Getting Help for information on getting support\nand asking questions to the community. Report bugs with Django in our ticket tracker . How the documentation is organized \u00b6 Django has a lot of documentation. A high-level overview of how it\u2019s organized\nwill help you know where to look for certain things: Tutorials take you by the hand through a series of\nsteps to create a web application. Start here if you\u2019re new to Django or web\napplication development. Also look at the \u201c First steps \u201d. Topic guides discuss key topics and concepts at a\nfairly high level and provide useful background information and explanation. Reference guides contain technical reference for APIs and\nother aspects of Django\u2019s machinery. They describe how it works and how to\nuse it but assume that you have a basic understanding of key concepts. How-to guides are recipes. They guide you through the\nsteps involved in addressing key problems and use-cases. They are more\nadvanced than tutorials and assume some knowledge of how Django works. The model layer \u00b6 Django provides an abstraction layer (the \u201cmodels\u201d) for structuring and\nmanipulating the data of your web application. Learn more about it below: Models: Introduction to models | Field types | Indexes | Meta options | Model class QuerySets: Making queries | QuerySet method reference | Lookup expressions Model instances: Instance methods | Accessing related objects Migrations: Introduction to Migrations | Operations reference | SchemaEditor | Writing migrations Advanced: Managers | Raw SQL | Transactions | Aggregation | Search | Custom fields | Multiple databases | Custom lookups | Query Expressions | Conditional Expressions | Database Functions Other: Supported databases | Legacy databases | Providing initial data | Optimize database access | PostgreSQL specific features The view layer \u00b6 Django has the concept of \u201cviews\u201d to encapsulate the logic responsible for\nprocessing a user\u2019s request and for returning the response. Find all you need\nto know about views via the links below: The basics: URLconfs | View functions | Shortcuts | Decorators | Asynchronous Support Reference: Built-in Views | Request/response objects | TemplateResponse objects File uploads: Overview | File objects | Storage API | Managing files | Custom storage Class-based views: Overview | Built-in display views | Built-in editing views | Using mixins | API reference | Flattened index Advanced: Generating CSV | Generating PDF Middleware: Overview | Built-in middleware classes The template layer \u00b6 The template layer provides a designer-friendly syntax for rendering the\ninformation to be presented to the user. Learn how this syntax can be used by\ndesigners and how it can be extended by programmers: The basics: Overview For designers: Language overview | Built-in tags and filters | Humanization For programmers: Template API | Custom tags and filters | Custom template backend Forms \u00b6 Django provides a rich framework to facilitate the creation of forms and the\nmanipulation of form data. The basics: Overview | Form API | Built-in fields | Built-in widgets Advanced: Forms for models | Integrating media | Formsets | Customizing validation The development process \u00b6 Learn about the various components and tools to help you in the development and\ntesting of Django applications: Settings: Overview | Full list of settings Applications: Overview Exceptions: Overview django-admin and manage.py: Overview | Adding custom commands Testing: Introduction | Writing and running tests | Included testing tools | Advanced topics Deployment: Overview | WSGI servers | ASGI servers | Deploying static files | Tracking code errors by email | Deployment checklist The admin \u00b6 Find all you need to know about the automated admin interface, one of Django\u2019s\nmost popular features: Admin site Admin actions Admin documentation generator Security \u00b6 Security is a topic of paramount importance in the development of web\napplications and Django provides multiple protection tools and mechanisms: Security overview Disclosed security issues in Django Clickjacking protection Cross Site Request Forgery protection Cryptographic signing Security Middleware Internationalization and localization \u00b6 Django offers a robust internationalization and localization framework to\nassist you in the development of applications for multiple languages and world\nregions: Overview | Internationalization | Localization | Localized web UI formatting and form input Time zones Performance and optimization \u00b6 There are a variety of techniques and tools that can help get your code running\nmore efficiently - faster, and using fewer system resources. Performance and optimization overview Geographic framework \u00b6 GeoDjango intends to be a world-class geographic\nweb framework. Its goal is to make it as easy as possible to build GIS web\napplications and harness the power of spatially enabled data. Common web application tools \u00b6 Django offers multiple tools commonly needed in the development of web\napplications: Authentication: Overview | Using the authentication system | Password management | Customizing authentication | API Reference Caching Logging Sending emails Syndication feeds (RSS/Atom) Pagination Messages framework Serialization Sessions Sitemaps Static files management Data validation Other core functionalities \u00b6 Learn about some other core functionalities of the Django framework: Conditional content processing Content types and generic relations Flatpages Redirects Signals System check framework The sites framework Unicode in Django The Django open-source project \u00b6 Learn about the development process for the Django project itself and about how\nyou can contribute: Community: Contributing to Django | The release process | Team organization | The Django source code repository | Security policies | Mailing lists and Forum Design philosophies: Overview Documentation: About this documentation Third-party distributions: Overview Django over time: API stability | Release notes and upgrading instructions | Deprecation Timeline Previous page and next page Django documentation contents Getting started Back to Top Additional Information Support Django! Bom-Neg\u00f3cio.com donated to the Django Software Foundation to support Django development. Donate today! Browse Prev: Django documentation contents Next: Getting started Table of contents General Index Python Module Index You are here: Django 5.1 documentation Django documentation Getting help FAQ Try the FAQ \u2014 it's got answers to many common questions. Index , Module Index , or Table of Contents Handy when looking for specific information. Django Discord Server Join the Django Discord Community. Official Django Forum Join the community on the Django Forum. Ticket tracker Report bugs with Django or Django documentation in our ticket tracker. Download: Offline (Django 5.1): HTML | PDF | ePub Provided by Read the Docs . Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://github.com/django/django": {
    "url": "https://github.com/django/django",
    "content": "GitHub - django/django: The Web framework for perfectionists with deadlines. Skip to content Navigation Menu Toggle navigation Sign in Product GitHub Copilot Write better code with AI GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert django / django Public Notifications You must be signed in to change notification settings Fork 32.4k Star 83k The Web framework for perfectionists with deadlines. www.djangoproject.com/ License BSD-3-Clause, Unknown licenses found Licenses found BSD-3-Clause LICENSE Unknown LICENSE.python 83k stars 32.4k forks Branches Tags Activity Star Notifications You must be signed in to change notification settings Code Pull requests 301 Actions Security Insights Additional navigation options Code Pull requests Actions Security Insights django/django main Branches Tags Go to file Code Folders and files Name Name Last commit message Last commit date Latest commit History 33,471 Commits .github .github .tx .tx django django docs docs extras extras js_tests js_tests scripts scripts tests tests .editorconfig .editorconfig .flake8 .flake8 .git-blame-ignore-revs .git-blame-ignore-revs .gitattributes .gitattributes .gitignore .gitignore .pre-commit-config.yaml .pre-commit-config.yaml .readthedocs.yml .readthedocs.yml AUTHORS AUTHORS CONTRIBUTING.rst CONTRIBUTING.rst Gruntfile.js Gruntfile.js INSTALL INSTALL LICENSE LICENSE LICENSE.python LICENSE.python MANIFEST.in MANIFEST.in README.rst README.rst eslint.config.mjs eslint.config.mjs package.json package.json pyproject.toml pyproject.toml tox.ini tox.ini View all files Repository files navigation README Code of conduct BSD-3-Clause license License Security Django Django is a high-level Python web framework that encourages rapid development\nand clean, pragmatic design. Thanks for checking it out. All documentation is in the \" docs \" directory and online at https://docs.djangoproject.com/en/stable/ . If you're just getting started,\nhere's how we recommend you read the docs: First, read docs/intro/install.txt for instructions on installing Django. Next, work through the tutorials in order ( docs/intro/tutorial01.txt , docs/intro/tutorial02.txt , etc.). If you want to set up an actual deployment server, read docs/howto/deployment/index.txt for instructions. You'll probably want to read through the topical guides (in docs/topics )\nnext; from there you can jump to the HOWTOs (in docs/howto ) for specific\nproblems, and check out the reference ( docs/ref ) for gory details. See docs/README for instructions on building an HTML version of the docs. Docs are updated rigorously. If you find any problems in the docs, or think\nthey should be clarified in any way, please take 30 seconds to fill out a\nticket here: https://code.djangoproject.com/newticket To get more help: Join the Django Discord community . Join the community on the Django Forum . To contribute to Django: Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\ninformation about getting involved. To run Django's test suite: Follow the instructions in the \"Unit tests\" section of docs/internals/contributing/writing-code/unit-tests.txt , published online at https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests Supporting the Development of Django Django's development depends on your contributions. If you depend on Django, remember to support the Django Software Foundation: https://www.djangoproject.com/fundraising/ About The Web framework for perfectionists with deadlines. www.djangoproject.com/ Topics python django views framework orm web apps templates models Resources Readme License BSD-3-Clause, Unknown licenses found Licenses found BSD-3-Clause LICENSE Unknown LICENSE.python Code of conduct Code of conduct Security policy Security policy Activity Custom properties Stars 83k stars Watchers 2.3k watching Forks 32.4k forks Report repository Releases 438 tags Sponsor this project https://www.djangoproject.com/fundraising/ Learn more about GitHub Sponsors Packages 0 No packages published Used by 1.9m + 1,906,000 Contributors 2,639 + 2,625 contributors Languages Python 97.2% Jinja 1.4% Other 1.4% Footer \u00a9 2025 GitHub,\u00a0Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can\u2019t perform that action at this time."
  },
  "https://www.djangoproject.com/start/": {
    "url": "https://www.djangoproject.com/start/",
    "content": "Getting started with Django | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme It\u2019s quick & easy to get up and running with Django . Download version 5.1.7 Getting started with Django Depending how new you are to Django, you can try a tutorial , or just dive into the documentation . Want to learn more about Django? Read the overview to see whether Django is right for your project. Django overview Install Django Before you can use Django, you\u2019ll need to install it. Our complete installation guide covers all the possibilities; this guide will get you to a simple, minimal installation that\u2019ll work while you walk through the introduction. Django installation guide Write your first Django app Installed Django already? Good. Now try this tutorial , which walks you through creating a basic poll application. It\u2019s got two parts: A public site that lets people view polls and vote in them. An administrative interface that lets you add, change and delete polls. Take the tutorial Sharpen your skills The official Django documentation covers everything you need to know about Django (and then some). Read the docs Join the community You can help make us better . Find out about upcoming Django events, learn what\u2019s on other Django developers\u2019 minds, find and post jobs, and more. Join us Intro to Django Object-relational mapper De\ufb01ne your data models entirely in Python. You get a rich, dynamic database-access API for free \u2014 but you can still write SQL if needed. Read more from django.db import models class Band ( models . Model ): \"\"\"A model of a rock band.\"\"\" name = models . CharField ( max_length = 200 ) can_rock = models . BooleanField ( default = True ) class Member ( models . Model ): \"\"\"A model of a rock band member.\"\"\" name = models . CharField ( \"Member's name\" , max_length = 200 ) instrument = models . CharField ( choices = ( ( \"g\" , \"Guitar\" ), ( \"b\" , \"Bass\" ), ( \"d\" , \"Drums\" ), ), max_length = 1 , ) band = models . ForeignKey ( \"Band\" ) URLs and views A clean, elegant URL scheme is an important detail in a high-quality web application. Django encourages beautiful URL design and doesn\u2019t put any cruft in URLs, like .php or .asp. To design URLs for an application, you create a Python module called a URLconf. Like a table of contents for your app, it contains a simple mapping between URL patterns and your views. Read more from django.urls import path from . import views urlpatterns = [ path ( \"bands/\" , views . band_listing , name = \"band-list\" ), path ( \"bands/<int:band_id>/\" , views . band_detail , name = \"band-detail\" ), path ( \"bands/search/\" , views . band_search , name = \"band-search\" ), ] from bands.models import Band from django.shortcuts import render def band_listing ( request ): \"\"\"A view of all bands.\"\"\" bands = Band . objects . all () return render ( request , \"bands/band_listing.html\" , { \"bands\" : bands }) Templates Django\u2019s template language is designed to strike a balance between power and ease. It\u2019s designed to feel comfortable and easy-to-learn to those used to working with HTML, like designers and front-end developers. But it is also flexible and highly extensible, allowing developers to augment the template language as needed. Read more <html> <head> <title> {% translate \"Band Listing\" %} </title> </head> <body> <h1> {% translate \"All Bands\" %} </h1> <ul> {% for band in bands %} <li> <h2><a href=\" {{ band.get_absolute_url }} \"> {{ band.name }} </a></h2> {% if band.can_rock %} <p> {% translate \"This band can rock!\" %} </p> {% endif %} </li> {% endfor %} </ul> </body> </html> Forms Django provides a powerful form library that handles rendering forms as HTML, validating user-submitted data, and converting that data to native Python types. Django also provides a way to generate forms from your existing models and use those forms to create and update data. Read more from django import forms class BandContactForm ( forms . Form ): subject = forms . CharField ( max_length = 100 ) message = forms . TextField () sender = forms . EmailField () cc_myself = forms . BooleanField ( required = False ) Authentication Django comes with a full-featured and secure authentication system. It handles user accounts, groups, permissions and cookie-based user sessions. This lets you easily build sites that allow users to create accounts and safely log in/out. Read more from django.contrib.auth.decorators import login_required from django.shortcuts import render @login_required def my_protected_view ( request ): \"\"\"A view that can only be accessed by logged-in users\"\"\" return render ( request , \"protected.html\" , { \"current_user\" : request . user }) Admin One of the most powerful parts of Django is its automatic admin interface. It reads metadata in your models to provide a powerful and production-ready interface that content producers can immediately use to start managing content on your site. It\u2019s easy to set up and provides many hooks for customization. Read more from bands.models import Band , Member from django.contrib import admin class MemberAdmin ( admin . ModelAdmin ): \"\"\"Customize the look of the auto-generated admin for the Member model\"\"\" list_display = ( \"name\" , \"instrument\" ) list_filter = ( \"band\" ,) admin . site . register ( Band ) # Use the default options admin . site . register ( Member , MemberAdmin ) # Use the customized options Internationalization Django offers full support for translating text into different languages, plus locale-specific formatting of dates, times, numbers, and time zones. It lets developers and template authors specify which parts of their apps should be translated or formatted for local languages and cultures, and it uses these hooks to localize web applications for particular users according to their preferences. Read more from django.shortcuts import render from django.utils.translation import gettext def homepage ( request ): \"\"\" Shows the homepage with a welcome message that is translated in the user's language. \"\"\" message = gettext ( \"Welcome to our site!\" ) return render ( request , \"homepage.html\" , { \"message\" : message }) {% load i18n %} <html> <head> <title> {% translate \"Homepage - Hall of Fame\" %} </title> </head> <body> {# Translated in the view: #} <h1> {{ message }} </h1> <p> {% blocktranslate count member_count = bands.count %} Here is the only band in the hall of fame: {% plural %} Here are all the {{ member_count }} bands in the hall of fame: {% endblocktranslate %} </p> <ul> {% for band in bands %} <li> <h2><a href=\" {{ band.get_absolute_url }} \"> {{ band.name }} </a></h2> {% if band.can_rock %} <p> {% translate 'This band can rock!' %} </p> {% endif %} </li> {% endfor %} </ul> </body> </html> Security Django provides multiple protections against: Clickjacking Cross-site scripting Cross Site Request Forgery (CSRF) SQL injection Remote code execution Read more Back to Top Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/start/overview/": {
    "url": "https://www.djangoproject.com/start/overview/",
    "content": "Django overview | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Django was invented to meet fast-moving newsroom deadlines , while satisfying the tough requirements of experienced web developers . Why Django? With Django, you can take web applications from concept to launch in a matter of hours. Django takes care of much of the hassle of web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source. Ridiculously fast. Django was designed to help developers take applications from concept to completion as quickly as possible. See how fast you can start building Fully loaded. Django includes dozens of extras you can use to handle common web development tasks. Django takes care of user authentication, content administration, site maps, RSS feeds, and many more tasks \u2014 right out of the box. See what\u2019s included Reassuringly secure. Django takes security seriously and helps developers avoid many common security mistakes, such as SQL injection, cross-site scripting, cross-site request forgery and clickjacking. Its user authentication system provides a secure way to manage user accounts and passwords. Read our security overview Exceedingly scalable. Some of the busiest sites on the planet use Django\u2019s ability to quickly and flexibly scale to meet the heaviest traffic demands. Learn more about scaling Django applications Incredibly versatile. Companies, organizations and governments have used Django to build all sorts of things \u2014 from content management systems to social networks to scientific computing platforms. Get started with Django Back to Top Sites Using Django Disqus Instagram Knight Foundation MacArthur Foundation Mozilla National Geographic Open Knowledge Foundation Pinterest Open Stack Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.djangoproject.com/fundraising/": {
    "url": "https://www.djangoproject.com/fundraising/",
    "content": "Support Django | Django Django The web framework for perfectionists with deadlines. Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Menu Main navigation Overview Download Documentation News Community Code Issues About \u2665 Donate Toggle theme (current theme: auto) Toggle theme (current theme: light) Toggle theme (current theme: dark) Toggle Light / Dark / Auto color theme Support Django development by donating to the Django Software Foundation . Support the Django Software Foundation! 29% 28.8% funded $57,661.00 donated of US\u00a0$200,000.00 goal for 2025 Companies able to make a larger donation ($2,000+/year) are invited to apply to be Corporate Members here . Help us make it happen: Monthly donation Quarterly donation Yearly donation One-time donation US $25 US $50 US $100 US $250 US $500 US $750 US $1,000 US $1,250 US $2,500 Other amount US $ (integer only) Your logo will be visible below if you contribute at least US\u00a0$1,000.00. Other ways to give Official merchandise store - Buy official t-shirts, accessories, and more to support Django. Sponsor Django via GitHub Sponsors . Benevity Workplace Giving Program - If your employer participates, you can make donations to the DSF via payroll deduction. Why give to the Django Software Foundation? Our main focus is direct support of Django's developers. This means: Organizing and funding development sprints so that Django's developers can meet in person. Helping key developers attend these sprints and other community events by covering travel expenses to official Django events. Providing financial assistance to community development and outreach projects such as Django Girls . Providing financial assistance to individuals so they can attend major conferences and events. Funding the Django Fellowship program , which provides full-time staff to perform community management tasks in the Django community. Still curious? See our Frequently Asked Questions about donations. Django Fellowship Program The biggest expense of the DSF is the Django Fellowship program. It's a project where paid contractors are engaged to manage some of the administrative and community management tasks of the Django project to support rapid development of Django itself. The Django Fellowship program has a major positive impact on how Django is developed and maintained. The Django Fellows triage 10-15 new tickets each week and review and merge around fifteen non-trivial patches a week from the community. Release blocking and severe bugs aren't postponed indefinitely. Major releases happen according to an 8 month schedule and bug fix releases occur monthly. For more details, you can read retrospectives for the first three months of the program , 2015 , and 2016 . The Django Fellows are a resource to help review patches and contributions from the community, and the community loves that: As a long time contributor to Django, I\u2019m extremely happy to see how the fellowship empowered all contributors and leveraged their work. The development of Django was stunningly smooth, fast and efficient during the last three months. 1.8 alpha was released on schedule, which was unheard of until then. 1.8 is shaping up to be a great release. Fellows guided the first steps of novice contributors \u2014 who may have seen their initiatives ignored otherwise. They took patches through as many review rounds as needed, relentlessly teaching Django\u2019s guidelines and principles \u2014 where a hurried core developer may have simply made whatever changes they wanted, committed and moved on. They provided feedback on patches written by experienced contributors or core developers \u2014 allowing quick merges without shunting the review process. I\u2019m especially grateful to Tim Graham who reviewed within a day every pull request I submitted for my multiple template engines project. Without his constant help, I couldn\u2019t have made the deadline for 1.8 without jeopardizing quality. Thanks to the faster turnaround on reviews, not only did the fellowship program solve most pain points of Django\u2019s contribution process, but it also increased quality. I hope we can resume it shortly and make it sustainable! Aymeric Augustin, Django Core Developer If you use Django on a daily basis and care about the development of Django itself, you should donate today (may be tax deductible ). Only with your support can we make sure that the web framework you base your work on can grow to be even better in the coming years. Django Girls Outreach Supporting Django Girls workshops is a significant priority for the Django Software Foundation. Django Girls workshops are organized by volunteers and are provided as free events for women who want to learn to code. The workshop serves as an introduction to Python and Django, where attendees learn usable skills to build their first web app. Django Girls workshop attendees go on to organize their own workshops, lead in their community, and secure full-time jobs as developers. Read their stories in the \u201cYour Django Story\u201d series on the Django Girls blog . In 2015, the Django Software Foundation contributed $5,400 to eighteen Django Girls workshops around the world. Here's what some of the organizers had to say about the impact: Sponsorship from the DSF allowed us to have on-site child care for our Django Girls Portland workshop. We hosted 2 young children and an infant, and provided them with healthy snacks, games, sidewalk chalk, finger paint, and emoji stickers. Without our nanny, 3 of our attendees wouldn't have been able to come to the workshop. Finger paint photo is on the blog ! Lacey - Portland, Oregon, US The DSF supported Django Girls Poland four times this year and the impact was enormous! In Poland, diversity awareness is not a very common topic. When we approached different local companies about our workshops they usually didn't get what we were actually doing and why it is important. If not for the DSF, we probably would not have been able to hold our workshops at all. Our first workshops were the only until now workshops that were 100% female - female only coaches and female only attendees. Thanks to you, we were able to focus on gathering female mentors instead of searching for sponsors! Ania - Wroc\u0142aw, Poland Django Girls Seoul had 425 applicants from 11 different countries ages ranging from 16 to 50 years old. After acceptances, we had about 105 people to feed and caffeinate! Thanks to Django's sponsorship we could get all of our participants coffee for the day. It really made a huge difference because we all know how a cup of coffee can change the atmosphere and mood! We were so grateful to the sponsorship we received from abroad. We tried to get sponsorship from a lot of Korean companies but the same generosity doesn't translate well into a Korean Business culture, I guess. This made us even more thankful for our friends at the DSF! Rachell - Seoul, South Korea DSF Supporters Our donors make our work possible! We are incredibly grateful for the financial support from the following individuals and organizations in our community. Platinum Corporate Members ($30,000+) Sentry JetBrains Gold Corporate Members ($12,500+) PCPartPicker DEFNA BlockBee ohne-makler Silver Corporate Members ($5,000+) Foxley Talent Galeax JBS Dev Jonas und der Wolf Lincoln Loop pretix REVSYS Zapier Caktus Group Bronze Corporate Members ($2,000+) HackSoft Axim Collaborative Boomerang CHARTWELL Resource Group Ltd. Dedomainia LTD Iterativ.ch Maykin NEPHILA Personalkollen Software-Design Torchbox Healthchecks.io In-kind donors These donors help with significant non-cash contributions. Andrew Francis provided the badges for our donors. Sentry provides error monitoring for our infrastructure. Fastly provides the content delivery network for djangoproject.com. OSUOSL provides additional servers for our infrastructure. SysEleven provides additional servers for our infrastructure. Typefully provided the account for social media. Leaders ($1,000+) Leadership-level donors contribute $1,000 or more in a calendar year. Caktus Consulting Group, LLC Bloom Works Public Benefit Software Crafts SaaS Pegasus AspirEDU Feinheit AG Fusionbox ProxyMesh PythonAnywhere AdNabu Anexia Internetdienstleistungs GmbH IMS Kamer.nl Voys Heroes Our donor roll for all donations made in the last 365 days. GrowthPath Pty Ltd Thibaud Colas Arthur Pemberton Keith Bussell Philip James Price Benowitz Accident Injury Lawyers, LLP Williams M\u00e9ndez PyPhilly ChargebackStop Jeremy Carbaugh Miguel Vellasco Olivier Philippon Ryan Cheley Sean O'Connor Yaniv Mirel Mikkel Munch Mortensen Paul McLanahan Alex Komkov Florian Demmer Harry Percival Mehmet Caner Cakici Oscar Gillberg Arvio Ben Spaulding Daniel Hillier Erick Navarro Fran\u00e7ois Schiettecatte Jannis Leidel Jiaaro Mariusz Felisiak MattN Randy Taylor Sandbox Banking Thomas Skowron X-Net Services GmbH Speedy Software Dan Lewis Gautam Narula Agence Debord Agency Cybersecurity Backlink Bento Carlos Joel Find Boxes Greenwine Krystof Beuermann Martin Kos\u00edr Nikolaj Baer Simon Brulhart Tobias McNulty Adylzhan Khashtamov Alex Oladele Achilleion Aidas Bendoraitis Alex Evans bestforexbrokersuk.com Chris Adams Crockett Law Group Dataful.Tech Dylan Castillo Kryptex Max Malysh Michael Aschauer Portmoni RegCheck.de SecurityGladiators.com SPWG David McInnis American Disability Action Group Boone & Davis, Attorneys at Law Daniel Y. DeChant Law Faulkner Law Group, PLLC Florida Law Advisers, P.A. Ghandi Deeter Blackham Law Offices Giannis Terzopoulos Goldasich, Vick & Fulk Gus Anastopoulo Law Firm Hardball Law Hawkins Spizman Ihar Joshi Law Firm, PA Knudsen Law Latham & Martin Michael Gunzburg, P.C. Mickelsen Dalton LLC Robert E. Craven & Associates The Forsythe Law Firm, LLC The Matassini Law Firm, P.A True North Law, P.A. William Rambaum, P.A. William Wallshein P.A. Arnoux Sharma Standeford, LLC Ayson Law Firm Cheap VPS Fridrik Juliusson Hardball Law Kay Beudeker Patel Law, PC Rad Web Hosting The Law Offices of Elsa Ayoub, P.L.L.C. Windsor Hardwood International, Inc. Lambert Labs Back to Top What is the Django Software Foundation? Development of Django is supported by an independent foundation established as a 501(c)(3) non-profit. Like most open-source foundations, the goal of the Django Software Foundation is to promote, support, and advance the Django web framework. If you're interested in how the Django Software Foundation supports the Django web framework, we published a Summary of 2014. Who are the Django Fellows? There are currently two Django Fellows: Sarah Boyce (2024-present) - an active community member, co-creator of Djangonaut Space and a member of Django's review and triage team since 2023. Sarah began as a full-time Fellow in April 2024 . Natalia Bidart (2023-present) - a seasoned Django user with extensive experience in architecting, building, and maintaining scalable web services, as well as leading new feature design and development. Natalia began as a part-time Fellow in April 2023 . Former Django Fellows: Mariusz Felisiak (2019-2024) - a member of the Django team since 2017, focusing on the ORM and Oracle back-end, along with triaging tickets, reviewing pull requests, and backporting changes. He has contributed to more than a dozen open-source projects. Mariusz began as a full-time Fellow in April 2019. In 2024 Mariusz retired after five years of service. Carlton Gibson (2018-2023) - a longtime Django user, core contributor to Django REST Framework, maintainer of Django Filter and Django Crispy Forms, and a contributor to many other packages in the Django ecosystem. Carlton began as a part-time Fellow in January 2018. In 2023 Carlton retired after five years of service. Tim Graham (2014- 2019) - the inaugural Django Fellow, a member of the Django team since 2010, and a longtime major contributor and reviewer. In 2018 Tim transitioned to part-time and in 2019 retired after four years of service. Berker Peksa\u011f (2014) - a core developer on CPython and Gunicorn, Berker worked as Fellow during the 3 month pilot, supporting Tim part-time. Django Links Learn More About Django Getting Started with Django Team\n              Organization Django Software Foundation Code of Conduct Diversity Statement Get Involved Join a Group Contribute\n              to Django Submit\n              a Bug Report\n              a Security Issue Individual membership Get Help Getting Help FAQ Django Discord Official Django Forum Follow Us GitHub Twitter Fediverse (Mastodon) News RSS Support Us Sponsor Django Corporate membership Official merchandise store Benevity Workplace Giving Program Django Hosting by In-kind\n            donors Design by Threespot & andrevv \u00a9 2005-2025 Django Software\n          Foundation and individual contributors. Django is a registered\n          trademark of the Django Software Foundation."
  },
  "https://www.threespot.com": {
    "url": "https://www.threespot.com",
    "content": "Homepage - Threespot Skip to content Threespot Open navigation menu. Close navigation menu. Threespot Close navigation menu. Our Work Our Work About Us About Us Services Services Insights Insights Contact Us Contact Us play animation pause animation Make things that move people. Let\u2019s Work Together Learn About Our Work We tell stories that win hearts through narrative strategy , research , and campaigns . We create designs that inspire action by crafting visual identities and creative design . We build digital experiences that shape the future with the power of platform development and app design . Malala Fund Girls\u2019 Education Report / Centering the stories of youth left behind in education Audience research CMS development Creative design Data visualization Website design Website development 1619 Project / A learning community for a groundbreaking project CMS development Content strategy Website design National Network of Abortion Funds / A unified voice for the collective impact of abortion funds Audience research CMS development Content strategy Website design Website development National Museum of American Diplomacy / Bringing the history of diplomacy to life Audience research CMS development Communications strategy Content strategy Creative design Website design Website development About us Our mission is nothing short of revolution. We\u2019ve been building digital strategies to push causes forward since 1999. We meet every challenge with the same intensity, whether the mission is changing the world or changing a neighborhood block by block. Meet Us Keep up with our work. Sign up for our newsletter. Want to know what you\u2019re getting in to? View our newsletter archive your name * your organization * your email * Submit Want to know what you\u2019re getting in to? View our newsletter archive Insights Accessibility: From Awareness to Action Mat Brady 4 Minute Read Creative & Content Strategy DEI User Experience Images, Ideas, and AI Threespot 5 Minute Read Creative & Content Strategy DEI Technology Meeting the Next Generation Megan Lewin-Smith 2 Minute Read DEI Design 25 Years and Still Going Strong Liz Ott 1 minute read Design Work Culture Careers Make your work matter more We\u2019re committed to solving complex problems by bringing diverse perspectives and voices to the table and an empathetic ear to every conversation. If you want to work for clients who are making a difference and not just a profit, we should talk. Join Our Team Start Something. Do you have a problem that needs solving? A revolution you need started? Are you looking to shake up the status quo? Sign us up, we\u2019re\u00a0in. Hire Us Threespot 1325 G St NW Suite 500 Washington, DC 20005 \u00a9 Threespot 2025 Threespot is a Certified B Corp because the world isn\u2019t gonna change itself. Instagram Facebook LinkedIn"
  },
  "http://andrevv.com/": {
    "url": "http://andrevv.com/",
    "content": "Andrew McCarthy - Creative Developer & Designer, San Diego \u270d About Work Andrew McCarthy Creative Developer & Designer One third of No Plans studio Creative director of Golden Hour mag See my past work I'd rather be skateboarding [email\u00a0protected] OK that's enough fun. Want to have a look at my work ?"
  },
  "https://chat.djangoproject.com": {
    "url": "https://chat.djangoproject.com",
    "content": "Django"
  },
  "https://palletsprojects.com/donate": {
    "url": "https://palletsprojects.com/donate",
    "content": "Pallets Pallets Donate Contributing Ecosystem Blog Contact Donate to Pallets Pallets projects are downloaded over 100 million times per month. You or your\ncompany might be using our frameworks directly, but consider that the tools you\nuse may use us behind the scenes as well. Being able to fund the maintainers,\nand hire additional help such as designers, technical writers, or project\nmanagers can help us stay focused and productive. The Pallets teams does what\nthey do because they love the frameworks and they love to code, and we are\ngrateful to the community support that helps that continue. Thank you! Donate through GitHub Sponsors: https://github.com/sponsors/pallets Donate through the Python Software Foundation (PSF): https://psfmember.org/civicrm/contribute/transact/?reset=1&id=20 Subscribe through thanks.dev: https://thanks.dev Subscribe through Tidelift: https://tidelift.com See the Funding Sources page for details about all our funding\nsources. Policies Security Releases Versions Code of Conduct Elsewhere Pallets on GitHub Pallets on PyPI Pallets-Eco on GitHub Pallets-Eco on PyPI Support Us Donate Funding Sources"
  },
  "https://github.com/pallets/flask/issues/": {
    "url": "https://github.com/pallets/flask/issues/",
    "content": "GitHub \u00b7 Where software is built Skip to content Navigation Menu Toggle navigation Sign in Product GitHub Copilot Write better code with AI GitHub Advanced Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events & Webinars Ebooks & Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons GitHub Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert pallets / flask Public Notifications You must be signed in to change notification settings Fork 16.4k Star 69.2k Code Issues 1 Pull requests 3 Discussions Actions Security Insights Additional navigation options Code Issues Pull requests Discussions Actions Security Insights Preview Issues Search Issues is : issue state : open is:issue state:open Clear filter Search Labels Milestones New issue Search results Open Closed merge app and request contexts into a single context Status: Open. # 5639 In pallets/flask; \u00b7 davidism opened on Nov 13, 2024 \u00b7 3.2.0 Footer \u00a9 2025 GitHub,\u00a0Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can\u2019t perform that action at this time."
  }
}